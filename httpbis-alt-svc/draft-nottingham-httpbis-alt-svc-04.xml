<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../Tools/rfc2629xslt/rfc2629.xslt" ?>
<!DOCTYPE rfc SYSTEM "../Tools/rfc2629xslt/rfc2629.dtd">
<rfc ipr="trust200902" docName="draft-nottingham-httpbis-alt-svc-04" category="std">
  <?rfc toc="yes"?>
  <?rfc tocindent="yes"?>
  <?rfc sortrefs="yes"?>
  <?rfc symrefs="yes"?>
  <?rfc strict="yes"?>
  <?rfc compact="yes"?>
  <?rfc comments="yes"?>
  <?rfc inline="yes"?>
  <front>
    <title abbrev="Alternative Services">HTTP Alternative Services</title>
    <author initials="M." surname="Nottingham" fullname="Mark Nottingham">
      <organization>Akamai</organization>
      <address>
        <email>mnot@mnot.net</email>
        <uri>http://www.mnot.net/</uri>
      </address>
    </author>
    <author initials="P." surname="McManus" fullname="Patrick McManus">
      <organization>Mozilla</organization>
      <address>
        <email>mcmanus@ducksong.com</email>
        <uri>https://mozillians.org/u/pmcmanus/</uri>
      </address>
    </author>
    <date year="2014"/>
    <area>General</area>
    <keyword>Internet-Draft</keyword>
    <abstract>
      <t>This document specifies “alternative services” for HTTP, which allow an
origin’s resources to be authoritatively available at a separate network
location, possibly accessed with a different protocol configuration.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="introduction" title="Introduction">
      <t>HTTP <xref target="I-D.ietf-httpbis-p1-messaging"/> conflates the identification of
resources with their location. In other words, http:// (and https://) URLs are
used to both name and find things to interact with.</t>
      <t>In some cases, it is desirable to separate these aspects; to be able to keep
the same identifier for a resource, but interact with it using a different
location on the network.</t>
      <t>For example:</t>
      <t>
        <list style="symbols">
          <t>An origin server might wish to redirect a client to an alternative when it
needs to go down for maintenance, or it has found an alternative in a
location that is more local to the client.</t>
          <t>An origin server might wish to offer access to its resources using a new
protocol (such as HTTP/2 <xref target="I-D.ietf-httpbis-http2"/>) or one using improved
security (such as TLS {{RFC5246}).</t>
          <t>An origin server might wish to segment its clients into groups of
capabilities, such as those supporting SNI (see <xref target="RFC6066"/>) and those not
supporting it, for operational purposes.</t>
        </list>
      </t>
      <t>This specification defines a new concept in HTTP, “Alternative Services”, that
allows a resource to nominate additional means of interacting with it on the
network. It defines a general framework for this in <xref target="alternative"/>, along with
a specific mechanism for discovering them using HTTP headers in <xref target="alt-svc"/>.</t>
      <t>It also introduces a new status code in <xref target="status"/>, so that origin servers (or
their nominated alternatives) can indicate that they are not authoritative for
a given origin, in cases where the wrong location is used.</t>
      <section anchor="notational-conventions" title="Notational Conventions">
        <t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”,
“SHOULD NOT”, “RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be
interpreted as described in <xref target="RFC2119"/>.</t>
        <t>This document uses the Augmented BNF defined in <xref target="RFC5234"/> along with the
“OWS”, “DIGIT”, “parameter”, “port” and “delta-second” rules from
<xref target="I-D.ietf-httpbis-p1-messaging"/>, and uses the “#rule” extension defined in
Section 7 of that document.</t>
      </section>
    </section>
    <section anchor="alternative" title="Alternative Services Concepts">
      <t>This specification defines a new concept in HTTP, the “alternative service.”
When an origin (see <xref target="RFC6454"/>) has resources are accessible through a
different protocol / host / port combination, it is said to have an alternative
service.</t>
      <t>An alternative service can be used to interact with the resources on an origin
server at a separate location on the network, possibly using a different
protocol configuration. Alternative services are considered authoritative for
an origin’s resources, in the sense of <xref target="I-D.ietf-httpbis-p1-messaging"/>
Section 9.1.</t>
      <t>For example, an origin:</t>
      <figure>
        <artwork><![CDATA[
("http", "www.example.com", "80")
]]></artwork>
      </figure>
      <t>might declare that its resources are also accessible at the alternative service:</t>
      <figure>
        <artwork><![CDATA[
("h2", "new.example.com", "81")
]]></artwork>
      </figure>
      <t>By their nature, alternative services are explicitly at the granularity of an
origin; i.e., they cannot be selectively applied to resources within an origin.</t>
      <t>Alternative services do not replace or change the origin for any given resource;
in general, they are not visible to the software “above” the access mechanism.
The alternative service is essentially alternative routing information that can
also be used to reach the origin in the same way that DNS CNAME or SRV records
define routing information at the name resolution level. Each origin maps to a
set of these routes - the default route is derived from origin itself and the
other routes are introduced based on alternative-protocol information.</t>
      <t>Furthermore, it is important to note that the first member of an alternative
service tuple is different from the “scheme” component of an origin; it is more
specific, identifying not only the major version of the protocol being used,
but potentially communication options for that protocol.</t>
      <t>This means that clients using an alternative service will change the host, port
and protocol that they are using to fetch resources, but these changes MUST NOT
be propagated to the application that is using HTTP; from that standpoint, the
URI being accessed and all information derived from it (scheme, host, port) are
the same as before.</t>
      <t>Importantly, this includes its security context; in particular, when TLS
<xref target="RFC5246"/> is in use, the alternative server will need to present a certificate
for the origin’s host name, not that of the alternative. Likewise, the Host
header is still derived from the origin, not the alternative service (just as it
would if a CNAME were being used).</t>
      <t>The changes MAY, however, be made visible in debugging tools, consoles, etc.</t>
      <t>Formally, an alternative service is identified by the combination of:</t>
      <t>
        <list style="symbols">
          <t>An ALPN protocol, as per <xref target="I-D.ietf-tls-applayerprotoneg"/></t>
          <t>A host, as per <xref target="RFC3986"/></t>
          <t>A port, as per <xref target="RFC3986"/></t>
        </list>
      </t>
      <t>Additionally, each alternative service MUST have:</t>
      <t>
        <list style="symbols">
          <t>A freshness lifetime, expressed in seconds; see <xref target="caching"/></t>
        </list>
      </t>
      <t>There are many ways that a client could discover the alternative service(s)
associated with an origin.</t>
      <section anchor="host_auth" title="Host Authentication">
        <t>Clients MUST NOT use alternative services with a host other than the origin’s
without strong server authentication; this mitigates the attack described in
<xref target="host_security"/>. One way to achieve this is for the alternative to use TLS
with a certificate that is valid for that origin.</t>
        <t>For example, if the origin’s host is “www.example.com” and an alternative is
offered on “other.example.com” with the “h2” protocol, and the certificate
offered is valid for “www.example.com”, the client can use the alternative.
However, if “other.example.com” is offered with the “h2c” protocol, the client
cannot use it, because there is no mechanism in that protocol to establish
strong server authentication.</t>
        <t>Furthermore, this means that the HTTP Host header and the SNI information
provided in TLS by the client will be that of the origin, not the alternative.</t>
      </section>
      <section anchor="caching" title="Alternative Service Caching">
        <t>Mechanisms for discovering alternative services can associate a freshness
lifetime with them; for example, the Alt-Svc header field uses the “ma”
parameter.</t>
        <t>Clients MAY choose to use an alternative service instead of the origin at any
time when it is considered fresh; see <xref target="switching"/> for specific
recommendations. </t>
        <t>Clients with existing connections to alternative services are not required to
fall back to the origin when its freshness lifetime ends; i.e., the caching
mechanism is intended for limiting how long an alternative service can be used
for establishing new requests, not limiting the use of existing ones.</t>
        <t>To mitigate risks associated with caching compromised values (see
<xref target="host_security"/> for details), user agents SHOULD examine cached alternative
services when they detect a change in network configuration, and remove any
that could be compromised (for example, those whose association with the trust
root is questionable). UAs that do not have a means of detecting network
changes SHOULD place an upper bound on their lifetime.</t>
      </section>
      <section anchor="requiring-server-name-indication" title="Requiring Server Name Indication">
        <t>A client must only use a TLS-based alternative service if the client also
supports TLS Server Name Indication (SNI) <xref target="RFC6066"/>. This supports the
conservation of IP addresses on the alternative service host.</t>
      </section>
      <section anchor="switching" title="Using Alternative Services">
        <t>By their nature, alternative services are optional; clients are not required to
use them. However, it is advantageous for clients to behave in a predictable
way when they are used by servers (e.g., for load balancing).</t>
        <t>Therefore, if a client becomes aware of an alternative service, the client
SHOULD use that alternative service for all requests to the associated origin
as soon as it is available, provided that the security properties of the
alternative service protocol are desirable, as compared to the existing
connection.</t>
        <t>The client is not required to block requests; the origin’s connection can be
used until the alternative connection is established. However, if the security
properties of the existing connection are weak (e.g. cleartext HTTP/1.1) then
it might make sense to block until the new connection is fully available in
order to avoid information leakage.</t>
        <t>Furthermore, if the connection to the alternative service fails or is
unresponsive, the client MAY fall back to using the origin. Note, however, that
this could be the basis of a downgrade attack, thus losing any enhanced
security properties of the alternative service.</t>
      </section>
    </section>
    <section anchor="alt-svc" title="The Alt-Svc HTTP Header Field">
      <t>A HTTP(S) origin server can advertise the availability of alternative services
(see <xref target="alternative"/>) to clients by adding an Alt-Svc header field to responses.</t>
      <figure>
        <artwork><![CDATA[
Alt-Svc     = 1#( alternative *( OWS ";" OWS parameter ) )
alternative   = <"> protocol-id <"> "=" port
protocol-id = <ALPN protocol identifier>
]]></artwork>
      </figure>
      <t>For example:</t>
      <figure>
        <artwork><![CDATA[
Alt-Svc: "http2"=8000
]]></artwork>
      </figure>
      <t>This indicates that the “http2” protocol on the same host using the
indicated port (in this case, 8000).</t>
      <t>Alt-Svc does not allow advertisement of alternative services on other hosts, to
protect against various header-based attacks.</t>
      <t>It can, however, have multiple values:</t>
      <figure>
        <artwork><![CDATA[
Alt-Svc: "h2c"=8000, "h2"=443
]]></artwork>
      </figure>
      <t>The value(s) advertised by Alt-Svc can be used by clients to open a new
connection to one or more alternative services immediately, or simultaneously
with subsequent requests on the same connection.</t>
      <t>Intermediaries MUST NOT change or append Alt-Svc values.</t>
      <t>Finally, note that while it may be technically possible to put content other
than printable ASCII in a HTTP header, some implementations only support ASCII
(or a superset of it) in header field values. Therefore, this field SHOULD NOT
be used to convey protocol identifiers that are not printable ASCII, or those
that contain quote characters.</t>
      <section anchor="caching-alt-svc-header-field-values" title="Caching Alt-Svc Header Field Values">
        <t>When an alternative service is advertised using Alt-Svc, it is considered fresh
for 24 hours from generation of the message. This can be modified with the ‘ma’
(max-age) parameter;</t>
        <figure>
          <artwork><![CDATA[
Alt-Svc: "h2"=443;ma=3600
]]></artwork>
        </figure>
        <t>which indicates the number of seconds since the response was generated the
alternative service is considered fresh for. </t>
        <figure>
          <artwork><![CDATA[
ma = delta-seconds
]]></artwork>
        </figure>
        <t>See <xref target="I-D.ietf-httpbis-p6-cache"/> Section 4.2.3 for details of determining
response age. For example, a response:</t>
        <figure>
          <artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: text/html
Cache-Control: 600
Age: 30
Alt-Svc: "h2c"=8000; ma=60
]]></artwork>
        </figure>
        <t>indicates that an alternative service is available and usable for the next 60
seconds. However, the response has already been cached for 30 seconds (as per
the Age header field value), so therefore the alternative service is only fresh
for the 30 seconds from when this response was received, minus estimated
transit time. </t>
        <t>When an Alt-Svc response header is received from an origin, its value
invalidates and replaces all cached alternative services for that origin.</t>
        <t>See <xref target="caching"/> for general requirements on caching alternative services.</t>
        <t>Note that the freshness lifetime for HTTP caching (here, 600 seconds) does not
affect caching of Alt-Svc values.</t>
      </section>
    </section>
    <section anchor="status" title="The 4NN Not Authoritative HTTP Status Code">
      <t>The 4NN (Not Authoritative) status code indicates that the current origin
server (usually, but not always an alternative service; see <xref target="alternative"/>) is
not authoritative for the requested resource, in the sense of
<xref target="I-D.ietf-httpbis-p1-messaging"/>, Section 9.1.</t>
      <t>Clients receiving 4NN (Not Authoritative) from an alternative service MUST
remove the corresponding entry from its alternative service cache (see
<xref target="caching"/>) for that origin. Regardless of the idempotency of the request
method, they MAY retry the request, either at another alternative server, or at
the origin.</t>
      <t>This status code MUST NOT be generated by proxies.</t>
      <t>A 4NN response is cacheable by default; i.e., unless otherwise indicated by the
method definition or explicit cache controls (see Section 4.2.2 of
<xref target="I-D.ietf-httpbis-p6-cache"/>).</t>
    </section>
    <section anchor="iana-considerations" title="IANA Considerations">
      <section anchor="the-alt-svc-message-header-field" title="The Alt-Svc Message Header Field">
        <t>This document registers Alt-Svc in the Permanent Message Header Registry
<xref target="RFC3864"/>.</t>
        <t>
          <list style="symbols">
            <t>Header Field Name: Alt-Svc</t>
            <t>Application Protocol: http</t>
            <t>Status: standard</t>
            <t>Author/Change Controller: IETF</t>
            <t>Specification Document: [this document]</t>
            <t>Related Information: </t>
          </list>
        </t>
      </section>
      <section anchor="the-4nn-not-authoritative-http-status-code" title="The 4NN Not Authoritative HTTP Status Code">
        <t>This document registers the 4NN (Not Authoritative) HTTP Status code
<xref target="I-D.ietf-httpbis-p2-semantics"/>.</t>
        <t>
          <list style="symbols">
            <t>Status Code: 4NN</t>
            <t>Short Description: Not Authoritative</t>
            <t>Specification: [this document], <xref target="status"/></t>
          </list>
        </t>
      </section>
    </section>
    <section anchor="security-considerations" title="Security Considerations">
      <t>Identified security considerations should be enumerated in the appropriate
documents depending on which proposals are accepted. Those listed below are
generic to all uses of alternative services; more specific ones might be
necessary.</t>
      <section anchor="changing-ports" title="Changing Ports">
        <t>Using an alternative service implies accessing an origin’s resources on an
alternative port, at a minimum. An attacker that can inject alternative services
and listen at the advertised port is therefore able to hijack an origin.</t>
        <t>For example, an attacker that can add HTTP response header fields can redirect
traffic to a different port on the same host using the Alt-Svc header field; if
that port is under the attacker’s control, they can thus masquerade as the HTTP
server.</t>
        <t>This risk can be mitigated by restricting the ability to advertise alternative
services, and restricting who can open a port for listening on that host.</t>
      </section>
      <section anchor="host_security" title="Changing Hosts">
        <t>When the host is changed due to the use of an alternative service, it presents
an opportunity for attackers to hijack communication to an origin.</t>
        <t>For example, if an attacker can convince a user agent to send all traffic for
“innocent.example.org” to “evil.example.com” by successfully associating it as
an alternative service, they can masquerade as that origin. This can be done
locally (see mitigations above) or remotely (e.g., by an intermediary as a
man-in-the-middle attack).</t>
        <t>This is the reason for the requirement in <xref target="host_auth"/> that any alternative
service with a host different to the origin’s be strongly authenticated with
the origin’s identity; i.e., presenting a certificate for the origin proves
that the alternative service is authorized to serve traffic for the origin.</t>
        <t>However, this authorization is only as strong as the method used to
authenticate the alternative service. In particular, there are well-known
exploits to make an attacker’s certificate appear as legitimate.</t>
        <t>Alternative services could be used to persist such an attack; for example, an
intermediary could man-in-the-middle TLS-protected communication to a target,
and then direct all traffic to an alternative service with a large freshness
lifetime, so that the user agent still directs traffic to the attacker even when
not using the intermediary.</t>
        <t>As a result, there is a requirement in <xref target="caching"/> to examine cached alternative
services when a network change is detected.</t>
      </section>
      <section anchor="changing-protocols" title="Changing Protocols">
        <t>When the ALPN protocol is changed due to the use of an alternative service, the
security properties of the new connection to the origin can be different from
that of the “normal” connection to the origin, because the protocol identifier
itself implies this.</t>
        <t>For example, if a “https://” URI had a protocol advertised that does not use
some form of end-to-end encryption (most likely, TLS), it violates the
expectations for security that the URI scheme implies.</t>
        <t>Therefore, clients cannot blindly use alternative services, but instead evaluate
the option(s) presented to assure that security requirements and expectations
(of specifications, implementations and end users) are met.</t>
      </section>
    </section>
  </middle>
  <back>
    <references title="Normative References">
      <reference anchor="RFC2119">
        <front>
          <title abbrev="RFC Key Words">Key words for use in RFCs to Indicate Requirement Levels</title>
          <author initials="S." surname="Bradner" fullname="Scott Bradner">
            <organization>Harvard University</organization>
            <address>
              <postal>
                <street>1350 Mass. Ave.</street>
                <street>Cambridge</street>
                <street>MA 02138</street>
              </postal>
              <phone>- +1 617 495 3864</phone>
              <email>sob@harvard.edu</email>
            </address>
          </author>
          <date year="1997" month="March"/>
          <area>General</area>
          <keyword>keyword</keyword>
          <abstract>
            <t>
   In many standards track documents several words are used to signify
   the requirements in the specification.  These words are often
   capitalized.  This document defines these words as they should be
   interpreted in IETF documents.  Authors who follow these guidelines
   should incorporate this phrase near the beginning of their document:

<list><t>
      The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL
      NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED",  "MAY", and
      "OPTIONAL" in this document are to be interpreted as described in
      RFC 2119.
</t></list></t>
            <t>
   Note that the force of these words is modified by the requirement
   level of the document in which they are used.
</t>
          </abstract>
        </front>
        <seriesInfo name="BCP" value="14"/>
        <seriesInfo name="RFC" value="2119"/>
        <format type="TXT" octets="4723" target="http://www.rfc-editor.org/rfc/rfc2119.txt"/>
        <format type="HTML" octets="17970" target="http://xml.resource.org/public/rfc/html/rfc2119.html"/>
        <format type="XML" octets="5777" target="http://xml.resource.org/public/rfc/xml/rfc2119.xml"/>
      </reference>
      <reference anchor="RFC3986">
        <front>
          <title abbrev="URI Generic Syntax">Uniform Resource Identifier (URI): Generic Syntax</title>
          <author initials="T." surname="Berners-Lee" fullname="Tim Berners-Lee">
            <organization abbrev="W3C/MIT">World Wide Web Consortium</organization>
            <address>
              <postal>
                <street>Massachusetts Institute of Technology</street>
                <street>77 Massachusetts Avenue</street>
                <city>Cambridge</city>
                <region>MA</region>
                <code>02139</code>
                <country>USA</country>
              </postal>
              <phone>+1-617-253-5702</phone>
              <facsimile>+1-617-258-5999</facsimile>
              <email>timbl@w3.org</email>
              <uri>http://www.w3.org/People/Berners-Lee/</uri>
            </address>
          </author>
          <author initials="R." surname="Fielding" fullname="Roy T. Fielding">
            <organization abbrev="Day Software">Day Software</organization>
            <address>
              <postal>
                <street>5251 California Ave., Suite 110</street>
                <city>Irvine</city>
                <region>CA</region>
                <code>92617</code>
                <country>USA</country>
              </postal>
              <phone>+1-949-679-2960</phone>
              <facsimile>+1-949-679-2972</facsimile>
              <email>fielding@gbiv.com</email>
              <uri>http://roy.gbiv.com/</uri>
            </address>
          </author>
          <author initials="L." surname="Masinter" fullname="Larry Masinter">
            <organization abbrev="Adobe Systems">Adobe Systems Incorporated</organization>
            <address>
              <postal>
                <street>345 Park Ave</street>
                <city>San Jose</city>
                <region>CA</region>
                <code>95110</code>
                <country>USA</country>
              </postal>
              <phone>+1-408-536-3024</phone>
              <email>LMM@acm.org</email>
              <uri>http://larry.masinter.net/</uri>
            </address>
          </author>
          <date year="2005" month="January"/>
          <area>Applications</area>
          <keyword>uniform resource identifier</keyword>
          <keyword>URI</keyword>
          <keyword>URL</keyword>
          <keyword>URN</keyword>
          <keyword>WWW</keyword>
          <keyword>resource</keyword>
          <abstract>
            <t>
A Uniform Resource Identifier (URI) is a compact sequence of characters
that identifies an abstract or physical resource.  This specification
defines the generic URI syntax and a process for resolving URI references
that might be in relative form, along with guidelines and security
considerations for the use of URIs on the Internet.
The URI syntax defines a grammar that is a superset of all valid URIs,
allowing an implementation to parse the common components of a URI
reference without knowing the scheme-specific requirements of every
possible identifier.  This specification does not define a generative
grammar for URIs; that task is performed by the individual
specifications of each URI scheme.
</t>
          </abstract>
        </front>
        <seriesInfo name="STD" value="66"/>
        <seriesInfo name="RFC" value="3986"/>
        <format type="TXT" octets="141811" target="http://www.rfc-editor.org/rfc/rfc3986.txt"/>
        <format type="HTML" octets="214067" target="http://xml.resource.org/public/rfc/html/rfc3986.html"/>
        <format type="XML" octets="163534" target="http://xml.resource.org/public/rfc/xml/rfc3986.xml"/>
      </reference>
      <reference anchor="RFC5234">
        <front>
          <title>Augmented BNF for Syntax Specifications: ABNF</title>
          <author initials="D." surname="Crocker" fullname="D. Crocker">
            <organization/>
          </author>
          <author initials="P." surname="Overell" fullname="P. Overell">
            <organization/>
          </author>
          <date year="2008" month="January"/>
          <abstract>
            <t>Internet technical specifications often need to define a formal syntax.  Over the years, a modified version of Backus-Naur Form (BNF), called Augmented BNF (ABNF), has been popular among many Internet specifications.  The current specification documents ABNF.  It balances compactness and simplicity with reasonable representational power.  The differences between standard BNF and ABNF involve naming rules, repetition, alternatives, order-independence, and value ranges.  This specification also supplies additional rule definitions and encoding for a core lexical analyzer of the type common to several Internet specifications. [STANDARDS-TRACK]</t>
          </abstract>
        </front>
        <seriesInfo name="STD" value="68"/>
        <seriesInfo name="RFC" value="5234"/>
        <format type="TXT" octets="26359" target="http://www.rfc-editor.org/rfc/rfc5234.txt"/>
      </reference>
      <reference anchor="RFC6066">
        <front>
          <title>Transport Layer Security (TLS) Extensions: Extension Definitions</title>
          <author initials="D." surname="Eastlake" fullname="D. Eastlake">
            <organization/>
          </author>
          <date year="2011" month="January"/>
          <abstract>
            <t>This document provides specifications for existing TLS extensions.  It is a companion document for RFC 5246, "The Transport Layer Security (TLS) Protocol Version 1.2".  The extensions specified are server_name, max_fragment_length, client_certificate_url, trusted_ca_keys, truncated_hmac, and status_request. [STANDARDS-TRACK]</t>
          </abstract>
        </front>
        <seriesInfo name="RFC" value="6066"/>
        <format type="TXT" octets="55079" target="http://www.rfc-editor.org/rfc/rfc6066.txt"/>
      </reference>
      <reference anchor="RFC6454">
        <front>
          <title>The Web Origin Concept</title>
          <author initials="A." surname="Barth" fullname="A. Barth">
            <organization/>
          </author>
          <date year="2011" month="December"/>
          <abstract>
            <t>This document defines the concept of an "origin", which is often used as the scope of authority or privilege by user agents.  Typically, user agents isolate content retrieved from different origins to prevent malicious web site operators from interfering with the operation of benign web sites.  In addition to outlining the principles that underlie the concept of origin, this document details how to determine the origin of a URI and how to serialize an origin into a string.  It also defines an HTTP header field, named "Origin", that indicates which origins are associated with an HTTP request. [STANDARDS-TRACK]</t>
          </abstract>
        </front>
        <seriesInfo name="RFC" value="6454"/>
        <format type="TXT" octets="41363" target="http://www.rfc-editor.org/rfc/rfc6454.txt"/>
      </reference>
      <reference anchor="I-D.ietf-tls-applayerprotoneg">
        <front>
          <title>Transport Layer Security (TLS) Application Layer Protocol Negotiation Extension</title>
          <author initials="S" surname="Friedl" fullname="Stephan Friedl">
            <organization/>
          </author>
          <author initials="A" surname="Popov" fullname="Andrey Popov">
            <organization/>
          </author>
          <author initials="A" surname="Langley" fullname="Adam Langley">
            <organization/>
          </author>
          <author initials="S" surname="Emile" fullname="Stephan Emile">
            <organization/>
          </author>
          <date month="March" day="3" year="2014"/>
          <abstract>
            <t>This document describes a Transport Layer Security (TLS) extension for application layer protocol negotiation within the TLS handshake. For instances in which the TLS connection is established over a well known TCP or UDP port not associated with the desired application layer protocol, this extension allows the application layer to negotiate which protocol will be used within the TLS connection.</t>
          </abstract>
        </front>
        <seriesInfo name="Internet-Draft" value="draft-ietf-tls-applayerprotoneg-05"/>
        <format type="TXT" target="http://www.ietf.org/internet-drafts/draft-ietf-tls-applayerprotoneg-05.txt"/>
      </reference>
      <reference anchor="I-D.ietf-httpbis-p1-messaging">
        <front>
          <title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
          <author initials="R" surname="Fielding" fullname="Roy Fielding">
            <organization/>
          </author>
          <author initials="J" surname="Reschke" fullname="Julian Reschke">
            <organization/>
          </author>
          <date month="February" day="6" year="2014"/>
          <abstract>
            <t>The Hypertext Transfer Protocol (HTTP) is a stateless application- level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the "http" and "https" Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t>
          </abstract>
        </front>
        <seriesInfo name="Internet-Draft" value="draft-ietf-httpbis-p1-messaging-26"/>
        <format type="TXT" target="http://www.ietf.org/internet-drafts/draft-ietf-httpbis-p1-messaging-26.txt"/>
      </reference>
      <reference anchor="I-D.ietf-httpbis-p6-cache">
        <front>
          <title>Hypertext Transfer Protocol (HTTP/1.1): Caching</title>
          <author initials="R" surname="Fielding" fullname="Roy Fielding">
            <organization/>
          </author>
          <author initials="M" surname="Nottingham" fullname="Mark Nottingham">
            <organization/>
          </author>
          <author initials="J" surname="Reschke" fullname="Julian Reschke">
            <organization/>
          </author>
          <date month="February" day="6" year="2014"/>
          <abstract>
            <t>The Hypertext Transfer Protocol (HTTP) is a stateless application- level protocol for distributed, collaborative, hypertext information systems.  This document defines HTTP caches and the associated header fields that control cache behavior or indicate cacheable response messages.</t>
          </abstract>
        </front>
        <seriesInfo name="Internet-Draft" value="draft-ietf-httpbis-p6-cache-26"/>
        <format type="TXT" target="http://www.ietf.org/internet-drafts/draft-ietf-httpbis-p6-cache-26.txt"/>
      </reference>
    </references>
    <references title="Informative References">
      <reference anchor="RFC3864">
        <front>
          <title>Registration Procedures for Message Header Fields</title>
          <author initials="G." surname="Klyne" fullname="G. Klyne">
            <organization/>
          </author>
          <author initials="M." surname="Nottingham" fullname="M. Nottingham">
            <organization/>
          </author>
          <author initials="J." surname="Mogul" fullname="J. Mogul">
            <organization/>
          </author>
          <date year="2004" month="September"/>
          <abstract>
            <t>This specification defines registration procedures for the message header fields used by Internet mail, HTTP, Netnews and other applications.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
          </abstract>
        </front>
        <seriesInfo name="BCP" value="90"/>
        <seriesInfo name="RFC" value="3864"/>
        <format type="TXT" octets="36231" target="http://www.rfc-editor.org/rfc/rfc3864.txt"/>
      </reference>
      <reference anchor="RFC5246">
        <front>
          <title>The Transport Layer Security (TLS) Protocol Version 1.2</title>
          <author initials="T." surname="Dierks" fullname="T. Dierks">
            <organization/>
          </author>
          <author initials="E." surname="Rescorla" fullname="E. Rescorla">
            <organization/>
          </author>
          <date year="2008" month="August"/>
          <abstract>
            <t>This document specifies Version 1.2 of the Transport Layer Security (TLS) protocol.  The TLS protocol provides communications security over the Internet.  The protocol allows client/server applications to communicate in a way that is designed to prevent eavesdropping, tampering, or message forgery. [STANDARDS-TRACK]</t>
          </abstract>
        </front>
        <seriesInfo name="RFC" value="5246"/>
        <format type="TXT" octets="222395" target="http://www.rfc-editor.org/rfc/rfc5246.txt"/>
      </reference>
      <reference anchor="I-D.ietf-httpbis-p2-semantics">
        <front>
          <title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
          <author initials="R" surname="Fielding" fullname="Roy Fielding">
            <organization/>
          </author>
          <author initials="J" surname="Reschke" fullname="Julian Reschke">
            <organization/>
          </author>
          <date month="February" day="6" year="2014"/>
          <abstract>
            <t>The Hypertext Transfer Protocol (HTTP) is a stateless application- level protocol for distributed, collaborative, hypertext information systems.  This document defines the semantics of HTTP/1.1 messages, as expressed by request methods, request header fields, response status codes, and response header fields, along with the payload of messages (metadata and body content) and mechanisms for content negotiation.</t>
          </abstract>
        </front>
        <seriesInfo name="Internet-Draft" value="draft-ietf-httpbis-p2-semantics-26"/>
        <format type="TXT" target="http://www.ietf.org/internet-drafts/draft-ietf-httpbis-p2-semantics-26.txt"/>
      </reference>
      <reference anchor="I-D.ietf-httpbis-http2">
        <front>
          <title>Hypertext Transfer Protocol version 2</title>
          <author initials="M" surname="Belshe" fullname="Mike Belshe">
            <organization/>
          </author>
          <author initials="R" surname="Peon" fullname="Roberto Peon">
            <organization/>
          </author>
          <author initials="M" surname="Thomson" fullname="Martin Thomson">
            <organization/>
          </author>
          <date month="February" day="13" year="2014"/>
          <abstract>
            <t>This specification describes an optimized expression of the syntax of the Hypertext Transfer Protocol (HTTP).  HTTP/2 enables a more efficient use of network resources and a reduced perception of latency by introducing header field compression and allowing multiple concurrent messages on the same connection.  It also introduces unsolicited push of representations from servers to clients.  This document is an alternative to, but does not obsolete, the HTTP/1.1 message syntax.  HTTP's existing semantics remain unchanged.</t>
          </abstract>
        </front>
        <seriesInfo name="Internet-Draft" value="draft-ietf-httpbis-http2-10"/>
        <format type="TXT" target="http://www.ietf.org/internet-drafts/draft-ietf-httpbis-http2-10.txt"/>
      </reference>
    </references>
    <section anchor="acknowledgements" title="Acknowledgements">
      <t>Thanks to Eliot Lear, Stephen Farrell, Guy Podjarny, Stephen Ludin, Erik
Nygren, Paul Hoffman, Adam Langley, Will Chan and Richard Barnes for their
feedback and suggestions.</t>
      <t>The Alt-Svc header field was influenced by the design of the
Alternative-Protocol header in SPDY.</t>
    </section>
  </back>
</rfc>
