



Network Working Group                                      M. Nottingham
Internet-Draft                                            April 12, 2017
Obsoletes: 3205 (if approved)
Intended status: Best Current Practice
Expires: October 14, 2017


                   On the use of HTTP as a Substrate
                      draft-nottingham-bcp56bis-00

Abstract

   HTTP is often used as a substrate for other application protocols.
   This document specifies best practices for these protocols' use of
   HTTP.

Note to Readers

   The issues list for this draft can be found at
   https://github.com/mnot/I-D/labels/bcp56bis .

   The most recent (often, unpublished) draft is at
   https://mnot.github.io/I-D/bcp56bis/ .

   Recent changes are listed at https://github.com/mnot/I-D/commits/gh-
   pages/bcp56bis .

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on October 14, 2017.








Nottingham              Expires October 14, 2017                [Page 1]

Internet-Draft      On the use of HTTP as a Substrate         April 2017


Copyright Notice

   Copyright (c) 2017 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

1.  Introduction

   HTTP [1] is often used as a substrate for other application
   protocols.  This is done for a variety of reasons:

   o  familiarity by implementers, specifiers, administrators,
      developers and users;

   o  availability of a variety of client, server and proxy
      implementations;

   o  ease of use;

   o  reuse of existing mechanisms like authentication and encryption;

   o  presence of HTTP servers and clients in target deployments, and

   o  its ability to traverse firewalls.

   The Internet community has a long tradition of protocol reuse, dating
   back to the use of Telnet [12] as a substrate for FTP [13] and SMTP
   [14].  However, layering new protocols over HTTP brings its own set
   of issues:

   o  Should an application using HTTP define a new URL scheme?  Use new
      ports?

   o  Should it use standard HTTP methods and status codes, or define
      new ones?

   o  How can the maximum value be extracted from the use of HTTP?





Nottingham              Expires October 14, 2017                [Page 2]

Internet-Draft      On the use of HTTP as a Substrate         April 2017


   o  How can interoperability problems and "protocol dead ends" be
      avoided?

   This document contains best current practices regarding these issues
   in the use of HTTP by applications.  Section 2 defines what
   applications it applies to; Section 4 conveys best practices for
   specific HTTP protocol elements.

   It is intended primarily for use by IETF efforts, but might be
   applicable in other situations.

1.1.  Notational Conventions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [2].

2.  Is HTTP Being Used?

   Different applications have different goals when using HTTP.  In this
   document, we say an application is _using HTTP_ when any of the
   following conditions are true:

   o  The transport port used (or default port) is 80 or 443

   o  The URL scheme used is "http" or "https"

   o  The message format is as described in [3], or the connection
      handshake is as described in [8].

   When an application is using HTTP, all of the requirements of the
   HTTP protocol suite (including but not limited to [3], [4], [5], [6],
   {{!RFC7234}, [7] and [8]) are in force.

   An application might not be _using HTTP_ according to this
   definition, but still relying upon the HTTP specifications in some
   manner.  For example, an application might wish to avoid re-
   specifying parts of the message format, but change others; or, it
   might want to use a different set of methods.

   Such applications are referred to as _protocols based upon HTTP_ in
   this document.  These have more freedom to modify protocol operation,
   but are also likely to lose at least a portion of the benefits
   outlined above, as most HTTP implementations won't be easily
   adaptable to these changes, and as the protocol diverges from HTTP,
   the benefit of mindshare will be lost.





Nottingham              Expires October 14, 2017                [Page 3]

Internet-Draft      On the use of HTTP as a Substrate         April 2017


   Protocols that are based upon HTTP MUST NOT reuse the HTTP URL
   schemes, HTTP transport ports, or HTTP IANA registries; rather, they
   are encouraged to establish their own.

3.  Getting the Most out of HTTP

   TBD - examples, outline a sample application with best practices,
   explain the overall preferred approach.

4.  Using HTTP Protocol Elements

   This section contains best practices regarding the use of specific
   HTTP protocol elements.

4.1.  URL Schemes

   Applications that use HTTP SHOULD use the "http" and/or "https" URL
   schemes.

   Using other schemes to denote an application using HTTP makes it more
   difficult to use with existing implementations (e.g., Web browsers),
   and is likely to fail to meet the requirements of [9].

   If it is necessary to advertise the application in use, this SHOULD
   be done in message payloads, not the URL scheme.

4.2.  Transport Ports

   Applications that use HTTP SHOULD use the default port for the URL
   scheme in use.  If it is felt that networks might need to distinguish
   the application's traffic for operational reasons, it MAY register a
   separate port, but be aware that this has privacy implications for
   that protocol's users.

4.3.  HTTP URLs

   In HTTP, URLs are opaque identifiers under the control of the server.
   As outlined in [3], standards cannot usurp this space, since it might
   conflict with existing resources, and constrain implementation and
   deployment.

   In other words, applications that use HTTP MUST NOT associate
   application semantics with specific URL paths.  For example,
   specifying that a "GET to the URL /foo retrieves a bar document" is
   bad practice.  Likewise, specifying "The widget API is at the path
   /bar" violates [3].





Nottingham              Expires October 14, 2017                [Page 4]

Internet-Draft      On the use of HTTP as a Substrate         April 2017


   Instead, applications that use HTTP are encouraged to use typed links
   [15] to convey the URIs that are in use, as well as the semantics of
   the resources that they identify.

4.3.1.  Initial URL Discovery

   Generally, a client with begin interacting with a given application
   server by requesting an initial document that contains information
   about that particular deployment, potentially including links to
   other relevant resources.

   Applications that use HTTP SHOULD allow an arbitrary URL as that
   entry point.  For example, rather than specifying "the initial
   document is at "/foo/v1", they should allow a deployment to give an
   arbitrary URL as the entry point for the application.

   In cases where doing so is impractical (e.g., it is not possibly to
   convey a whole URL, but only a hostname) applications that use HTTP
   MAY define a well-known URL [16] as an entry point to their
   operation.

4.4.  HTTP Methods

   Applications that use HTTP are encouraged to use existing HTTP
   methods.

   New HTTP methods are rare; they are required to be registered with
   IETF Review (see [10]), and are also required to be _generic_. That
   means that they need to be potentially applicable to all resources,
   not just those of one application.

   While historically some applications (e.g., [17] and [18]) have
   defined non-generic methods, [11] now forbids this.

   This means that, typically, applications will use GET, POST, PUT,
   DELETE, PATCH, and other registered methods.

   When it is believed that a new method is required, authors are
   encouraged to engage with the HTTP community early, and document
   their proposal as a separate HTTP extension, rather than as part of
   an application's specification.

4.5.  HTTP Status Codes

   Applications that use HTTP are encouraged to use existing HTTP status
   codes.





Nottingham              Expires October 14, 2017                [Page 5]

Internet-Draft      On the use of HTTP as a Substrate         April 2017


   As with methods, new HTTP status codes are rare, and required (by
   [11]) to be registered with IETF review.  Similarly, HTTP status
   codes are generic; they are required (by [11]) to be potentially
   applicable to all resources, not just to those of one application.

   When it is believed that a new status code is required, authors are
   encouraged to engage with the HTTP community early, and document
   their proposal as a separate HTTP extension, rather than as part of
   an application's specification.

   Status codes' primary function is to convey HTTP semantics for the
   benefit of generic HTTP software, not application-specific semantics.
   Therefore, applications SHOULD NOT specify additional semantics or
   refine existing semantics for status codes.

   In particular, specifying that a particular status code has a
   specific meaning in the context of an application is harmful, as
   these are not generic semantics, since the consumer needs to be in
   the context of the application to understand them.

   Furthermore, applications using HTTP SHOULD NOT re-specify the
   semantics of HTTP status codes, even if it is only by copying their
   definition.

   Typically, applications using HTTP will convey application-specific
   information in the message body and/or HTTP header fields, not the
   status code.

4.6.  HTTP Header Fields

   Applications that use HTTP MAY define new HTTP header fields,
   following the advice in [4], Section 8.3.1.

5.  IANA Considerations

   This document has no requirements for IANA.

6.  Security Considerations

   TBD

7.  References

7.1.  Normative References







Nottingham              Expires October 14, 2017                [Page 6]

Internet-Draft      On the use of HTTP as a Substrate         April 2017


   [1]        Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer
              Protocol (HTTP/1.1): Message Syntax and Routing",
              RFC 7230, DOI 10.17487/RFC7230, June 2014,
              <http://www.rfc-editor.org/info/rfc7230>.

   [2]        Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <http://www.rfc-editor.org/info/rfc2119>.

   [3]        Nottingham, M., "URI Design and Ownership", BCP 190,
              RFC 7320, DOI 10.17487/RFC7320, July 2014,
              <http://www.rfc-editor.org/info/rfc7320>.

   [4]        McGrew, D. and P. Hoffman, "Cryptographic Algorithm
              Implementation Requirements and Usage Guidance for
              Encapsulating Security Payload (ESP) and Authentication
              Header (AH)", RFC 7321, DOI 10.17487/RFC7321, August 2014,
              <http://www.rfc-editor.org/info/rfc7321>.

   [5]        Flanagan, H. and S. Ginoza, "RFC Style Guide", RFC 7322,
              DOI 10.17487/RFC7322, September 2014,
              <http://www.rfc-editor.org/info/rfc7322>.

   [6]        Fielding, R., Ed., Lafon, Y., Ed., and J. Reschke, Ed.,
              "Hypertext Transfer Protocol (HTTP/1.1): Range Requests",
              RFC 7233, DOI 10.17487/RFC7233, June 2014,
              <http://www.rfc-editor.org/info/rfc7233>.

   [7]        Villamizar, C., Ed., Kompella, K., Amante, S., Malis, A.,
              and C. Pignataro, "MPLS Forwarding Compliance and
              Performance Requirements", RFC 7325, DOI 10.17487/RFC7325,
              August 2014, <http://www.rfc-editor.org/info/rfc7325>.

   [8]        Belshe, M., Peon, R., and M. Thomson, Ed., "Hypertext
              Transfer Protocol Version 2 (HTTP/2)", RFC 7540,
              DOI 10.17487/RFC7540, May 2015,
              <http://www.rfc-editor.org/info/rfc7540>.

   [9]        Thaler, D., Ed., Hansen, T., and T. Hardie, "Guidelines
              and Registration Procedures for URI Schemes", BCP 35,
              RFC 7595, DOI 10.17487/RFC7595, June 2015,
              <http://www.rfc-editor.org/info/rfc7595>.

   [10]       Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer
              Protocol (HTTP/1.1): Conditional Requests", RFC 7232,
              DOI 10.17487/RFC7232, June 2014,
              <http://www.rfc-editor.org/info/rfc7232>.



Nottingham              Expires October 14, 2017                [Page 7]

Internet-Draft      On the use of HTTP as a Substrate         April 2017


   [11]       Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer
              Protocol (HTTP/1.1): Semantics and Content", RFC 7231,
              DOI 10.17487/RFC7231, June 2014,
              <http://www.rfc-editor.org/info/rfc7231>.

7.2.  Informative References

   [12]       Postel, J. and J. Reynolds, "Telnet Protocol
              Specification", STD 8, RFC 854, DOI 10.17487/RFC0854, May
              1983, <http://www.rfc-editor.org/info/rfc854>.

   [13]       Postel, J. and J. Reynolds, "File Transfer Protocol",
              STD 9, RFC 959, DOI 10.17487/RFC0959, October 1985,
              <http://www.rfc-editor.org/info/rfc959>.

   [14]       Klensin, J., Ed., "Simple Mail Transfer Protocol",
              RFC 2821, DOI 10.17487/RFC2821, April 2001,
              <http://www.rfc-editor.org/info/rfc2821>.

   [15]       Nottingham, M., "Web Linking", RFC 5988,
              DOI 10.17487/RFC5988, October 2010,
              <http://www.rfc-editor.org/info/rfc5988>.

   [16]       Nottingham, M. and E. Hammer-Lahav, "Defining Well-Known
              Uniform Resource Identifiers (URIs)", RFC 5785,
              DOI 10.17487/RFC5785, April 2010,
              <http://www.rfc-editor.org/info/rfc5785>.

   [17]       Daboo, C., "CardDAV: vCard Extensions to Web Distributed
              Authoring and Versioning (WebDAV)", RFC 6352,
              DOI 10.17487/RFC6352, August 2011,
              <http://www.rfc-editor.org/info/rfc6352>.

   [18]       Daboo, C., Desruisseaux, B., and L. Dusseault,
              "Calendaring Extensions to WebDAV (CalDAV)", RFC 4791,
              DOI 10.17487/RFC4791, March 2007,
              <http://www.rfc-editor.org/info/rfc4791>.

Appendix A.  Getting Value out of HTTP

Author's Address

   Mark Nottingham

   Email: mnot@mnot.net
   URI:   https://www.mnot.net/





Nottingham              Expires October 14, 2017                [Page 8]
