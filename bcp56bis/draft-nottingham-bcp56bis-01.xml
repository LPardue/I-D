<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.1.2 -->

<!DOCTYPE rfc SYSTEM "../Tools/rfc2629xslt/rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc compact="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>

<rfc ipr="trust200902" docName="draft-nottingham-bcp56bis-01" category="bcp" obsoletes="3205">

  <front>
    <title>On the use of HTTP as a Substrate</title>

    <author initials="M." surname="Nottingham" fullname="Mark Nottingham">
      <organization></organization>
      <address>
        <email>mnot@mnot.net</email>
        <uri>https://www.mnot.net/</uri>
      </address>
    </author>

    <date year="2017"/>

    <area>General</area>
    
    <keyword>substrate</keyword>

    <abstract>


<t>HTTP is often used as a substrate for other application protocols. This document specifies best
practices for these protocols’ use of HTTP.</t>



    </abstract>


    <note title="Note to Readers ">


<t>The issues list for this draft can be found at <eref target="https://github.com/mnot/I-D/labels/bcp56bis">https://github.com/mnot/I-D/labels/bcp56bis</eref>.</t>

<t>The most recent (often, unpublished) draft is at <eref target="https://mnot.github.io/I-D/bcp56bis/">https://mnot.github.io/I-D/bcp56bis/</eref>.</t>

<t>Recent changes are listed at <eref target="https://github.com/mnot/I-D/commits/gh-pages/bcp56bis">https://github.com/mnot/I-D/commits/gh-pages/bcp56bis</eref>.</t>


    </note>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>HTTP <xref target="RFC7230"/> is often used as a substrate for other application protocols. This is done for a
variety of reasons, including:</t>

<t><list style="symbols">
  <t>familiarity by implementers, specifiers, administrators, developers and users,</t>
  <t>availability of a variety of client, server and proxy implementations,</t>
  <t>ease of use,</t>
  <t>ubiquity of Web browsers,</t>
  <t>reuse of existing mechanisms like authentication and encryption,</t>
  <t>presence of HTTP servers and clients in target deployments, and</t>
  <t>its ability to traverse firewalls.</t>
</list></t>

<t>The Internet community has a long tradition of protocol reuse, dating back to the use of Telnet
<xref target="RFC0854"/> as a substrate for FTP <xref target="RFC0959"/> and SMTP <xref target="RFC2821"/>. However, layering new
protocols over HTTP brings its own set of issues:</t>

<t><list style="symbols">
  <t>Should an application using HTTP define a new URL scheme? Use new ports?</t>
  <t>Should it use standard HTTP methods and status codes, or define new ones?</t>
  <t>How can the maximum value be extracted from the use of HTTP?</t>
  <t>How does it coexist with other uses of HTTP – especially Web browsing?</t>
  <t>How can interoperability problems and “protocol dead ends” be avoided?</t>
</list></t>

<t>This document contains best current practices regarding the use of HTTP by applications other than
Web browsing. <xref target="used"/> defines what applications it applies to; <xref target="overview"/> surveys the properties
of HTTP that are important to preserve, and <xref target="bp"/> conveys best practices for those applications
that do use HTTP.</t>

<t>It is written primarily to guide IETF efforts, but might be applicable in other situations. Note
that the requirements herein do not necessarily apply to the development of generic HTTP extensions.</t>

<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”,
“RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in
<xref target="RFC2119"/>.</t>

</section>
</section>
<section anchor="used" title="Is HTTP Being Used?">

<t>Different applications have different goals when using HTTP. In this document, we say an
application is <spanx style="emph">using HTTP</spanx> when any of the following conditions are true:</t>

<t><list style="symbols">
  <t>The transport port in use is 80 or 443,</t>
  <t>The URL scheme “http” or “https” is used,</t>
  <t>The ALPN protocol ID <xref target="RFC7301"/> “http/1.1”, “h2” or “h2c” is used, or</t>
  <t>The message formats described in <xref target="RFC7230"/> and/or <xref target="RFC7540"/> are used in conjunction with the IANA registries defined for HTTP.</t>
</list></t>

<t>When an application is using HTTP, all of the requirements of the HTTP protocol suite (including
but not limited to <xref target="RFC7230"/>, <xref target="RFC7231"/>, <xref target="RFC7232"/>, <xref target="RFC7233"/>, <xref target="RFC7234"/>,
<xref target="RFC7235"/> and <xref target="RFC7540"/>) are in force.</t>

<t>An application might not be <spanx style="emph">using HTTP</spanx> according to this definition, but still relying upon the
HTTP specifications in some manner. For example, an application might wish to avoid re-specifying
parts of the message format, but change others; or, it might want to use a different set of methods.</t>

<t>Such applications are referred to as <spanx style="emph">protocols based upon HTTP</spanx> in this document. These have more
freedom to modify protocol operation, but are also likely to lose at least a portion of the
benefits outlined above, as most HTTP implementations won’t be easily adaptable to these changes,
and as the protocol diverges from HTTP, the benefit of mindshare will be lost.</t>

<t>Protocols that are based upon HTTP MUST NOT reuse HTTP’s URL schemes, transport ports, ALPN
protocol IDs or IANA registries; rather, they are encouraged to establish their own.</t>

</section>
<section anchor="overview" title="What’s Important About HTTP">

<t>There are many ways that HTTP applications are defined and deployed, and sometimes they are brought
to the IETF for standardisation. In that process, what might be workable for deployment in a
limited fashion isn’t appropriate for standardisation and the corresponding broader deployment.</t>

<t>This section examines the facets of the protocol that are important to preserve in these situations.</t>

<section anchor="generic-semantics" title="Generic Semantics">

<t>When writing an application’s specification, it’s often tempting to specify exactly how HTTP is to
be implemented, supported and used.</t>

<t>However, this can easily lead to an unintended profile of HTTP’s behaviour. For example, it’s
common to see specifications with language like this:</t>

<figure><artwork><![CDATA[
A `200 OK` response means that the widget has successfully been updated.
]]></artwork></figure>

<t>This sort of specification is bad practice, because it is adding new semantics to HTTP’s status
codes and methods, respectively; a recipient – whether it’s an origin server, client library,
intermediary or cache – now has to know these extra semantics to understand the message.</t>

<t>Some applications even require specific behaviours, such as:</t>

<figure><artwork><![CDATA[
A `POST` request MUST result in a `201 Created` response.
]]></artwork></figure>

<t>This forms an expectation in the client that the response will always be <spanx style="verb">201 Created</spanx>, when in
fact there are a number of reasons why the status code might differ in a real deployment. If the
client does not anticipate this, the application’s deployment is brittle.</t>

<t>Much of the value of HTTP is in its <spanx style="emph">generic semantics</spanx> – that is, the protocol elements defined
by HTTP are potentially applicable to every resource, not specific to a particular context.
Application-specific semantics are expressed in the payload; mostly, in the body, but also in
header fields.</t>

<t>This allows a HTTP message to be examined by generic HTTP software (e.g., HTTP servers,
intermediaries, client implementatiions), and its handling to be correctly determined. It also
allows people to leverage their knowledge of HTTP semantics without special-casing them for a
particular application.</t>

<t>Therefore, applications that use HTTP MUST NOT re-define, refine or overlay the semantics of
defined protocol elements. Instead, they SHOULD focus their specifications on protocol elements
that are specific to them; namely their HTTP resources.</t>

<t>See <xref target="resource"/> for details.</t>

</section>
<section anchor="links" title="Links">

<t>Another common practice is assuming that the HTTP server’s name space (or a portion thereof) is
exclusively for the use of a single application. This effectively overlays special,
application-specific semantics onto that space, precludes other applications from using it.</t>

<t>As explained in <xref target="RFC7320"/>, such “squatting” on a part of the URL space by a standard usurps the
server’s authority over its own resources, can cause deployment issues, and is therefore bad
practice in standards.</t>

<t>Instead of statically defining URL paths, it is RECOMMENDED that applications using HTTP define
links in payloads, to allow flexibility in deployment.</t>

<t>Using runtime links in this fashion has a number of other benefits. For example, navigating with a
link allows a request to be routed to a different server without the overhead of a redirection,
thereby supporting deployment across machines well. It becomes possible to “mix” different
applications on the same server, and offers a natural path for extensibility, versioning and
capability management.</t>

</section>
<section anchor="getting-value-from-http" title="Getting Value from HTTP">

<t>The simplest possible use of HTTP is to POST data to a single URL, thereby effectively tunnelling
through the protocol.</t>

<t>This “RPC” style of communication does get some benefit from using HTTP – namely, message framing and the availability of implementations – but fails to realise many others:</t>

<t><list style="symbols">
  <t>Caching for server scalability, latency and bandwidth reduction, and reliability;</t>
  <t>Authentication and access control;</t>
  <t>Automatic redirection;</t>
  <t>Partial content to selectively request part of a response;</t>
  <t>Natural support for extensions and versioning through protocol extension; and</t>
  <t>The ability to interact with the application easily using a Web browser.</t>
</list></t>

<t>Using such a high-level protocol to tunnel simple semantics has downsides too; because of its more
advanced capabilities, breadth of deployment and age, HTTP’s complexity can cause interoperability
problems that could be avoided by using a simpler substrate (e.g., WebSockets <xref target="RFC6455"/>, if
browser support is necessary, or TCP <xref target="RFC0793"/> if not), or making the application be <spanx style="emph">based upon
HTTP</spanx>, instead of using it (as defined in <xref target="used"/>).</t>

<t>Applications that use HTTP are encouraged to accommodate the various features that the protocol
offers, so that their users receive the maximum benefit from it. This document does not require
specific features to be used, since the appropriate design tradeoffs are highly specific to a given
situation. However, following the practices in <xref target="bp"/> will help make them available.</t>

</section>
</section>
<section anchor="bp" title="Best Practices for Using HTTP">

<t>This section contains best practices regarding the use of HTTP by applications, including practices
for specific HTTP protocol elements.</t>

<section anchor="specifying-the-use-of-http" title="Specifying the Use of HTTP">

<t>When specifying the use of HTTP, an application SHOULD use <xref target="RFC7230"/> as the primary reference;
it is not necessary to reference all of the specifications in the HTTP suite unless there are
specific reasons to do so (e.g., a particular feature is called out).</t>

<t>Applications using HTTP MAY specify a minimum version to be supported (HTTP/1.1 is suggested), and
MUST NOT specify a maximum version.</t>

<t>Likewise, applications need not specify what HTTP mechanisms – such as redirection, caching,
authentication, proxy authentication, and so on – are to be supported. Full featured support for
HTTP SHOULD be taken for granted in servers and clients, and the application’s function SHOULD
degrade gracefully if they are not (although this might be achieved by informing the user that
their task cannot be completed).</t>

<t>For example, an application can specify that it uses HTTP like this:</t>

<figure><artwork><![CDATA[
Foo Application uses HTTP {{RFC7230}}. Implementations MUST support 
HTTP/1.1, and MAY support later versions. Support for common HTTP 
mechanisms such as redirection and caching are assumed.
]]></artwork></figure>

</section>
<section anchor="resource" title="Defining HTTP Resources">

<t>HTTP Applications SHOULD focus on defining the following application-specific protocol elements:</t>

<t><list style="symbols">
  <t>Media types <xref target="RFC6838"/>, often based upon a format convention such as JSON <xref target="RFC7159"/>,</t>
  <t>HTTP header fields, as per <xref target="headers"/>, and</t>
  <t>The behaviour of resources, as identified by link relations <xref target="RFC5988"/>.</t>
</list></t>

<t>By composing these protocol elements, an application can define a set of resources, identified by
link relations, that implement specified behaviours, including:</t>

<t><list style="symbols">
  <t>Retrieval of their state using GET, in one or more formats identified by media type;</t>
  <t>Resource creation or update using POST or PUT, with an appropriately identified request body format;</t>
  <t>Data processing using POST and identified request and response body format(s); and</t>
  <t>Resource deletion using DELETE.</t>
</list></t>

<t>For example, an application might specify:</t>

<figure><artwork><![CDATA[
Resources linked to with the "example-widget" link relation type are
Widgets. The state of a Widget can be fetched in the
"application/example-widget+json" format, and can be updated by PUT
to the same link. Widget resources can be deleted.

The "Example-Count" response header field on Widget representations
indicates how many Widgets are held by the sender.

The "application/example-widget+json" format is a JSON {{RFC7159}}
format representing the state of a Widget. It contains links to
related information in the link indicated by the Link header field
value with the "example-other-info" link relation type.
]]></artwork></figure>

</section>
<section anchor="http-urls" title="HTTP URLs">

<t>In HTTP, URLs are opaque identifiers under the control of the server. As outlined in <xref target="RFC7320"/>,
standards cannot usurp this space, since it might conflict with existing resources, and constrain
implementation and deployment.</t>

<t>In other words, applications that use HTTP MUST NOT associate application semantics with specific
URL paths. For example, specifying that a “GET to the URL /foo retrieves a bar document” is bad
practice. Likewise, specifying “The widget API is at the path /bar” violates <xref target="RFC7320"/>.</t>

<t>Instead, applications that use HTTP are encouraged to use typed links <xref target="RFC5988"/> to convey the
URIs that are in use, as well as the semantics of the resources that they identify. See
<xref target="resource"/> for details.</t>

<section anchor="initial-url-discovery" title="Initial URL Discovery">

<t>Generally, a client with begin interacting with a given application server by requesting an initial
document that contains information about that particular deployment, potentially including links to
other relevant resources.</t>

<t>Applications that use HTTP SHOULD allow an arbitrary URL to be used as that entry point. For
example, rather than specifying “the initial document is at “/foo/v1”, they should allow a
deployment to use any URL as the entry point for the application.</t>

<t>In cases where doing so is impractical (e.g., it is not possible to convey a whole URL, but only a
hostname) applications that use HTTP MAY define a well-known URL <xref target="RFC5785"/> as an entry point.</t>

</section>
<section anchor="scheme" title="URL Schemes">

<t>Applications that use HTTP MUST allow use of the “https” URL scheme, and SHOULD NOT allow use of
the “http” URL scheme, unless interoperability considerations with existing deployments require it.
They MUST NOT use other URL schemes.</t>

<t>“https” is preferred to mitigate pervasive monitoring attacks <xref target="RFC7258"/>.</t>

<t>Using other schemes to denote an application using HTTP makes it more difficult to use with
existing implementations (e.g., Web browsers), and is likely to fail to meet the requirements of
<xref target="RFC7595"/>.</t>

<t>If it is necessary to advertise the application in use, this SHOULD be done in message payloads,
not the URL scheme.</t>

</section>
<section anchor="transport-ports" title="Transport Ports">

<t>Applications that use HTTP SHOULD use the default port for the URL scheme in use. If it is felt
that networks might need to distinguish the application’s traffic for operational reasons, it MAY
register a separate port, but be aware that this has privacy implications for that protocol’s
users. The impact of doing so MUST be documented in Security Considerations.</t>

</section>
</section>
<section anchor="state" title="Authentication and Application State">

<t>Applications that use HTTP MAY use stateful cookies <xref target="RFC6265"/> to identify a client and/or store
client-specific data to contextualise requests.</t>

<t>If it is only necessary to identify clients, applications that use HTTP MAY use HTTP authentication
<xref target="RFC7235"/>; if the Basic authentication scheme <xref target="RFC7617"/> is used, it MUST NOT be used with the
‘http’ URL scheme.</t>

<t>In either case, it is important to carefully specify the scoping and use of these mechanisms; if
they expose sensitive data or capabilities (e.g., by acting as an ambiant authority), exploits are
possible. Mitigations include using a request-specific token to assure the intent of the client.</t>

</section>
<section anchor="http-methods" title="HTTP Methods">

<t>Applications that use HTTP MUST confine themselves to using registered HTTP methods such as GET,
POST, PUT, DELETE, and PATCH.</t>

<t>New HTTP methods are rare; they are required to be registered with IETF Review (see <xref target="RFC7232"/>),
and are also required to be <spanx style="emph">generic</spanx>. That means that they need to be potentially applicable to
all resources, not just those of one application.</t>

<t>While historically some applications (e.g., <xref target="RFC6352"/> and <xref target="RFC4791"/>) have defined non-generic
methods, <xref target="RFC7231"/> now forbids this.</t>

<t>When it is believed that a new method is required, authors are encouraged to engage with the HTTP
community early, and document their proposal as a separate HTTP extension, rather than as part of
an application’s specification.</t>

</section>
<section anchor="http-status-codes" title="HTTP Status Codes">

<t>Applications that use HTTP MUST only use registered HTTP status codes.</t>

<t>As with methods, new HTTP status codes are rare, and required (by <xref target="RFC7231"/>) to be registered
with IETF review. Similarly, HTTP status codes are generic; they are required (by <xref target="RFC7231"/>) to
be potentially applicable to all resources, not just to those of one application.</t>

<t>When it is believed that a new status code is required, authors are encouraged to engage with the
HTTP community early, and document their proposal as a separate HTTP extension, rather than as part
of an application’s specification.</t>

<t>Status codes’ primary function is to convey HTTP semantics for the benefit of generic HTTP
software, not application-specific semantics. Therefore, applications MUST NOT specify additional
semantics or refine existing semantics for status codes.</t>

<t>In particular, specifying that a particular status code has a specific meaning in the context of an
application is harmful, as these are not generic semantics, since the consumer needs to be in the
context of the application to understand them.</t>

<t>Furthermore, applications using HTTP MUST NOT re-specify the semantics of HTTP status codes, even
if it is only by copying their definition. They MUST NOT require specific status phrases to be
used; the status phrase has no function in HTTP, and is not guaranteed to be preserved by
implementations.</t>

<t>Typically, applications using HTTP will convey application-specific information in the message body
and/or HTTP header fields, not the status code.</t>

<t>Specifications sometimes also create a “laundry list” of potential status codes, in an effort to be
helpful. The problem with doing so is that such a list is never complete; for example, if a network
proxy is interposed, the client might encounter a <spanx style="verb">407 Proxy Authentication Required</spanx> response; or,
if the server is rate limiting the client, it might receive a <spanx style="verb">429 Too Many Requests</spanx> response.</t>

<t>Since the list of HTTP status codes can be added to, it’s safer to refer to it directly, and point
out that clients SHOULD be able to handle all applicable protocol elements gracefully (i.e.,
falling back to the generic <spanx style="verb">n00</spanx> semantics of a given status code; e.g., <spanx style="verb">499</spanx> can be safely
handled as <spanx style="verb">400</spanx> by clients that don’t recognise it).</t>

</section>
<section anchor="headers" title="HTTP Header Fields">

<t>Applications that use HTTP MAY define new HTTP header fields, following the advice in <xref target="RFC7231"/>,
Section 8.3.1.</t>

<t>Typically, using HTTP header fields is appropriate in a few different situations:</t>

<t><list style="symbols">
  <t>Their content is useful to intermediaries (who often wish to avoid parsing the body), and/or</t>
  <t>Their content is useful to generic HTTP software (e.g., clients, servers), and/or</t>
  <t>It is not possible to include their content in the message body (usually because a format does not allow it).</t>
</list></t>

<t>If none of these motivations apply, using a header field is NOT RECOMMENDED.</t>

<t>New header fields MUST be registered, as per <xref target="RFC7231"/> and <xref target="RFC3864"/>.</t>

<t>It is RECOMMENDED that header field names be short (even when HTTP/2 header compression is in
effect, there is an overhead) but appropriately specific. In particular, if a header field is
specific to an application, an identifier for that application SHOULD form a prefix to the header
field name, separated by a “-“.</t>

<t>The semantics of existing HTTP header fields MUST NOT be re-defined without updating their
registration or defining an extension to them (if allowed). For example, an application using HTTP
cannot specify that the <spanx style="verb">Location</spanx> header has a special meaning in a certain context.</t>

<t>See <xref target="state"/> for requirements regarding header fields that carry application state (e.g,. Cookie).</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document has no requirements for IANA.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t><xref target="state"/> discusses the impact of using stateful mechanisms in the protocol as ambiant authority,
and suggests a mitigation.</t>

<t><xref target="scheme"/> requires support for ‘https’ URLs, and discourages the use of ‘http’ URLs, to mitigate
pervasive monitoring attacks.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC7230" target='http://www.rfc-editor.org/info/rfc7230'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7230'/>
<seriesInfo name='DOI' value='10.17487/RFC7230'/>
</reference>



<reference  anchor="RFC2119" target='http://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC7301" target='http://www.rfc-editor.org/info/rfc7301'>
<front>
<title>Transport Layer Security (TLS) Application-Layer Protocol Negotiation Extension</title>
<author initials='S.' surname='Friedl' fullname='S. Friedl'><organization /></author>
<author initials='A.' surname='Popov' fullname='A. Popov'><organization /></author>
<author initials='A.' surname='Langley' fullname='A. Langley'><organization /></author>
<author initials='E.' surname='Stephan' fullname='E. Stephan'><organization /></author>
<date year='2014' month='July' />
<abstract><t>This document describes a Transport Layer Security (TLS) extension for application-layer protocol negotiation within the TLS handshake. For instances in which multiple application protocols are supported on the same TCP or UDP port, this extension allows the application layer to negotiate which protocol will be used within the TLS connection.</t></abstract>
</front>
<seriesInfo name='RFC' value='7301'/>
<seriesInfo name='DOI' value='10.17487/RFC7301'/>
</reference>



<reference  anchor="RFC7231" target='http://www.rfc-editor.org/info/rfc7231'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines the semantics of HTTP/1.1 messages, as expressed by request methods, request header fields, response status codes, and response header fields, along with the payload of messages (metadata and body content) and mechanisms for content negotiation.</t></abstract>
</front>
<seriesInfo name='RFC' value='7231'/>
<seriesInfo name='DOI' value='10.17487/RFC7231'/>
</reference>



<reference  anchor="RFC7232" target='http://www.rfc-editor.org/info/rfc7232'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Conditional Requests</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application- level protocol for distributed, collaborative, hypertext information systems.  This document defines HTTP/1.1 conditional requests, including metadata header fields for indicating state changes, request header fields for making preconditions on such state, and rules for constructing the responses to a conditional request when one or more preconditions evaluate to false.</t></abstract>
</front>
<seriesInfo name='RFC' value='7232'/>
<seriesInfo name='DOI' value='10.17487/RFC7232'/>
</reference>



<reference  anchor="RFC7233" target='http://www.rfc-editor.org/info/rfc7233'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Range Requests</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='Y.' surname='Lafon' fullname='Y. Lafon' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application- level protocol for distributed, collaborative, hypertext information systems.  This document defines range requests and the rules for constructing and combining responses to those requests.</t></abstract>
</front>
<seriesInfo name='RFC' value='7233'/>
<seriesInfo name='DOI' value='10.17487/RFC7233'/>
</reference>



<reference  anchor="RFC7234" target='http://www.rfc-editor.org/info/rfc7234'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Caching</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines HTTP caches and the associated header fields that control cache behavior or indicate cacheable response messages.</t></abstract>
</front>
<seriesInfo name='RFC' value='7234'/>
<seriesInfo name='DOI' value='10.17487/RFC7234'/>
</reference>



<reference  anchor="RFC7235" target='http://www.rfc-editor.org/info/rfc7235'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Authentication</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application- level protocol for distributed, collaborative, hypermedia information systems.  This document defines the HTTP Authentication framework.</t></abstract>
</front>
<seriesInfo name='RFC' value='7235'/>
<seriesInfo name='DOI' value='10.17487/RFC7235'/>
</reference>



<reference  anchor="RFC7540" target='http://www.rfc-editor.org/info/rfc7540'>
<front>
<title>Hypertext Transfer Protocol Version 2 (HTTP/2)</title>
<author initials='M.' surname='Belshe' fullname='M. Belshe'><organization /></author>
<author initials='R.' surname='Peon' fullname='R. Peon'><organization /></author>
<author initials='M.' surname='Thomson' fullname='M. Thomson' role='editor'><organization /></author>
<date year='2015' month='May' />
<abstract><t>This specification describes an optimized expression of the semantics of the Hypertext Transfer Protocol (HTTP), referred to as HTTP version 2 (HTTP/2).  HTTP/2 enables a more efficient use of network resources and a reduced perception of latency by introducing header field compression and allowing multiple concurrent exchanges on the same connection.  It also introduces unsolicited push of representations from servers to clients.</t><t>This specification is an alternative to, but does not obsolete, the HTTP/1.1 message syntax.  HTTP's existing semantics remain unchanged.</t></abstract>
</front>
<seriesInfo name='RFC' value='7540'/>
<seriesInfo name='DOI' value='10.17487/RFC7540'/>
</reference>



<reference  anchor="RFC7320" target='http://www.rfc-editor.org/info/rfc7320'>
<front>
<title>URI Design and Ownership</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<date year='2014' month='July' />
<abstract><t>Section 1.1.1 of RFC 3986 defines URI syntax as &quot;a federated and extensible naming system wherein each scheme's specification may further restrict the syntax and semantics of identifiers using that scheme.&quot;  In other words, the structure of a URI is defined by its scheme.  While it is common for schemes to further delegate their substructure to the URI's owner, publishing independent standards that mandate particular forms of URI substructure is inappropriate, because that essentially usurps ownership.  This document further describes this problematic practice and provides some acceptable alternatives for use in standards.</t></abstract>
</front>
<seriesInfo name='BCP' value='190'/>
<seriesInfo name='RFC' value='7320'/>
<seriesInfo name='DOI' value='10.17487/RFC7320'/>
</reference>



<reference  anchor="RFC6838" target='http://www.rfc-editor.org/info/rfc6838'>
<front>
<title>Media Type Specifications and Registration Procedures</title>
<author initials='N.' surname='Freed' fullname='N. Freed'><organization /></author>
<author initials='J.' surname='Klensin' fullname='J. Klensin'><organization /></author>
<author initials='T.' surname='Hansen' fullname='T. Hansen'><organization /></author>
<date year='2013' month='January' />
<abstract><t>This document defines procedures for the specification and registration of media types for use in HTTP, MIME, and other Internet protocols.  This memo documents an Internet Best Current Practice.</t></abstract>
</front>
<seriesInfo name='BCP' value='13'/>
<seriesInfo name='RFC' value='6838'/>
<seriesInfo name='DOI' value='10.17487/RFC6838'/>
</reference>



<reference  anchor="RFC5988" target='http://www.rfc-editor.org/info/rfc5988'>
<front>
<title>Web Linking</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<date year='2010' month='October' />
<abstract><t>This document specifies relation types for Web links, and defines a registry for them.  It also defines the use of such links in HTTP headers with the Link header field.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5988'/>
<seriesInfo name='DOI' value='10.17487/RFC5988'/>
</reference>



<reference  anchor="RFC7595" target='http://www.rfc-editor.org/info/rfc7595'>
<front>
<title>Guidelines and Registration Procedures for URI Schemes</title>
<author initials='D.' surname='Thaler' fullname='D. Thaler' role='editor'><organization /></author>
<author initials='T.' surname='Hansen' fullname='T. Hansen'><organization /></author>
<author initials='T.' surname='Hardie' fullname='T. Hardie'><organization /></author>
<date year='2015' month='June' />
<abstract><t>This document updates the guidelines and recommendations, as well as the IANA registration processes, for the definition of Uniform Resource Identifier (URI) schemes.  It obsoletes RFC 4395.</t></abstract>
</front>
<seriesInfo name='BCP' value='35'/>
<seriesInfo name='RFC' value='7595'/>
<seriesInfo name='DOI' value='10.17487/RFC7595'/>
</reference>



<reference  anchor="RFC3864" target='http://www.rfc-editor.org/info/rfc3864'>
<front>
<title>Registration Procedures for Message Header Fields</title>
<author initials='G.' surname='Klyne' fullname='G. Klyne'><organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<author initials='J.' surname='Mogul' fullname='J. Mogul'><organization /></author>
<date year='2004' month='September' />
<abstract><t>This specification defines registration procedures for the message header fields used by Internet mail, HTTP, Netnews and other applications.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='90'/>
<seriesInfo name='RFC' value='3864'/>
<seriesInfo name='DOI' value='10.17487/RFC3864'/>
</reference>




    </references>

    <references title='Informative References'>





<reference  anchor="RFC0854" target='http://www.rfc-editor.org/info/rfc854'>
<front>
<title>Telnet Protocol Specification</title>
<author initials='J.' surname='Postel' fullname='J. Postel'><organization /></author>
<author initials='J.K.' surname='Reynolds' fullname='J.K. Reynolds'><organization /></author>
<date year='1983' month='May' />
<abstract><t>This is the specification of the Telnet protocol used for remote    terminal access in the ARPA Internet.  The purpose of the TELNET    Protocol is to provide a fairly general, bi-directional, eight-bit    byte oriented communications facility.  Its primary goal is to allow    a standard method of interfacing terminal devices and    terminal-oriented processes to each other.  It is envisioned that the    protocol may also be used for terminal-terminal communication    (&quot;linking&quot;) and process-process communication (distributed    computation).   This RFC specifies a standard for the ARPA Internet    community.  Hosts on the ARPA Internet are expected to adopt and    implement this standard.  Obsoletes NIC 18639.</t></abstract>
</front>
<seriesInfo name='STD' value='8'/>
<seriesInfo name='RFC' value='854'/>
<seriesInfo name='DOI' value='10.17487/RFC0854'/>
</reference>



<reference  anchor="RFC0959" target='http://www.rfc-editor.org/info/rfc959'>
<front>
<title>File Transfer Protocol</title>
<author initials='J.' surname='Postel' fullname='J. Postel'><organization /></author>
<author initials='J.' surname='Reynolds' fullname='J. Reynolds'><organization /></author>
<date year='1985' month='October' />
<abstract><t>This memo is the official specification of the File Transfer Protocol    (FTP) for the DARPA Internet community.  The primary intent is to    clarify and correct the documentation of the FTP specification, not to    change the protocol.  The following new optional commands are included    in this edition of the specification:  Change to Parent Directory    (CDUP), Structure Mount (SMNT), Store Unique (STOU), Remove Directory    (RMD), Make Directory (MKD), Print Directory (PWD), and System (SYST).    Note that this specification is compatible with the previous edition.</t></abstract>
</front>
<seriesInfo name='STD' value='9'/>
<seriesInfo name='RFC' value='959'/>
<seriesInfo name='DOI' value='10.17487/RFC0959'/>
</reference>



<reference  anchor="RFC2821" target='http://www.rfc-editor.org/info/rfc2821'>
<front>
<title>Simple Mail Transfer Protocol</title>
<author initials='J.' surname='Klensin' fullname='J. Klensin' role='editor'><organization /></author>
<date year='2001' month='April' />
<abstract><t>This document is a self-contained specification of the basic protocol for the Internet electronic mail transport.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='2821'/>
<seriesInfo name='DOI' value='10.17487/RFC2821'/>
</reference>



<reference  anchor="RFC6455" target='http://www.rfc-editor.org/info/rfc6455'>
<front>
<title>The WebSocket Protocol</title>
<author initials='I.' surname='Fette' fullname='I. Fette'><organization /></author>
<author initials='A.' surname='Melnikov' fullname='A. Melnikov'><organization /></author>
<date year='2011' month='December' />
<abstract><t>The WebSocket Protocol enables two-way communication between a client running untrusted code in a controlled environment to a remote host that has opted-in to communications from that code.  The security model used for this is the origin-based security model commonly used by web browsers.  The protocol consists of an opening handshake followed by basic message framing, layered over TCP.  The goal of this technology is to provide a mechanism for browser-based applications that need two-way communication with servers that does not rely on opening multiple HTTP connections (e.g., using XMLHttpRequest or &lt;iframe&gt;s and long polling).  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6455'/>
<seriesInfo name='DOI' value='10.17487/RFC6455'/>
</reference>



<reference  anchor="RFC0793" target='http://www.rfc-editor.org/info/rfc793'>
<front>
<title>Transmission Control Protocol</title>
<author initials='J.' surname='Postel' fullname='J. Postel'><organization /></author>
<date year='1981' month='September' />
</front>
<seriesInfo name='STD' value='7'/>
<seriesInfo name='RFC' value='793'/>
<seriesInfo name='DOI' value='10.17487/RFC0793'/>
</reference>



<reference  anchor="RFC7159" target='http://www.rfc-editor.org/info/rfc7159'>
<front>
<title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
<author initials='T.' surname='Bray' fullname='T. Bray' role='editor'><organization /></author>
<date year='2014' month='March' />
<abstract><t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t><t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t></abstract>
</front>
<seriesInfo name='RFC' value='7159'/>
<seriesInfo name='DOI' value='10.17487/RFC7159'/>
</reference>



<reference  anchor="RFC5785" target='http://www.rfc-editor.org/info/rfc5785'>
<front>
<title>Defining Well-Known Uniform Resource Identifiers (URIs)</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<author initials='E.' surname='Hammer-Lahav' fullname='E. Hammer-Lahav'><organization /></author>
<date year='2010' month='April' />
<abstract><t>This memo defines a path prefix for &quot;well-known locations&quot;, &quot;/.well-known/&quot;, in selected Uniform Resource Identifier (URI) schemes.   [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5785'/>
<seriesInfo name='DOI' value='10.17487/RFC5785'/>
</reference>



<reference  anchor="RFC7258" target='http://www.rfc-editor.org/info/rfc7258'>
<front>
<title>Pervasive Monitoring Is an Attack</title>
<author initials='S.' surname='Farrell' fullname='S. Farrell'><organization /></author>
<author initials='H.' surname='Tschofenig' fullname='H. Tschofenig'><organization /></author>
<date year='2014' month='May' />
<abstract><t>Pervasive monitoring is a technical attack that should be mitigated in the design of IETF protocols, where possible.</t></abstract>
</front>
<seriesInfo name='BCP' value='188'/>
<seriesInfo name='RFC' value='7258'/>
<seriesInfo name='DOI' value='10.17487/RFC7258'/>
</reference>



<reference  anchor="RFC6265" target='http://www.rfc-editor.org/info/rfc6265'>
<front>
<title>HTTP State Management Mechanism</title>
<author initials='A.' surname='Barth' fullname='A. Barth'><organization /></author>
<date year='2011' month='April' />
<abstract><t>This document defines the HTTP Cookie and Set-Cookie header fields. These header fields can be used by HTTP servers to store state (called cookies) at HTTP user agents, letting the servers maintain a stateful session over the mostly stateless HTTP protocol.  Although cookies have many historical infelicities that degrade their security and privacy, the Cookie and Set-Cookie header fields are widely used on the Internet.  This document obsoletes RFC 2965.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6265'/>
<seriesInfo name='DOI' value='10.17487/RFC6265'/>
</reference>



<reference  anchor="RFC7617" target='http://www.rfc-editor.org/info/rfc7617'>
<front>
<title>The 'Basic' HTTP Authentication Scheme</title>
<author initials='J.' surname='Reschke' fullname='J. Reschke'><organization /></author>
<date year='2015' month='September' />
<abstract><t>This document defines the &quot;Basic&quot; Hypertext Transfer Protocol (HTTP) authentication scheme, which transmits credentials as user-id/ password pairs, encoded using Base64.</t></abstract>
</front>
<seriesInfo name='RFC' value='7617'/>
<seriesInfo name='DOI' value='10.17487/RFC7617'/>
</reference>



<reference  anchor="RFC6352" target='http://www.rfc-editor.org/info/rfc6352'>
<front>
<title>CardDAV: vCard Extensions to Web Distributed Authoring and Versioning (WebDAV)</title>
<author initials='C.' surname='Daboo' fullname='C. Daboo'><organization /></author>
<date year='2011' month='August' />
<abstract><t>This document defines extensions to the Web Distributed Authoring and Versioning (WebDAV) protocol to specify a standard way of accessing, managing, and sharing contact information based on the vCard format.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6352'/>
<seriesInfo name='DOI' value='10.17487/RFC6352'/>
</reference>



<reference  anchor="RFC4791" target='http://www.rfc-editor.org/info/rfc4791'>
<front>
<title>Calendaring Extensions to WebDAV (CalDAV)</title>
<author initials='C.' surname='Daboo' fullname='C. Daboo'><organization /></author>
<author initials='B.' surname='Desruisseaux' fullname='B. Desruisseaux'><organization /></author>
<author initials='L.' surname='Dusseault' fullname='L. Dusseault'><organization /></author>
<date year='2007' month='March' />
<abstract><t>This document defines extensions to the Web Distributed Authoring and Versioning (WebDAV) protocol to specify a standard way of accessing, managing, and sharing calendaring and scheduling information based on the iCalendar format.  This document defines the &quot;calendar-access&quot; feature of CalDAV.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4791'/>
<seriesInfo name='DOI' value='10.17487/RFC4791'/>
</reference>




    </references>


<section anchor="changes-from-rfc3205" title="Changes from RFC3205">

<t>RFC3205 captured the Best Current Practice in the early 2000’s, based on the concerns facing
protocol designers at the time. Use of HTTP has changed considerably since then, and as a result
this document is substantially different. As a result, the changes are too numerous to list
individually.</t>

</section>


  </back>

<!-- ##markdown-source:
H4sIACtRGlkAA7Vca3PbyHL9Pr8C4X6wdUNRsmytbSmVjdb23lXihyLJ2Uql
UvYQGJK4BgFeDCCZce1/T5/unsGA0sq3biX7wSuS4Dy6e06ffgz39/dNV3aV
O8k+1Fm3clnvXdYssl+vry8y6zObXfVz37W2c6Zo8tqu6dGitYtuv266rqyX
K7ven+eb4x/npd8/fGIKevQkOzp88tzk9OeyabcnGT1gmrlvKtc5f5I9PTo8
NqbctCdZ1/a+Ozo8fHl4ZGzr7En2Z1e71lbmtmm/LNum35yYL25Lr4qT7Lzu
XFu7bv81ljC8j+UOr35z8+GFj+s3vrN18clWTU0r3DpvNuVJ9l9dk08z+qes
C1d308w3bde6hae/tmv9o2vLnD7Km/XG6h9repg+KuuqrN1/G2P7btW0Jybb
Nxn9V9a0z3ez7H2UEr8tAnxn2y+7nzTt0tbl/9iubOoTfsetbVmdZGsS9L/g
nxltnD/oW1r3qus2/uTg4Pb2dhY+PTDG7O/vZ5a3nHfGsB5LTyrtXA3lFqLV
KJVs0bRZQ5pvM7vZVGXOC8g2bUMiaSo/y65X9H3SfY8dZ37j8nJROp/Nne/M
BtOUOb3EODQMmU/87qPUmma6Nlqq+/Qe/3TNp0tnC9f6T8Zck+2V3vc0UlX6
TofDzNB0ltuaJqR3+5p20GX/FLa/LLtVP5+RQg4ghYPz/dcHlZ27yh8Eq/zn
mQy/bmjc1uXYxmMWyDTr600/pwlXrtjTqWjOdAKWrc5SNjx+GPgAI1/KgPnK
1ktaPNkwb8B9f5kworLzB8vV/sbSd0cLZlmty6KoyHB/gOG3TdHnUI5q9du3
f7j85dXzo6eHv//+f6Fi1nItT1tzY9vSdVtoj06lb2q29bzqC7LZE2P+lC3s
uqxKeoyemm+zcr2pHEyE9DmNZoK/bbEu65LX0uB14W5c1Wzos4zOI1ZM79KA
9obs3c5pUJnXZski8qqU0+naG2yEvkgb+JrMy7vigWi9bHY0Ml728/KvvY5J
0JDN2+Y2zNk6NVH3lVZIW8vWDqos/RqG+MVlONc0epAaJnZ13m43eIkhNi0Z
fZ0PsClLlM3Jskm4hK62XbqOdr+pmq2iBz1CI5ARZGHfXUOQaPF90kTZultb
kYbEgAP6Mfz0NR5fsaoJ0Zb4WlHyGmkhQbmyQZK55c3Nbf6FpxiQ/tpVwJVv
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
+78aFaIG7U8AAA==

-->

</rfc>

