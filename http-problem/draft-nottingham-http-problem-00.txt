


Network Working Group                                      M. Nottingham
Internet-Draft                                                 Rackspace
Intended status: Informational                               May 3, 2012
Expires: November 4, 2012


                Indicating Problems to Machines in HTTP
                    draft-nottingham-http-problem-00

Abstract

   This specification proposes a "HTTP Problem" as an extensible way to
   carry machine-readable details of errors in a response, to avoid the
   need to invent new status codes and/or response formats for non-human
   consumers.

Status of this Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on November 4, 2012.

Copyright Notice

   Copyright (c) 2012 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.




Nottingham              Expires November 4, 2012                [Page 1]

Internet-Draft                HTTP Problems                     May 2012


Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . . . 3
   2.  Requirements  . . . . . . . . . . . . . . . . . . . . . . . . . 3
   3.  The HTTP Problem JSON Object  . . . . . . . . . . . . . . . . . 3
   4.  Expressing Problems with Link Headers . . . . . . . . . . . . . 4
   5.  Defining New HTTP Problems  . . . . . . . . . . . . . . . . . . 5
   6.  Generating Problems . . . . . . . . . . . . . . . . . . . . . . 6
   7.  Consuming Problems  . . . . . . . . . . . . . . . . . . . . . . 7
   8.  Security Considerations . . . . . . . . . . . . . . . . . . . . 7
   9.  IANA Considerations . . . . . . . . . . . . . . . . . . . . . . 7
   10. Normative References  . . . . . . . . . . . . . . . . . . . . . 8
   Appendix A.  Non-Normative JSON Schema  . . . . . . . . . . . . . . 8
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . . . . 9





































Nottingham              Expires November 4, 2012                [Page 2]

Internet-Draft                HTTP Problems                     May 2012


1.  Introduction

   While HTTP [RFC2616] defines the status code as the primary indicator
   of response semantics, it is often not fine-grained enough to convey
   error semantics to non-human clients.

   This specification proposes a "HTTP Problem" as an extensible way to
   carry machine-readable details of errors in a response, to avoid the
   need to invent new status codes and/or response formats for non-human
   consumers.

   HTTP problems have:
   o  A generic status, identified and solely conveyed by the HTTP
      status code <http://www.iana.org/assignments/http-status-codes/>.
      For example, "403 Forbidden".
   o  An problem type that refines the status code semantics, identified
      by an absolute URI [RFC3986] and paired with a summary title.
   o  Optionally, detail that is specific to an instance of the problem.

   This specification defines a common data model for HTTP Problems as a
   JSON [RFC4627] object.  That object can be serialised as an
   "application/json-problem" HTTP response, or it can be conveyed using
   a Link HTTP response header field [RFC5988].

   Future work may include defining a HTML Microformat
   <http://microformats.org/> that allows this information to be carried
   in an HTML document as well.


2.  Requirements

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [RFC2119].


3.  The HTTP Problem JSON Object

   The canonical format for a HTTP problem is a JSON [RFC4627] document,
   identified with the "application/json-problem" media type.  Its root
   object has the following properties:

   o  "describedBy" (string) - A URL that identifies the type of
      problem.  When dereferenced, it SHOULD provide human-readable
      documentation (e.g., using HTML).
   o  "title" (string) - A short, human-readable summary of the problem.
      It SHOULD NOT change from instance to instance of the problem,
      except for purposes of localisation.



Nottingham              Expires November 4, 2012                [Page 3]

Internet-Draft                HTTP Problems                     May 2012


   o  "detail" (string) - Optionally, additional, human readable detail
      specific to this instance of the problem.

   HTTP problems, when serialised as JSON objects, MUST include the
   "describedBy" and "title" properties.  The "detail" property is
   always OPTIONAL.

   Problem types MAY extend their instances with additional properties.
   For example:

      HTTP/1.1 403 Forbidden
      Content-Type: application/json-problem
      Content-Language: en

      {
        "describedBy": "http://example.com/probs/out-of-credit",
        "title": "You do not have enough credits.",
        "detail": "Your current balance is 30, but that costs 50.",
        "balance": 30,
        "account": "http://api.example.com/account/12345"
      }

   Here, the out-of-credit problem (identified by its URI) indicates the
   reason for the 403 in "title", gives instance-specific details in
   "detail", and adds two extensions; "balance" conveys the account's
   balance, and "account" gives a link where the account can be topped
   up.

   Note that "describedBy" is case-sensitive in the JSON object, as are
   all other property names.


4.  Expressing Problems with Link Headers

   Because resources often use formats other than JSON to convey human-
   readable problem details, it is also possible to serialise a HTTP
   Problem for machine consumption using a Link response header field
   [RFC5988].  For example:

      HTTP/1.1 403 Forbidden
      Content-Type: text/html
      Content-Language: en
      Link: <http://example.com/probs/out-of-credit>; rel="describedBy";
               title="You do not have enough credits."; balance=30;
               account="http://api.example.com/account/12345"

   Here, the same problem as above is conveyed using the header in
   previous examples, but without the optional detail.



Nottingham              Expires November 4, 2012                [Page 4]

Internet-Draft                HTTP Problems                     May 2012


   HTTP Problems are serialised into Link headers using the
   "describedBy" link relation type, with the URL for the problem type
   as the link target.  The title is conveyed using the "title"
   parameter, and the detail can be conveyed using the "detail"
   parameter.

   Extension parameters on the JSON Object can also be expressed as
   target parameters on the link header, as long as the extension either
   defines them as a string, or explains how to express them as one.

   The title, detail, and extension properties MUST use the encoding
   specified in [RFC5987] if it falls outside of the US-ASCII character
   set.

   For example, the following are all valid:

      Link: <http://example.com/p/1>; rel="describedBy"; title="Hi"
      Link: <ftp://example.com/p/1>; rel="describedby"; title="Hi"
      Link: <http://example.com/p/1>; rel="describedby";
            title="Hi there"; detail="something happened."
      Link: <http://example.com/p/1>; rel="describedby"; other="foo";
            title="Hi there"; title*=UTF-8''Hi%20there; another=bar;
            detail*=UTF-8''something%20happened


5.  Defining New HTTP Problems

   Before defining a new HTTP problem, it's important to understand what
   they are good for, and what's better left to other mechanisms.

   Problems are not a debugging tool for the underlying implementation;
   rather, they are a way to expose greater detail about the HTTP
   interface of the application itself.

   For example, an "out of credit" problem is an appropriate explanation
   as to why a request was forbidden.  In contrast, an error explaining
   the internal conditions that led to a 500 Internal Server Error along
   with a stack trace is not an appropriate use of this mechanism,
   because it exposes implementation detail, rather than explaining the
   interface.

   At the other end of the spectrum, truly generic problems - i.e.,
   conditions that could potentially apply to any resource on the Web -
   are usually better expressed as plain status codes.

   For example, a "write access disallowed" problem is likely
   unnecessary, since a 403 Forbidden status code on a PUT request is
   largely self-explanatory.



Nottingham              Expires November 4, 2012                [Page 5]

Internet-Draft                HTTP Problems                     May 2012


   If defining a new problem still seems wise, one can be created by:
   1.  Nominating a describedBy URL (typically, with the "http" scheme),
   2.  Choosing a title that appropriately describes it (think short),
       and
   3.  Nominating one or more HTTP status code that it should be used
       with.

   Problems SHOULD document the HTTP status code(s) they are to be used
   with, and MAY specify the use of the Retry-After response header in
   appropriate circumstances.

   A problem's describedBy URL SHOULD resolve to HTML documentation that
   explains how to resolve the problem.

   Optionally, a problem definition MAY specify additional properties on
   the HTTP Problem JSON object.

   For example, an extension might use typed links [RFC5988] to another
   resource that can be used by machines to resolve the problem.

   If an extension is defined, its name SHOULD conform to token
   [RFC2616], so that it can be serialised in header and other formats.

   Likewise, problems defining extensions should either make their
   values strings, or explain how to map their values to strings that
   are safe to include in HTTP headers (noting the special semantics of
   a comma there).


6.  Generating Problems

   The URL used in the describedBy property MUST NOT be changed in any
   way from that defined by its specification; doing so turns it into a
   different problem that most consumers will not recognise.

   The title string SHOULD be sent as specified by the problem
   definition, although it MAY be localised (e.g., using server-driven
   content negotiation, with the "Accept-Language" request header).
   Remember that such responses are required by HTTP to include a Vary
   header, e.g.:

      HTTP/1.1 403 Forbidden
      Content-Type: text/html
      Content-Language: se
      Vary: Accept-Language
      Link: <http://example.com/probs/out-of-credit>; rel="describedBy";
               title*=UTF-8''Du%20%C3%A4r%20ute%20p%C3%A5%20pengar.




Nottingham              Expires November 4, 2012                [Page 6]

Internet-Draft                HTTP Problems                     May 2012


   Note the use of RFC5987 encoding here.  HTTP Problems SHOULD be
   served with Content-Language headers, even if negotiation isn't used,
   to aid in localisation.

   The information conveyed in the detail property, if present, SHOULD
   focus on helping the client correct the problem, rather than giving
   debugging information.

   Software that generates problems should note that only one problem
   can be sent at at time.


7.  Consuming Problems

   Consumers should use the describedBy URL as the primary identifier
   for the problem; the title string is advisory, and included only for
   users who are not aware of the semantics of the URL, and don't have
   the ability to discover them (e.g., offline log analysis).

   Likewise, the detail property SHOULD NOT be parsed for information by
   clients; extensions are more suitable and less error-prone ways to
   obtain such information.

   Clients consuming HTTP Problems MUST ignore unrecognised extensions;
   this allows problems to evolve and include additional information in
   the future.

   Finally, clients consuming HTTP Problems SHOULD NOT automatically
   deference the describedBy URL; it is not intended for machine
   interaction.


8.  Security Considerations

   When defining a new problem, the information included must be
   carefully vetted.  Likewise, when actually generating a problem -
   however it is serialised - the details given must also be
   scrutinised.

   Risks include leaking information that can be exploited to compromise
   the system, an account in the system, or the privacy of users of the
   system.


9.  IANA Considerations

   This specification defines a new Internet media type, "application/
   json-problem":



Nottingham              Expires November 4, 2012                [Page 7]

Internet-Draft                HTTP Problems                     May 2012


      Type name: application
      Subtype name: problem+json
      Required parameters: None
      Optional parameters: None; unrecognised parameters
                           should be ignored
      Encoding considerations: Same as [RFC4627]
      Security considerations: see [this document]
      Interoperability considerations: None.
      Published specification: [this document]
      Applications that use this media type: HTTP
      Additional information:
        Magic number(s): n/a
        File extension(s): n/a
        Macintosh file type code(s): n/a
      Person & email address to contact for further information:
        Mark Nottingham <mnot@mnot.net>
      Intended usage: COMMON
      Restrictions on usage: None.
      Author: Mark Nottingham <mnot@mnot.net>
      Change controller: IESG


10.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.

   [RFC2616]  Fielding, R., Gettys, J., Mogul, J., Frystyk, H.,
              Masinter, L., Leach, P., and T. Berners-Lee, "Hypertext
              Transfer Protocol -- HTTP/1.1", RFC 2616, June 1999.

   [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter, "Uniform
              Resource Identifier (URI): Generic Syntax", STD 66,
              RFC 3986, January 2005.

   [RFC4627]  Crockford, D., "The application/json Media Type for
              JavaScript Object Notation (JSON)", RFC 4627, July 2006.

   [RFC5987]  Reschke, J., "Character Set and Language Encoding for
              Hypertext Transfer Protocol (HTTP) Header Field
              Parameters", RFC 5987, August 2010.

   [RFC5988]  Nottingham, M., "Web Linking", RFC 5988, October 2010.


Appendix A.  Non-Normative JSON Schema

   This schema is non-normative, and will probably disappear unless JSON



Nottingham              Expires November 4, 2012                [Page 8]

Internet-Draft                HTTP Problems                     May 2012


   Schema actually starts moving forward.

      {
        "description": "HTTP Problem",
        "type": "object",
        "properties": {
          "describedBy": {
            "type": "string",
            "required": "true",
            "format": "uri"
          },
          "title": { "type": "string", required: true },
          "detail": { "type": "string" }
        }
      }


Author's Address

   Mark Nottingham
   Rackspace

   Email: mnot@mnot.net
   URI:   http://www.mnot.net/



























Nottingham              Expires November 4, 2012                [Page 9]

