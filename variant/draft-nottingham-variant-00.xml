<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.1.2 -->

<!DOCTYPE rfc SYSTEM "../Tools/rfc2629xslt/rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc compact="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>

<rfc ipr="trust200902" docName="draft-nottingham-variant-00" category="std" updates="7234">

  <front>
    <title>HTTP Variants</title>

    <author initials="M." surname="Nottingham" fullname="Mark Nottingham">
      <organization>Fastly</organization>
      <address>
        <email>mnot@mnot.net</email>
        <uri>https://www.mnot.net/</uri>
      </address>
    </author>

    <date year="2017"/>

    <area>General</area>
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This specification introduces the HTTP <spanx style="verb">Variants</spanx> response header field to communicate what representations are available for a given resource.</t>



    </abstract>


    <note title="Note to Readers">


<t><spanx style="emph">RFC EDITOR: please remove this section before publication</spanx></t>

<t>The issues list for this draft can be found at <eref target="https://github.com/mnot/I-D/labels/variant">https://github.com/mnot/I-D/labels/variant</eref>.</t>

<t>The most recent (often, unpublished) draft is at <eref target="https://mnot.github.io/I-D/variant/">https://mnot.github.io/I-D/variant/</eref>.</t>

<t>Recent changes are listed at <eref target="https://github.com/mnot/I-D/commits/gh-pages/variant">https://github.com/mnot/I-D/commits/gh-pages/variant</eref>.</t>

<t>See also the draft’s current status in the IETF datatracker, at
<eref target="https://datatracker.ietf.org/doc/draft-nottingham-variant/">https://datatracker.ietf.org/doc/draft-nottingham-variant/</eref>.</t>


    </note>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>HTTP proactive content negotiation (<xref target="RFC7231"/>, Section 3.4.1) is increasingly being used to determine not only a response’s content-coding, but also its language, as well as newer axes (for example, see <xref target="I-D.ietf-httpbis-client-hints"/>).</t>

<t>Successfully reusing negotiated responses that have been stored in a HTTP cache requires establishment of a secondary cache key (<xref target="RFC7234"/>, Section 4.1) using the Vary header (<xref target="RFC7231"/>, Section 7.1.4).</t>

<t>HTTP’s caching model allows a certain amount of latitude in normalising request header fields to match those stored in the cache, so as to increase the chances of a cache hit while still respecting the semantics of that header. However, this is often inadequate; even with understanding of the headers’ semantics to facilitate such normalisation, a cache does not know enough about the possible alternative representations available on the origin server to make an appropriate decision.</t>

<t>For example, if a cache has stored the following request/response pair:</t>

<figure><artwork><![CDATA[
GET /foo HTTP/1.1
Host: www.example.com
Accept-Language: en;q=1.0, fr;q=0.5

HTTP/1.1 200 OK
Content-Type: text/html
Content-Language: fr
Vary: Accept-Language

[French content]
]]></artwork></figure>

<t>a downstream (client or intermediary) cache that has full knowledge of the semantics of <spanx style="verb">Accept-Language</spanx> and <spanx style="verb">Content-Language</spanx> will know that a French representation is available, and might be able to infer that an English representation is not available, but it does not know, for example, whether a Japanese representation is available without making another request, thereby incurring possibly unnecessary latency.</t>

<t>This specification introduces the HTTP <spanx style="verb">Variants</spanx> response header field to address this shortcoming, by communicating what representations are available for a given resource.</t>

<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”,
“RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in
<xref target="RFC2119"/>.</t>

<t>This specification uses the Augmented Backus-Naur Form (ABNF) notation of <xref target="RFC5234"/> with a list extension, defined in Section 7 of <xref target="RFC7230"/>, that allows for compact definition of comma-separated lists using a ‘#’ operator (similar to how the ‘*’ operator indicates repetition).</t>

<t>Additionally, it uses the “field-name”, “OWS” and “token” rules from <xref target="RFC7230"/>.</t>

</section>
</section>
<section anchor="the-variants-http-header-field" title="The “Variants” HTTP Header Field">

<t>The <spanx style="verb">Variant</spanx> HTTP response header field is used to indicate what other representations are available for a given resource at the time that the response is produced.</t>

<figure><artwork><![CDATA[
Variants = 1#( field-name *( OWS ";" OWS token ))
]]></artwork></figure>

<t>Each <spanx style="verb">field-name</spanx> in the list indicates a response header field that carries a value that clients might proactively negotiate for; each <spanx style="verb">token</spanx> parameter on the <spanx style="verb">field-name</spanx> is an available value.</t>

<t>So, given this example header field:</t>

<figure><artwork><![CDATA[
Variants: Content-Encoding;gzip
]]></artwork></figure>

<t>a recipient can infer that the only content-coding available for that resource is “gzip”.</t>

<t>Given:</t>

<figure><artwork><![CDATA[
Variants: content-encoding
]]></artwork></figure>

<t>a recipient can infer that no content-codings are supported. Note that as always with header field names, it is case-insensitive.</t>

<t>A more complex example:</t>

<figure><artwork><![CDATA[
Variants: DPR;1.0;2.0, Content-Language;en ;fr
]]></artwork></figure>

<t>Here, recipients can infer that two Device Pixel Ratios are available, as well as two content languages. Note that, as with all HTTP header fields that use the “#” list rule (see <xref target="RFC7230"/>, Section 7), they might occur in the same header field or separately.</t>

<t>Note that the ordering of values after the field-name is significant, as it might be used by the header’s algorithm for selecting a response.</t>

<t>Senders SHOULD consistently send <spanx style="verb">Variant</spanx> on all cacheable (as per <xref target="RFC7234"/>, Section 3) responses for a resource, since its absence will trigger caches to fall back to <spanx style="verb">Vary</spanx> processing.</t>

<section anchor="defining-content-negotiation-using-variants" title="Defining Content Negotiation Using Variants">

<t>To be usable with Variants, proactive content negotiation mechanisms need to be specified to take advantage of it. Specifically, they:</t>

<t><list style="symbols">
  <t>MUST define a request header field that advertises the clients preferences or capabilities, whose field-name SHOULD begin with “Accept-“</t>
  <t>MUST define a response header field that indicates the result of selection, whose field-name SHOULD begin with “Content-“ and whose field-value SHOULD be a token</t>
  <t>MUST define a way for selecting a result, given a request header field value.</t>
</list></t>

<t><xref target="backports"/> fulfils these requirements for some existing proactive content negotiation mechanisms in HTTP.</t>

</section>
<section anchor="cache-behaviour" title="Cache Behaviour">

<t>Caches that implement the <spanx style="verb">Variants</spanx> header field and the relevant semantics of the field-name it contains SHOULD use that knowledge to either select an appropriate stored representation, or forward the request if no appropriate representation is stored.</t>

<t>They do so by running the defined algorithm to normalise the relevant request header field to a value, which they can then either locate in their cache or fetch from the origin server.</t>

<t>The information in the <spanx style="verb">Variants</spanx> header field is usable so long as the response that conveyed it remains fresh (as per <xref target="RFC7234"/>, Section 4.2). Caches SHOULD use the most recent response’s <spanx style="verb">Variant</spanx> field-value(s), but MAY use older ones as long as they are still fresh.</t>

<section anchor="relationship-to-vary" title="Relationship to Vary">

<t>Caches that fully implement this specification MUST ignore request header-fields in the <spanx style="verb">Vary</spanx> header for the purposes of secondary cache key calculation (<xref target="RFC7234"/>, Section 4.1) when their semantics are understood, implemented as per this specification, and their corresponding response header field is listed in <spanx style="verb">Variants</spanx>.</t>

<t>Request header fields listed in <spanx style="verb">Vary</spanx> that are not implemented in terms of this specification or not present in the <spanx style="verb">Variants</spanx> field SHOULD still form part of the secondary cache key.</t>

</section>
</section>
<section anchor="examples" title="Examples">

<section anchor="single-variant" title="Single Variant">

<t>Given a request/response pair:</t>

<figure><artwork><![CDATA[
GET /foo HTTP/1.1
Host: www.example.com
Accept-Language: en;q=1.0, fr;q=0.5

HTTP/1.1 200 OK
Content-Type: image/gif
Content-Language: en
Cache-Control: max-age=3600
Variants: Content-Language;en;de
Vary: Accept-Language
]]></artwork></figure>

<t>Upon receipt of this response, the cache knows that two representations of this resource are available, one with a <spanx style="verb">Content-Language</spanx> of “en”, and another whose <spanx style="verb">Content-Language</spanx> is “de”.</t>

<t>Subsequent requests (while this response is fresh) will cause the cache to either reuse this response or forward the request, depending on what the selection algorithm <spanx style="verb">Accept-Language</spanx> and <spanx style="verb">Content-Language</spanx> determines.</t>

<t>So, a request with “en” in <spanx style="verb">Accept-Language</spanx> is received and its q-value indicates that it is acceptable, the stored response is used. A request that indicates that “de” is acceptable will be forwarded to the origin, thereby populating the cache. A cache receiving a request that indicates both languages are acceptable will use the q-value to make a determination of what response to return.</t>

<t>A cache receiving a request that does not list either language as acceptable (or does not contain an Accept-Language at all) will return the “en” representation (possibly fetching it from the origin), since it is listed first.</t>

<t>Note that <spanx style="verb">Accept-Language</spanx> is listed in Vary, to assure backwards-compatibility with caches that do not support <spanx style="verb">Variants</spanx>.</t>

<t>Also, note that response header is listed in <spanx style="verb">Variants</spanx>, not the request header (as is the case with <spanx style="verb">Vary</spanx>).</t>

</section>
<section anchor="multiple-variants" title="Multiple Variants">

<t>A more complicated request/response pair:</t>

<figure><artwork><![CDATA[
GET /bar HTTP/1.1
Host: www.example.net
Accept-Language: en;q=1.0, fr;q=0.5
Accept-Encoding: gzip, br

HTTP/1.1 200 OK
Content-Type: image/gif
Content-Language: en
Content-Encoding: br
Variants: Content-Language;en;jp;de
Variants: Content-Encoding;br;gzip
Vary: Accept-Language, Accept-Encoding
]]></artwork></figure>

<t>Here, the cache knows that there are two axes that the response varies upon; <spanx style="verb">Content-Language</spanx> and <spanx style="verb">Content-Encoding</spanx>. Thus, there are a total of six possible representations for the resource, and the cache needs to consider the selection algorithms for both axes.</t>

<t>Upon a subsequent request, if both selection algorithms return a stored representation, it can be served from cache; otherwise, the request will need to be forwarded to origin.</t>

</section>
<section anchor="partial-coverage" title="Partial Coverage">

<t>Now, consider the previous example, but where only one of the varied axes is listed in <spanx style="verb">Variants</spanx>:</t>

<figure><artwork><![CDATA[
GET /bar HTTP/1.1
Host: www.example.net
Accept-Language: en;q=1.0, fr;q=0.5
Accept-Encoding: gzip, br

HTTP/1.1 200 OK
Content-Type: image/gif
Content-Language: en
Content-Encoding: br
Variants: Content-Encoding;br;gzip
Vary: Accept-Language, Accept-Encoding
]]></artwork></figure>

<t>Here, the cache will need to calculate a secondary cache key as per <xref target="RFC7234"/>, Section 4.1 – but considering only <spanx style="verb">Accept-Language</spanx> to be in its field-value – and then continue processing <spanx style="verb">Variants</spanx> for the set of stored responses that the algorithm described there selects.</t>

</section>
</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This specification registers one value in the Permanent Message Header Field Names registry established by <xref target="RFC3864"/>:</t>

<t><list style="symbols">
  <t>Header field name: Variants</t>
  <t>Applicable protocol: http</t>
  <t>Status: standard</t>
  <t>Author/Change Controller: IETF</t>
  <t>Specification document(s): [this document]</t>
  <t>Related information:</t>
</list></t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>If the number or advertised characteristics of the representations available for a resource are considered sensitive, the <spanx style="verb">Variants</spanx> header by its nature will leak them.</t>

<t>Note that the <spanx style="verb">Variants</spanx> header is not a commitment to make representations of a certain nature available; the runtime behaviour of the server always overrides hints like <spanx style="verb">Variants</spanx>.</t>

</section>
<section anchor="acknowledgments" title="Acknowledgments">

<t>This protocol is conceptually similar to, but simpler than, Transparent Content Negotiation <xref target="RFC2295"/>. Thanks to its authors for their inspiration.</t>

<t>It is also a generalisation of a Fastly feature designed by Rogier ‘DocWilco’ Mulhuijzen.</t>

<t>Thanks to Hooman Beheshti for his review and input.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2119" target='https://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC7231" target='https://www.rfc-editor.org/info/rfc7231'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines the semantics of HTTP/1.1 messages, as expressed by request methods, request header fields, response status codes, and response header fields, along with the payload of messages (metadata and body content) and mechanisms for content negotiation.</t></abstract>
</front>
<seriesInfo name='RFC' value='7231'/>
<seriesInfo name='DOI' value='10.17487/RFC7231'/>
</reference>



<reference  anchor="RFC7234" target='https://www.rfc-editor.org/info/rfc7234'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Caching</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines HTTP caches and the associated header fields that control cache behavior or indicate cacheable response messages.</t></abstract>
</front>
<seriesInfo name='RFC' value='7234'/>
<seriesInfo name='DOI' value='10.17487/RFC7234'/>
</reference>



<reference  anchor="RFC5234" target='https://www.rfc-editor.org/info/rfc5234'>
<front>
<title>Augmented BNF for Syntax Specifications: ABNF</title>
<author initials='D.' surname='Crocker' fullname='D. Crocker' role='editor'><organization /></author>
<author initials='P.' surname='Overell' fullname='P. Overell'><organization /></author>
<date year='2008' month='January' />
<abstract><t>Internet technical specifications often need to define a formal syntax.  Over the years, a modified version of Backus-Naur Form (BNF), called Augmented BNF (ABNF), has been popular among many Internet specifications.  The current specification documents ABNF. It balances compactness and simplicity with reasonable representational power.  The differences between standard BNF and ABNF involve naming rules, repetition, alternatives, order-independence, and value ranges.  This specification also supplies additional rule definitions and encoding for a core lexical analyzer of the type common to several Internet specifications.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='STD' value='68'/>
<seriesInfo name='RFC' value='5234'/>
<seriesInfo name='DOI' value='10.17487/RFC5234'/>
</reference>



<reference  anchor="RFC7230" target='https://www.rfc-editor.org/info/rfc7230'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7230'/>
<seriesInfo name='DOI' value='10.17487/RFC7230'/>
</reference>




    </references>

    <references title='Informative References'>





<reference anchor="I-D.ietf-httpbis-client-hints">
<front>
<title>HTTP Client Hints</title>

<author initials='I' surname='Grigorik' fullname='Ilya Grigorik'>
    <organization />
</author>

<date month='April' day='18' year='2017' />

<abstract><t>An increasing diversity of Web-connected devices and software capabilities has created a need to deliver optimized content for each device.  This specification defines a set of HTTP request header fields, colloquially known as Client Hints, to address this.  They are intended to be used as input to proactive content negotiation; just as the Accept header field allows user agents to indicate what formats they prefer, Client Hints allow user agents to indicate device and agent specific preferences.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-httpbis-client-hints-04' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-httpbis-client-hints-04.txt' />
</reference>



<reference  anchor="RFC3864" target='https://www.rfc-editor.org/info/rfc3864'>
<front>
<title>Registration Procedures for Message Header Fields</title>
<author initials='G.' surname='Klyne' fullname='G. Klyne'><organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<author initials='J.' surname='Mogul' fullname='J. Mogul'><organization /></author>
<date year='2004' month='September' />
<abstract><t>This specification defines registration procedures for the message header fields used by Internet mail, HTTP, Netnews and other applications.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='90'/>
<seriesInfo name='RFC' value='3864'/>
<seriesInfo name='DOI' value='10.17487/RFC3864'/>
</reference>



<reference  anchor="RFC2295" target='https://www.rfc-editor.org/info/rfc2295'>
<front>
<title>Transparent Content Negotiation in HTTP</title>
<author initials='K.' surname='Holtman' fullname='K. Holtman'><organization /></author>
<author initials='A.' surname='Mutz' fullname='A. Mutz'><organization /></author>
<date year='1998' month='March' />
<abstract><t>HTTP allows web site authors to put multiple versions of the same information under a single URL.  Transparent content negotiation is an extensible negotiation mechanism, layered on top of HTTP, for automatically selecting the best version when the URL is accessed.  This enables the smooth deployment of new web data formats and markup tags. This memo defines an Experimental Protocol for the Internet community. It does not specify an Internet standard of any kind.  Discussion and suggestions for improvement are requested.</t></abstract>
</front>
<seriesInfo name='RFC' value='2295'/>
<seriesInfo name='DOI' value='10.17487/RFC2295'/>
</reference>




    </references>


<section anchor="backports" title="Variants and Defined Content Negotiation Mechanisms">

<t>This appendix defines the required information to use existing proactive content negotiation mechanisms (as defined in <xref target="RFC7231"/>, Section 5.3) with the <spanx style="verb">Variants</spanx> header field.</t>

<section anchor="content-encoding" title="Content-Encoding">

<t>When negotiating for the <spanx style="verb">Content-Encoding</spanx> response header field’s value, the applicable request header field is <spanx style="verb">Accept-Encoding</spanx>, as per <xref target="RFC7231"/> Section 5.3.4.</t>

<t>Caches SHOULD use Quality Values (<xref target="RFC7231"/>, Section 5.3.1) to determine whether there is an acceptable stored response, in conjunction with the information carried in the Variants response header field.</t>

<t>If no acceptable representation can be found using quality values, the first value listed in the relevant <spanx style="verb">Variant</spanx> field-value SHOULD be selected.</t>

<t>The “identity” encoding (which as per {{!RFC7231 Section 5.3.4 represents “no encoding”) is always implicitly available at the lowest priority; if the server wishes to change its priority, it can be explicitly listed. Responses are not required to carry “identity” in the <spanx style="verb">Content-Encoding</spanx> response header field by this specification.</t>

<t><list style="symbols">
  <t>TODO: x-</t>
  <t>TODO: normalisations</t>
</list></t>

<t>Caches MAY assign a minimum quality value to trigger a request to origin. For example, a cache might decide to send a request to origin if there is not a stored response to which the client has assigned a quality value above 0.2.</t>

</section>
<section anchor="content-language" title="Content-Language">

<t>When negotiating for the <spanx style="verb">Content-Language</spanx> response header field’s value, the applicable request header field is <spanx style="verb">Accept-Language</spanx>, as per <xref target="RFC7231"/> Section 5.3.5.</t>

<t>Caches SHOULD use Quality Values (<xref target="RFC7231"/>, Section 5.3.1) to determine whether there is an acceptable stored response, in conjunction with the information carried in the Variants response header field.</t>

<t><list style="symbols">
  <t>TODO: stripping localisation</t>
  <t>TODO: other normalisations</t>
</list></t>

<t>If no acceptable representation can be found using quality values, the first value listed in the relevant <spanx style="verb">Variant</spanx> field-value SHOULD be selected.</t>

<t>Caches MAY assign a minimum quality value to trigger a request to origin. For example, a cache might decide to send a request to origin if there is not a stored response to which the client has assigned a quality value above 0.2.</t>

</section>
</section>


  </back>

<!-- ##markdown-source:
H4sIAHr4pVkAA+VbbXMbx5H+vr9iDvpAUgWAL5LiGIwvR4uUxTuJVCjKrquU
yxxgB8CYi93Vzi5BmCX/9jzdPbMvAGgpOVcllcsHC9LuzvTr00/3TAaDQVTa
MjEj9fr6+p36XhdWp6WL9HhcmLtRFGeTVC/wOC70tBykWVnadDbXi8GdvDo4
OIhiXeKNo4PDr6IJfs6yYjVSroyjKqdHbqS+Onr2PIpsXoxUWVSuPDo4+Prg
KNKF0SP1nUlNoZNomRW3syKr8lF0a1b4WzxS52lpitSUg1PaP4pcqdP4J51k
KXZcGRfldqT+WmaTvsJ/bBqbtOwrlxVlYaYOv1YL/6Ms7ASPJtki1/7HAi/j
kU0Tm5ofo0hX5TwrRpEaRAr/sykkfztUF7XS/M9ij7e6uF1/khUzndpfdGmz
dKReaVcmK35gFtomI7WA+f6L/jOERvygKiD+vCxzN9rfXy6Xw/B0P4rSrFhg
qTsDgdTVq5dHh4dfj2DEdNo8iKLBYKD0GNpBqSi6nlunXG4mdmonLAe0KIss
ribGqXJuxM03wc83qjAuz1Jn1Nzo2BRqak0Sw5ZsnyqlVYxaznWJN3O8DJPx
uk7BeUrfQTE9ToyCUEqrGaRKac2sKiZmKOJBJfPTBf2nzH664m1cFD2FSurs
9Pz68mqk8sRoyFCYRXZnICdpYSYs/9hgaaPyapx4lZ6SnkZZ5yoolVhX8u78
FYepmmj6Dv9apbGC6H8KJp7Zcl6Nh9Btnyy9fz443Yf8JnH7Pp7/cyirLzJH
Kk+gr9rNpqVJ+6pKWQo3N/Ge3wlbttdn9/lNbMbL+3X3aeErWW8y1+nMiAVJ
fPN5IckbtnT7s/kg1/i2Le57A0ckLmP/slg7Tk2qoqC9kDBl5RAF/PT87PqV
Qk5qipdbU/SxcVRv3HowtKacDhHQ+0CA/ceSn5UiFy9sHCcmip5QwnK4kaOi
iKMtLzIEJyIDMYV0hlApMKK0Ep+7Dw//gVAAQhx++tRX773bnw2fDw/3yL42
nQAmHHZOVvAq/lSVMxyjsQE6LJC8FGMqS/GCriOajCD7DSZZjM/6alyVYimY
UiVwQgVbwgZOLU2S0J+pWSIJ9D28s0tBZe71AsEJ/ICRHx7+DF+waQZks7F1
g0liaYc50sx9+rRH7qgmSDY3rRKIU5iKJK81htxBPspHuH2uYZixQdq4EoEe
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

-->

</rfc>

