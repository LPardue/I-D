<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.1.2 -->

<!DOCTYPE rfc SYSTEM "../Tools/rfc2629xslt/rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc compact="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>

<rfc ipr="trust200902" docName="draft-nottingham-bcp56bis-01" category="bcp" obsoletes="3205">

  <front>
    <title>On the use of HTTP as a Substrate</title>

    <author initials="M." surname="Nottingham" fullname="Mark Nottingham">
      <organization></organization>
      <address>
        <email>mnot@mnot.net</email>
        <uri>https://www.mnot.net/</uri>
      </address>
    </author>

    <date year="2017"/>

    <area>General</area>
    
    <keyword>substrate</keyword>

    <abstract>


<t>HTTP is often used as a substrate for other application protocols. This document specifies best
practices for these protocols’ use of HTTP.</t>



    </abstract>


    <note title="Note to Readers ">


<t>The issues list for this draft can be found at <eref target="https://github.com/mnot/I-D/labels/bcp56bis">https://github.com/mnot/I-D/labels/bcp56bis</eref>.</t>

<t>The most recent (often, unpublished) draft is at <eref target="https://mnot.github.io/I-D/bcp56bis/">https://mnot.github.io/I-D/bcp56bis/</eref>.</t>

<t>Recent changes are listed at <eref target="https://github.com/mnot/I-D/commits/gh-pages/bcp56bis">https://github.com/mnot/I-D/commits/gh-pages/bcp56bis</eref>.</t>


    </note>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>HTTP <xref target="RFC7230"/> is often used as a substrate for other application protocols. This is done for a
variety of reasons, including:</t>

<t><list style="symbols">
  <t>familiarity by implementers, specifiers, administrators, developers and users,</t>
  <t>availability of a variety of client, server and proxy implementations,</t>
  <t>ease of use,</t>
  <t>ubiquity of Web browsers,</t>
  <t>reuse of existing mechanisms like authentication and encryption,</t>
  <t>presence of HTTP servers and clients in target deployments, and</t>
  <t>its ability to traverse firewalls.</t>
</list></t>

<t>The Internet community has a long tradition of protocol reuse, dating back to the use of Telnet
<xref target="RFC0854"/> as a substrate for FTP <xref target="RFC0959"/> and SMTP <xref target="RFC2821"/>. However, layering new
protocols over HTTP brings its own set of issues:</t>

<t><list style="symbols">
  <t>Should an application using HTTP define a new URL scheme? Use new ports?</t>
  <t>Should it use standard HTTP methods and status codes, or define new ones?</t>
  <t>How can the maximum value be extracted from the use of HTTP?</t>
  <t>How does it coexist with other uses of HTTP – especially Web browsing?</t>
  <t>How can interoperability problems and “protocol dead ends” be avoided?</t>
</list></t>

<t>This document contains best current practices regarding the use of HTTP by applications other than
Web browsing. <xref target="used"/> defines what applications it applies to; <xref target="overview"/> surveys the properties
of HTTP that are important to preserve, and <xref target="bp"/> conveys best practices for those applications
that do use HTTP.</t>

<t>It is written primarily to guide IETF efforts to define application protocols using HTTP for
deployment on the Internet, but might be applicable in other situations. Note that the requirements
herein do not necessarily apply to the development of generic HTTP extensions.</t>

<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”,
“RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in
<xref target="RFC2119"/>.</t>

</section>
</section>
<section anchor="used" title="Is HTTP Being Used?">

<t>Different applications have different goals when using HTTP. In this document, we say an
application is <spanx style="emph">using HTTP</spanx> when any of the following conditions are true:</t>

<t><list style="symbols">
  <t>The transport port in use is 80 or 443,</t>
  <t>The URL scheme “http” or “https” is used,</t>
  <t>The ALPN protocol ID <xref target="RFC7301"/> “http/1.1”, “h2” or “h2c” is used, or</t>
  <t>The message formats described in <xref target="RFC7230"/> and/or <xref target="RFC7540"/> are used in conjunction with the IANA registries defined for HTTP.</t>
</list></t>

<t>When an application is using HTTP, all of the requirements of the HTTP protocol suite (including
but not limited to <xref target="RFC7230"/>, <xref target="RFC7231"/>, <xref target="RFC7232"/>, <xref target="RFC7233"/>, <xref target="RFC7234"/>,
<xref target="RFC7235"/> and <xref target="RFC7540"/>) are in force.</t>

<t>An application might not be <spanx style="emph">using HTTP</spanx> according to this definition, but still relying upon the
HTTP specifications in some manner. For example, an application might wish to avoid re-specifying
parts of the message format, but change others; or, it might want to use a different set of methods.</t>

<t>Such applications are referred to as <spanx style="emph">protocols based upon HTTP</spanx> in this document. These have more
freedom to modify protocol operation, but are also likely to lose at least a portion of the
benefits outlined above, as most HTTP implementations won’t be easily adaptable to these changes,
and as the protocol diverges from HTTP, the benefit of mindshare will be lost.</t>

<t>Protocols that are based upon HTTP MUST NOT reuse HTTP’s URL schemes, transport ports, ALPN
protocol IDs or IANA registries; rather, they are encouraged to establish their own.</t>

</section>
<section anchor="overview" title="What’s Important About HTTP">

<t>There are many ways that HTTP applications are defined and deployed, and sometimes they are brought
to the IETF for standardisation. In that process, what might be workable for deployment in a
limited fashion isn’t appropriate for standardisation and the corresponding broader deployment.</t>

<t>This section examines the facets of the protocol that are important to preserve in these situations.</t>

<section anchor="generic-semantics" title="Generic Semantics">

<t>When writing an application’s specification, it’s often tempting to specify exactly how HTTP is to
be implemented, supported and used.</t>

<t>However, this can easily lead to an unintended profile of HTTP’s behaviour. For example, it’s
common to see specifications with language like this:</t>

<figure><artwork><![CDATA[
A `200 OK` response means that the widget has successfully been updated.
]]></artwork></figure>

<t>This sort of specification is bad practice, because it is adding new semantics to HTTP’s status
codes and methods, respectively; a recipient – whether it’s an origin server, client library,
intermediary or cache – now has to know these extra semantics to understand the message.</t>

<t>Some applications even require specific behaviours, such as:</t>

<figure><artwork><![CDATA[
A `POST` request MUST result in a `201 Created` response.
]]></artwork></figure>

<t>This forms an expectation in the client that the response will always be <spanx style="verb">201 Created</spanx>, when in
fact there are a number of reasons why the status code might differ in a real deployment. If the
client does not anticipate this, the application’s deployment is brittle.</t>

<t>Much of the value of HTTP is in its <spanx style="emph">generic semantics</spanx> – that is, the protocol elements defined
by HTTP are potentially applicable to every resource, not specific to a particular context.
Application-specific semantics are expressed in the payload; mostly, in the body, but also in
header fields.</t>

<t>This allows a HTTP message to be examined by generic HTTP software (e.g., HTTP servers,
intermediaries, client implementatiions), and its handling to be correctly determined. It also
allows people to leverage their knowledge of HTTP semantics without special-casing them for a
particular application.</t>

<t>Therefore, applications that use HTTP MUST NOT re-define, refine or overlay the semantics of
defined protocol elements. Instead, they SHOULD focus their specifications on protocol elements
that are specific to them; namely their HTTP resources.</t>

<t>See <xref target="resource"/> for details.</t>

</section>
<section anchor="links" title="Links">

<t>Another common practice is assuming that the HTTP server’s name space (or a portion thereof) is
exclusively for the use of a single application. This effectively overlays special,
application-specific semantics onto that space, precludes other applications from using it.</t>

<t>As explained in <xref target="RFC7320"/>, such “squatting” on a part of the URL space by a standard usurps the
server’s authority over its own resources, can cause deployment issues, and is therefore bad
practice in standards.</t>

<t>Instead of statically defining URL paths, it is RECOMMENDED that applications using HTTP define
links in payloads, to allow flexibility in deployment.</t>

<t>Using runtime links in this fashion has a number of other benefits. For example, navigating with a
link allows a request to be routed to a different server without the overhead of a redirection,
thereby supporting deployment across machines well. It becomes possible to “mix” different
applications on the same server, and offers a natural path for extensibility, versioning and
capability management.</t>

</section>
<section anchor="getting-value-from-http" title="Getting Value from HTTP">

<t>The simplest possible use of HTTP is to POST data to a single URL, thereby effectively tunnelling
through the protocol.</t>

<t>This “RPC” style of communication does get some benefit from using HTTP – namely, message framing and the availability of implementations – but fails to realise many others:</t>

<t><list style="symbols">
  <t>Caching for server scalability, latency and bandwidth reduction, and reliability;</t>
  <t>Authentication and access control;</t>
  <t>Automatic redirection;</t>
  <t>Partial content to selectively request part of a response;</t>
  <t>Natural support for extensions and versioning through protocol extension; and</t>
  <t>The ability to interact with the application easily using a Web browser.</t>
</list></t>

<t>Using such a high-level protocol to tunnel simple semantics has downsides too; because of its more
advanced capabilities, breadth of deployment and age, HTTP’s complexity can cause interoperability
problems that could be avoided by using a simpler substrate (e.g., WebSockets <xref target="RFC6455"/>, if
browser support is necessary, or TCP <xref target="RFC0793"/> if not), or making the application be <spanx style="emph">based upon
HTTP</spanx>, instead of using it (as defined in <xref target="used"/>).</t>

<t>Applications that use HTTP are encouraged to accommodate the various features that the protocol
offers, so that their users receive the maximum benefit from it. This document does not require
specific features to be used, since the appropriate design tradeoffs are highly specific to a given
situation. However, following the practices in <xref target="bp"/> will help make them available.</t>

</section>
</section>
<section anchor="bp" title="Best Practices for Using HTTP">

<t>This section contains best practices regarding the use of HTTP by applications, including practices
for specific HTTP protocol elements.</t>

<section anchor="specifying-the-use-of-http" title="Specifying the Use of HTTP">

<t>When specifying the use of HTTP, an application SHOULD use <xref target="RFC7230"/> as the primary reference;
it is not necessary to reference all of the specifications in the HTTP suite unless there are
specific reasons to do so (e.g., a particular feature is called out).</t>

<t>Applications using HTTP MAY specify a minimum version to be supported (HTTP/1.1 is suggested), and
MUST NOT specify a maximum version.</t>

<t>Likewise, applications need not specify what HTTP mechanisms – such as redirection, caching,
authentication, proxy authentication, and so on – are to be supported. Full featured support for
HTTP SHOULD be taken for granted in servers and clients, and the application’s function SHOULD
degrade gracefully if they are not (although this might be achieved by informing the user that
their task cannot be completed).</t>

<t>For example, an application can specify that it uses HTTP like this:</t>

<figure><artwork><![CDATA[
Foo Application uses HTTP {{RFC7230}}. Implementations MUST support 
HTTP/1.1, and MAY support later versions. Support for common HTTP 
mechanisms such as redirection and caching are assumed.
]]></artwork></figure>

</section>
<section anchor="resource" title="Defining HTTP Resources">

<t>HTTP Applications SHOULD focus on defining the following application-specific protocol elements:</t>

<t><list style="symbols">
  <t>Media types <xref target="RFC6838"/>, often based upon a format convention such as JSON <xref target="RFC7159"/>,</t>
  <t>HTTP header fields, as per <xref target="headers"/>, and</t>
  <t>The behaviour of resources, as identified by link relations <xref target="RFC5988"/>.</t>
</list></t>

<t>By composing these protocol elements, an application can define a set of resources, identified by
link relations, that implement specified behaviours, including:</t>

<t><list style="symbols">
  <t>Retrieval of their state using GET, in one or more formats identified by media type;</t>
  <t>Resource creation or update using POST or PUT, with an appropriately identified request body format;</t>
  <t>Data processing using POST and identified request and response body format(s); and</t>
  <t>Resource deletion using DELETE.</t>
</list></t>

<t>For example, an application might specify:</t>

<figure><artwork><![CDATA[
Resources linked to with the "example-widget" link relation type are
Widgets. The state of a Widget can be fetched in the
"application/example-widget+json" format, and can be updated by PUT
to the same link. Widget resources can be deleted.

The "Example-Count" response header field on Widget representations
indicates how many Widgets are held by the sender.

The "application/example-widget+json" format is a JSON {{RFC7159}}
format representing the state of a Widget. It contains links to
related information in the link indicated by the Link header field
value with the "example-other-info" link relation type.
]]></artwork></figure>

</section>
<section anchor="http-urls" title="HTTP URLs">

<t>In HTTP, URLs are opaque identifiers under the control of the server. As outlined in <xref target="RFC7320"/>,
standards cannot usurp this space, since it might conflict with existing resources, and constrain
implementation and deployment.</t>

<t>In other words, applications that use HTTP MUST NOT associate application semantics with specific
URL paths on arbitrary servers. Doing so inappropriately conflates the identity of the resource (its URL) with te capabilities that resource supports, bringing about many of the same interoperability problems that <xref target="RFC4367"/> warns of.</t>

<t>For example, specifying that a “GET to the URL /foo retrieves a bar document” is bad practice.
Likewise, specifying “The widget API is at the path /bar” violates <xref target="RFC7320"/>.</t>

<t>Instead, applications that use HTTP are encouraged to ensure that URLs are discovered at runtime,
allowing HTTP-based services to describe their own capabilities. One way to do this is to use typed
links <xref target="RFC5988"/> to convey the URIs that are in use, as well as the semantics of the resources
that they identify. See <xref target="resource"/> for details.</t>

<section anchor="initial-url-discovery" title="Initial URL Discovery">

<t>Generally, a client with begin interacting with a given application server by requesting an initial
document that contains information about that particular deployment, potentially including links to
other relevant resources.</t>

<t>Applications that use HTTP SHOULD allow an arbitrary URL to be used as that entry point. For
example, rather than specifying “the initial document is at “/foo/v1”, they should allow a
deployment to use any URL as the entry point for the application.</t>

<t>In cases where doing so is impractical (e.g., it is not possible to convey a whole URL, but only a
hostname) applications that use HTTP MAY define a well-known URL <xref target="RFC5785"/> as an entry point.</t>

</section>
<section anchor="scheme" title="URL Schemes">

<t>Applications that use HTTP MUST allow use of the “https” URL scheme, and SHOULD NOT allow use of
the “http” URL scheme, unless interoperability considerations with existing deployments require it.
They MUST NOT use other URL schemes.</t>

<t>“https” is preferred to mitigate pervasive monitoring attacks <xref target="RFC7258"/>.</t>

<t>Using other schemes to denote an application using HTTP makes it more difficult to use with
existing implementations (e.g., Web browsers), and is likely to fail to meet the requirements of
<xref target="RFC7595"/>.</t>

<t>If it is necessary to advertise the application in use, this SHOULD be done in message payloads,
not the URL scheme.</t>

</section>
<section anchor="transport-ports" title="Transport Ports">

<t>Applications that use HTTP SHOULD use the default port for the URL scheme in use. If it is felt
that networks might need to distinguish the application’s traffic for operational reasons, it MAY
register a separate port, but be aware that this has privacy implications for that protocol’s
users. The impact of doing so MUST be documented in Security Considerations.</t>

</section>
</section>
<section anchor="http-methods" title="HTTP Methods">

<t>Applications that use HTTP MUST confine themselves to using registered HTTP methods such as GET,
POST, PUT, DELETE, and PATCH.</t>

<t>New HTTP methods are rare; they are required to be registered with IETF Review (see <xref target="RFC7232"/>),
and are also required to be <spanx style="emph">generic</spanx>. That means that they need to be potentially applicable to
all resources, not just those of one application.</t>

<t>While historically some applications (e.g., <xref target="RFC4791"/>) has defined non-generic methods,
<xref target="RFC7231"/> now forbids this.</t>

<t>When it is believed that a new method is required, authors are encouraged to engage with the HTTP
community early, and document their proposal as a separate HTTP extension, rather than as part of
an application’s specification.</t>

</section>
<section anchor="http-status-codes" title="HTTP Status Codes">

<t>Applications that use HTTP MUST only use registered HTTP status codes.</t>

<t>As with methods, new HTTP status codes are rare, and required (by <xref target="RFC7231"/>) to be registered
with IETF review. Similarly, HTTP status codes are generic; they are required (by <xref target="RFC7231"/>) to
be potentially applicable to all resources, not just to those of one application.</t>

<t>When it is believed that a new status code is required, authors are encouraged to engage with the
HTTP community early, and document their proposal as a separate HTTP extension, rather than as part
of an application’s specification.</t>

<t>Status codes’ primary function is to convey HTTP semantics for the benefit of generic HTTP
software, not application-specific semantics. Therefore, applications MUST NOT specify additional
semantics or refine existing semantics for status codes.</t>

<t>In particular, specifying that a particular status code has a specific meaning in the context of an
application is harmful, as these are not generic semantics, since the consumer needs to be in the
context of the application to understand them.</t>

<t>Furthermore, applications using HTTP MUST NOT re-specify the semantics of HTTP status codes, even
if it is only by copying their definition. They MUST NOT require specific status phrases to be
used; the status phrase has no function in HTTP, and is not guaranteed to be preserved by
implementations.</t>

<t>Typically, applications using HTTP will convey application-specific information in the message body
and/or HTTP header fields, not the status code.</t>

<t>Specifications sometimes also create a “laundry list” of potential status codes, in an effort to be
helpful. The problem with doing so is that such a list is never complete; for example, if a network
proxy is interposed, the client might encounter a <spanx style="verb">407 Proxy Authentication Required</spanx> response; or,
if the server is rate limiting the client, it might receive a <spanx style="verb">429 Too Many Requests</spanx> response.</t>

<t>Since the list of HTTP status codes can be added to, it’s safer to refer to it directly, and point
out that clients SHOULD be able to handle all applicable protocol elements gracefully (i.e.,
falling back to the generic <spanx style="verb">n00</spanx> semantics of a given status code; e.g., <spanx style="verb">499</spanx> can be safely
handled as <spanx style="verb">400</spanx> by clients that don’t recognise it).</t>

</section>
<section anchor="headers" title="HTTP Header Fields">

<t>Applications that use HTTP MAY define new HTTP header fields, following the advice in <xref target="RFC7231"/>,
Section 8.3.1.</t>

<t>Typically, using HTTP header fields is appropriate in a few different situations:</t>

<t><list style="symbols">
  <t>Their content is useful to intermediaries (who often wish to avoid parsing the body), and/or</t>
  <t>Their content is useful to generic HTTP software (e.g., clients, servers), and/or</t>
  <t>It is not possible to include their content in the message body (usually because a format does not allow it).</t>
</list></t>

<t>If none of these motivations apply, using a header field is NOT RECOMMENDED.</t>

<t>New header fields MUST be registered, as per <xref target="RFC7231"/> and <xref target="RFC3864"/>.</t>

<t>It is RECOMMENDED that header field names be short (even when HTTP/2 header compression is in
effect, there is an overhead) but appropriately specific. In particular, if a header field is
specific to an application, an identifier for that application SHOULD form a prefix to the header
field name, separated by a “-“.</t>

<t>The semantics of existing HTTP header fields MUST NOT be re-defined without updating their
registration or defining an extension to them (if allowed). For example, an application using HTTP
cannot specify that the <spanx style="verb">Location</spanx> header has a special meaning in a certain context.</t>

<t>See <xref target="state"/> for requirements regarding header fields that carry application state (e.g,. Cookie).</t>

</section>
<section anchor="browser" title="Ensuring Browser Interoperability">

</section>
<section anchor="access-control" title="Access Control">

<t>Modern Web browsers constrain the ability of content from one origin (as defined by <xref target="RFC6454"/>)
to access resources from another, to avoid the “confused deputy” problem. As a result, applications
that wish to expose cross-origin data to browsers will need to implement <xref target="W3C.REC-cors-20140116"/>.</t>

<section anchor="state" title="Authentication and Application State">

<t>Applications that use HTTP MAY use stateful cookies <xref target="RFC6265"/> to identify a client and/or store
client-specific data to contextualise requests.</t>

<t>If it is only necessary to identify clients, applications that use HTTP MAY use HTTP authentication
<xref target="RFC7235"/>; if the Basic authentication scheme <xref target="RFC7617"/> is used, it MUST NOT be used with the
‘http’ URL scheme.</t>

<t>In either case, it is important to carefully specify the scoping and use of these mechanisms; if
they expose sensitive data or capabilities (e.g., by acting as an ambiant authority), exploits are
possible. Mitigations include using a request-specific token to assure the intent of the client.</t>

</section>
</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document has no requirements for IANA.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t><xref target="state"/> discusses the impact of using stateful mechanisms in the protocol as ambiant authority,
and suggests a mitigation.</t>

<t><xref target="scheme"/> requires support for ‘https’ URLs, and discourages the use of ‘http’ URLs, to mitigate
pervasive monitoring attacks.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC7230" target='http://www.rfc-editor.org/info/rfc7230'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7230'/>
<seriesInfo name='DOI' value='10.17487/RFC7230'/>
</reference>



<reference  anchor="RFC2119" target='http://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC7301" target='http://www.rfc-editor.org/info/rfc7301'>
<front>
<title>Transport Layer Security (TLS) Application-Layer Protocol Negotiation Extension</title>
<author initials='S.' surname='Friedl' fullname='S. Friedl'><organization /></author>
<author initials='A.' surname='Popov' fullname='A. Popov'><organization /></author>
<author initials='A.' surname='Langley' fullname='A. Langley'><organization /></author>
<author initials='E.' surname='Stephan' fullname='E. Stephan'><organization /></author>
<date year='2014' month='July' />
<abstract><t>This document describes a Transport Layer Security (TLS) extension for application-layer protocol negotiation within the TLS handshake. For instances in which multiple application protocols are supported on the same TCP or UDP port, this extension allows the application layer to negotiate which protocol will be used within the TLS connection.</t></abstract>
</front>
<seriesInfo name='RFC' value='7301'/>
<seriesInfo name='DOI' value='10.17487/RFC7301'/>
</reference>



<reference  anchor="RFC7231" target='http://www.rfc-editor.org/info/rfc7231'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines the semantics of HTTP/1.1 messages, as expressed by request methods, request header fields, response status codes, and response header fields, along with the payload of messages (metadata and body content) and mechanisms for content negotiation.</t></abstract>
</front>
<seriesInfo name='RFC' value='7231'/>
<seriesInfo name='DOI' value='10.17487/RFC7231'/>
</reference>



<reference  anchor="RFC7232" target='http://www.rfc-editor.org/info/rfc7232'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Conditional Requests</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application- level protocol for distributed, collaborative, hypertext information systems.  This document defines HTTP/1.1 conditional requests, including metadata header fields for indicating state changes, request header fields for making preconditions on such state, and rules for constructing the responses to a conditional request when one or more preconditions evaluate to false.</t></abstract>
</front>
<seriesInfo name='RFC' value='7232'/>
<seriesInfo name='DOI' value='10.17487/RFC7232'/>
</reference>



<reference  anchor="RFC7233" target='http://www.rfc-editor.org/info/rfc7233'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Range Requests</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='Y.' surname='Lafon' fullname='Y. Lafon' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application- level protocol for distributed, collaborative, hypertext information systems.  This document defines range requests and the rules for constructing and combining responses to those requests.</t></abstract>
</front>
<seriesInfo name='RFC' value='7233'/>
<seriesInfo name='DOI' value='10.17487/RFC7233'/>
</reference>



<reference  anchor="RFC7234" target='http://www.rfc-editor.org/info/rfc7234'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Caching</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines HTTP caches and the associated header fields that control cache behavior or indicate cacheable response messages.</t></abstract>
</front>
<seriesInfo name='RFC' value='7234'/>
<seriesInfo name='DOI' value='10.17487/RFC7234'/>
</reference>



<reference  anchor="RFC7235" target='http://www.rfc-editor.org/info/rfc7235'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Authentication</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application- level protocol for distributed, collaborative, hypermedia information systems.  This document defines the HTTP Authentication framework.</t></abstract>
</front>
<seriesInfo name='RFC' value='7235'/>
<seriesInfo name='DOI' value='10.17487/RFC7235'/>
</reference>



<reference  anchor="RFC7540" target='http://www.rfc-editor.org/info/rfc7540'>
<front>
<title>Hypertext Transfer Protocol Version 2 (HTTP/2)</title>
<author initials='M.' surname='Belshe' fullname='M. Belshe'><organization /></author>
<author initials='R.' surname='Peon' fullname='R. Peon'><organization /></author>
<author initials='M.' surname='Thomson' fullname='M. Thomson' role='editor'><organization /></author>
<date year='2015' month='May' />
<abstract><t>This specification describes an optimized expression of the semantics of the Hypertext Transfer Protocol (HTTP), referred to as HTTP version 2 (HTTP/2).  HTTP/2 enables a more efficient use of network resources and a reduced perception of latency by introducing header field compression and allowing multiple concurrent exchanges on the same connection.  It also introduces unsolicited push of representations from servers to clients.</t><t>This specification is an alternative to, but does not obsolete, the HTTP/1.1 message syntax.  HTTP's existing semantics remain unchanged.</t></abstract>
</front>
<seriesInfo name='RFC' value='7540'/>
<seriesInfo name='DOI' value='10.17487/RFC7540'/>
</reference>



<reference  anchor="RFC7320" target='http://www.rfc-editor.org/info/rfc7320'>
<front>
<title>URI Design and Ownership</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<date year='2014' month='July' />
<abstract><t>Section 1.1.1 of RFC 3986 defines URI syntax as &quot;a federated and extensible naming system wherein each scheme's specification may further restrict the syntax and semantics of identifiers using that scheme.&quot;  In other words, the structure of a URI is defined by its scheme.  While it is common for schemes to further delegate their substructure to the URI's owner, publishing independent standards that mandate particular forms of URI substructure is inappropriate, because that essentially usurps ownership.  This document further describes this problematic practice and provides some acceptable alternatives for use in standards.</t></abstract>
</front>
<seriesInfo name='BCP' value='190'/>
<seriesInfo name='RFC' value='7320'/>
<seriesInfo name='DOI' value='10.17487/RFC7320'/>
</reference>



<reference  anchor="RFC6838" target='http://www.rfc-editor.org/info/rfc6838'>
<front>
<title>Media Type Specifications and Registration Procedures</title>
<author initials='N.' surname='Freed' fullname='N. Freed'><organization /></author>
<author initials='J.' surname='Klensin' fullname='J. Klensin'><organization /></author>
<author initials='T.' surname='Hansen' fullname='T. Hansen'><organization /></author>
<date year='2013' month='January' />
<abstract><t>This document defines procedures for the specification and registration of media types for use in HTTP, MIME, and other Internet protocols.  This memo documents an Internet Best Current Practice.</t></abstract>
</front>
<seriesInfo name='BCP' value='13'/>
<seriesInfo name='RFC' value='6838'/>
<seriesInfo name='DOI' value='10.17487/RFC6838'/>
</reference>



<reference  anchor="RFC5988" target='http://www.rfc-editor.org/info/rfc5988'>
<front>
<title>Web Linking</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<date year='2010' month='October' />
<abstract><t>This document specifies relation types for Web links, and defines a registry for them.  It also defines the use of such links in HTTP headers with the Link header field.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5988'/>
<seriesInfo name='DOI' value='10.17487/RFC5988'/>
</reference>



<reference  anchor="RFC7595" target='http://www.rfc-editor.org/info/rfc7595'>
<front>
<title>Guidelines and Registration Procedures for URI Schemes</title>
<author initials='D.' surname='Thaler' fullname='D. Thaler' role='editor'><organization /></author>
<author initials='T.' surname='Hansen' fullname='T. Hansen'><organization /></author>
<author initials='T.' surname='Hardie' fullname='T. Hardie'><organization /></author>
<date year='2015' month='June' />
<abstract><t>This document updates the guidelines and recommendations, as well as the IANA registration processes, for the definition of Uniform Resource Identifier (URI) schemes.  It obsoletes RFC 4395.</t></abstract>
</front>
<seriesInfo name='BCP' value='35'/>
<seriesInfo name='RFC' value='7595'/>
<seriesInfo name='DOI' value='10.17487/RFC7595'/>
</reference>



<reference  anchor="RFC3864" target='http://www.rfc-editor.org/info/rfc3864'>
<front>
<title>Registration Procedures for Message Header Fields</title>
<author initials='G.' surname='Klyne' fullname='G. Klyne'><organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<author initials='J.' surname='Mogul' fullname='J. Mogul'><organization /></author>
<date year='2004' month='September' />
<abstract><t>This specification defines registration procedures for the message header fields used by Internet mail, HTTP, Netnews and other applications.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='90'/>
<seriesInfo name='RFC' value='3864'/>
<seriesInfo name='DOI' value='10.17487/RFC3864'/>
</reference>



<reference anchor="W3C.REC-cors-20140116"
           target='http://www.w3.org/TR/2014/REC-cors-20140116'>
<front>
<title>Cross-Origin Resource Sharing</title>

<author initials='A.' surname='Kesteren' fullname='Anne van Kesteren'>
    <organization />
</author>

<date month='January' day='16' year='2014' />
</front>

<seriesInfo name='World Wide Web Consortium Recommendation' value='REC-cors-20140116' />
<format type='HTML' target='http://www.w3.org/TR/2014/REC-cors-20140116' />
</reference>




    </references>

    <references title='Informative References'>





<reference  anchor="RFC0854" target='http://www.rfc-editor.org/info/rfc854'>
<front>
<title>Telnet Protocol Specification</title>
<author initials='J.' surname='Postel' fullname='J. Postel'><organization /></author>
<author initials='J.K.' surname='Reynolds' fullname='J.K. Reynolds'><organization /></author>
<date year='1983' month='May' />
<abstract><t>This is the specification of the Telnet protocol used for remote    terminal access in the ARPA Internet.  The purpose of the TELNET    Protocol is to provide a fairly general, bi-directional, eight-bit    byte oriented communications facility.  Its primary goal is to allow    a standard method of interfacing terminal devices and    terminal-oriented processes to each other.  It is envisioned that the    protocol may also be used for terminal-terminal communication    (&quot;linking&quot;) and process-process communication (distributed    computation).   This RFC specifies a standard for the ARPA Internet    community.  Hosts on the ARPA Internet are expected to adopt and    implement this standard.  Obsoletes NIC 18639.</t></abstract>
</front>
<seriesInfo name='STD' value='8'/>
<seriesInfo name='RFC' value='854'/>
<seriesInfo name='DOI' value='10.17487/RFC0854'/>
</reference>



<reference  anchor="RFC0959" target='http://www.rfc-editor.org/info/rfc959'>
<front>
<title>File Transfer Protocol</title>
<author initials='J.' surname='Postel' fullname='J. Postel'><organization /></author>
<author initials='J.' surname='Reynolds' fullname='J. Reynolds'><organization /></author>
<date year='1985' month='October' />
<abstract><t>This memo is the official specification of the File Transfer Protocol    (FTP) for the DARPA Internet community.  The primary intent is to    clarify and correct the documentation of the FTP specification, not to    change the protocol.  The following new optional commands are included    in this edition of the specification:  Change to Parent Directory    (CDUP), Structure Mount (SMNT), Store Unique (STOU), Remove Directory    (RMD), Make Directory (MKD), Print Directory (PWD), and System (SYST).    Note that this specification is compatible with the previous edition.</t></abstract>
</front>
<seriesInfo name='STD' value='9'/>
<seriesInfo name='RFC' value='959'/>
<seriesInfo name='DOI' value='10.17487/RFC0959'/>
</reference>



<reference  anchor="RFC2821" target='http://www.rfc-editor.org/info/rfc2821'>
<front>
<title>Simple Mail Transfer Protocol</title>
<author initials='J.' surname='Klensin' fullname='J. Klensin' role='editor'><organization /></author>
<date year='2001' month='April' />
<abstract><t>This document is a self-contained specification of the basic protocol for the Internet electronic mail transport.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='2821'/>
<seriesInfo name='DOI' value='10.17487/RFC2821'/>
</reference>



<reference  anchor="RFC6455" target='http://www.rfc-editor.org/info/rfc6455'>
<front>
<title>The WebSocket Protocol</title>
<author initials='I.' surname='Fette' fullname='I. Fette'><organization /></author>
<author initials='A.' surname='Melnikov' fullname='A. Melnikov'><organization /></author>
<date year='2011' month='December' />
<abstract><t>The WebSocket Protocol enables two-way communication between a client running untrusted code in a controlled environment to a remote host that has opted-in to communications from that code.  The security model used for this is the origin-based security model commonly used by web browsers.  The protocol consists of an opening handshake followed by basic message framing, layered over TCP.  The goal of this technology is to provide a mechanism for browser-based applications that need two-way communication with servers that does not rely on opening multiple HTTP connections (e.g., using XMLHttpRequest or &lt;iframe&gt;s and long polling).  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6455'/>
<seriesInfo name='DOI' value='10.17487/RFC6455'/>
</reference>



<reference  anchor="RFC0793" target='http://www.rfc-editor.org/info/rfc793'>
<front>
<title>Transmission Control Protocol</title>
<author initials='J.' surname='Postel' fullname='J. Postel'><organization /></author>
<date year='1981' month='September' />
</front>
<seriesInfo name='STD' value='7'/>
<seriesInfo name='RFC' value='793'/>
<seriesInfo name='DOI' value='10.17487/RFC0793'/>
</reference>



<reference  anchor="RFC7159" target='http://www.rfc-editor.org/info/rfc7159'>
<front>
<title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
<author initials='T.' surname='Bray' fullname='T. Bray' role='editor'><organization /></author>
<date year='2014' month='March' />
<abstract><t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t><t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t></abstract>
</front>
<seriesInfo name='RFC' value='7159'/>
<seriesInfo name='DOI' value='10.17487/RFC7159'/>
</reference>



<reference  anchor="RFC4367" target='http://www.rfc-editor.org/info/rfc4367'>
<front>
<title>What's in a Name: False Assumptions about DNS Names</title>
<author initials='J.' surname='Rosenberg' fullname='J. Rosenberg' role='editor'><organization /></author>
<author><organization>IAB</organization></author>
<date year='2006' month='February' />
<abstract><t>The Domain Name System (DNS) provides an essential service on the Internet, mapping structured names to a variety of data, usually IP addresses.  These names appear in email addresses, Uniform Resource Identifiers (URIs), and other application-layer identifiers that are often rendered to human users.  Because of this, there has been a strong demand to acquire names that have significance to people, through equivalence to registered trademarks, company names, types of services, and so on.  There is a danger in this trend; the humans and automata that consume and use such names will associate specific semantics with some names and thereby make assumptions about the services that are, or should be, provided by the hosts associated with the names.  Those assumptions can often be false, resulting in a variety of failure conditions.  This document discusses this problem in more detail and makes recommendations on how it can be avoided.  This memo provides information for the Internet community.</t></abstract>
</front>
<seriesInfo name='RFC' value='4367'/>
<seriesInfo name='DOI' value='10.17487/RFC4367'/>
</reference>



<reference  anchor="RFC5785" target='http://www.rfc-editor.org/info/rfc5785'>
<front>
<title>Defining Well-Known Uniform Resource Identifiers (URIs)</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<author initials='E.' surname='Hammer-Lahav' fullname='E. Hammer-Lahav'><organization /></author>
<date year='2010' month='April' />
<abstract><t>This memo defines a path prefix for &quot;well-known locations&quot;, &quot;/.well-known/&quot;, in selected Uniform Resource Identifier (URI) schemes.   [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5785'/>
<seriesInfo name='DOI' value='10.17487/RFC5785'/>
</reference>



<reference  anchor="RFC7258" target='http://www.rfc-editor.org/info/rfc7258'>
<front>
<title>Pervasive Monitoring Is an Attack</title>
<author initials='S.' surname='Farrell' fullname='S. Farrell'><organization /></author>
<author initials='H.' surname='Tschofenig' fullname='H. Tschofenig'><organization /></author>
<date year='2014' month='May' />
<abstract><t>Pervasive monitoring is a technical attack that should be mitigated in the design of IETF protocols, where possible.</t></abstract>
</front>
<seriesInfo name='BCP' value='188'/>
<seriesInfo name='RFC' value='7258'/>
<seriesInfo name='DOI' value='10.17487/RFC7258'/>
</reference>



<reference  anchor="RFC4791" target='http://www.rfc-editor.org/info/rfc4791'>
<front>
<title>Calendaring Extensions to WebDAV (CalDAV)</title>
<author initials='C.' surname='Daboo' fullname='C. Daboo'><organization /></author>
<author initials='B.' surname='Desruisseaux' fullname='B. Desruisseaux'><organization /></author>
<author initials='L.' surname='Dusseault' fullname='L. Dusseault'><organization /></author>
<date year='2007' month='March' />
<abstract><t>This document defines extensions to the Web Distributed Authoring and Versioning (WebDAV) protocol to specify a standard way of accessing, managing, and sharing calendaring and scheduling information based on the iCalendar format.  This document defines the &quot;calendar-access&quot; feature of CalDAV.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4791'/>
<seriesInfo name='DOI' value='10.17487/RFC4791'/>
</reference>



<reference  anchor="RFC6454" target='http://www.rfc-editor.org/info/rfc6454'>
<front>
<title>The Web Origin Concept</title>
<author initials='A.' surname='Barth' fullname='A. Barth'><organization /></author>
<date year='2011' month='December' />
<abstract><t>This document defines the concept of an &quot;origin&quot;, which is often used as the scope of authority or privilege by user agents.  Typically, user agents isolate content retrieved from different origins to prevent malicious web site operators from interfering with the operation of benign web sites.  In addition to outlining the principles that underlie the concept of origin, this document details how to determine the origin of a URI and how to serialize an origin into a string.  It also defines an HTTP header field, named &quot;Origin&quot;, that indicates which origins are associated with an HTTP request.   [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6454'/>
<seriesInfo name='DOI' value='10.17487/RFC6454'/>
</reference>



<reference  anchor="RFC6265" target='http://www.rfc-editor.org/info/rfc6265'>
<front>
<title>HTTP State Management Mechanism</title>
<author initials='A.' surname='Barth' fullname='A. Barth'><organization /></author>
<date year='2011' month='April' />
<abstract><t>This document defines the HTTP Cookie and Set-Cookie header fields. These header fields can be used by HTTP servers to store state (called cookies) at HTTP user agents, letting the servers maintain a stateful session over the mostly stateless HTTP protocol.  Although cookies have many historical infelicities that degrade their security and privacy, the Cookie and Set-Cookie header fields are widely used on the Internet.  This document obsoletes RFC 2965.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6265'/>
<seriesInfo name='DOI' value='10.17487/RFC6265'/>
</reference>



<reference  anchor="RFC7617" target='http://www.rfc-editor.org/info/rfc7617'>
<front>
<title>The 'Basic' HTTP Authentication Scheme</title>
<author initials='J.' surname='Reschke' fullname='J. Reschke'><organization /></author>
<date year='2015' month='September' />
<abstract><t>This document defines the &quot;Basic&quot; Hypertext Transfer Protocol (HTTP) authentication scheme, which transmits credentials as user-id/ password pairs, encoded using Base64.</t></abstract>
</front>
<seriesInfo name='RFC' value='7617'/>
<seriesInfo name='DOI' value='10.17487/RFC7617'/>
</reference>




    </references>


<section anchor="changes-from-rfc3205" title="Changes from RFC3205">

<t>RFC3205 captured the Best Current Practice in the early 2000’s, based on the concerns facing
protocol designers at the time. Use of HTTP has changed considerably since then, and as a result
this document is substantially different. As a result, the changes are too numerous to list
individually.</t>

</section>


  </back>

<!-- ##markdown-source:
H4sIAOdMJlkAA7Vca3PbyHL9Pr8C4X6wdENSD7+lVDZa2XtXiR+KJWcrlUrZ
Q2JI4hoEeDGAZMbl/54+3T2DAaWVb91K9oNXJMF5dPecPv0YTiYT0xZt6U6y
91XWrlzWeZfVi+y36+vLzPrMZlfdzLeNbZ3J63ll1/Ro3thFO6nqti2q5cqu
J7P55umzWeEnh0cmp0dPsuPDo+dmTn8u62Z7ktEDpp75unSt8yfZ4+PDp8YU
m+Yka5vOt8eHhy8Pj41tnD3J/uwq19jS3NbNl2VTd5sT88Vt6VV+kl1UrWsq
105eYQn9+1hu/+p3N+tf+Lh+41tb5Z9sWVe0wq3zZlOcZP/V1vNxRv8UVe6q
dpz5umkbt/D013atf7RNMaeP5vV6Y/WPNT1MHxVVWVTuv42xXbuqmxOTTUxG
/xUV7fPtNHsXpcRviwDf2ubL7id1s7RV8T+2LerqhN9xa1uUJ9maBP0v+GdK
G+cPuobWvWrbjT85OLi9vZ2GTw+MMZPJJLO85XlrDOux8KTS1lVQbi5ajVLJ
FnWT1aT5JrObTVnMeQHZpqlJJHXpp9n1ir5Puu+w48xv3LxYFM5nM+dbs8E0
xZxeYhwahswnfvdRak1TXRst1X16h3/a+tMHZ3PX+E/GXJPtFd53NFJZ+FaH
w8zQdDa3FU1I73YV7aDN/ilsf1m0q242JYUcQAoHF5NXB6WdudIfBKv856kM
v65p3MbNsY09Fsg466pNN6MJVy7f16loznQClq3OUtQ8fhj4ACN/kAHnK1st
afFkw7wB9+NlwoiK1h8sV5ONpe8OFsyyWhd5XpLh/gTDb+q8m0M5qtVv3/7h
w6/nz48fH37//n+hYtZyJU9bc2ObwrVbaI9Opa8rtvV52eVksyfG/Clb2HVR
FvQYPTXbZsV6UzqYCOlzHM0Ef9t8XVQFr6XG69zduLLe0GcZnUesmN6lAe0N
2bud0aAyr82SRczLQk6na26wEfoibeBrMi/vigei9bLZ0ch42c2Kv3Y6JkFD
Nmvq2zBn49RE3VdaIW0tWzuosvBrGOIXl+Fc0+hBapjYVfNmu8FLDLFpyOir
eQ+bskTZnCybhEvoapula2n3m7LeKnrQIzQCGUEW9t3WBIkW3ydNFI27tSVp
SAw4oB/DT1fh8RWrmhBtia/lBa+RFhKUKxskmVve3MzOv/AUPdJfuxK48u3b
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
qf4vYzQv4AFTAAA=

-->

</rfc>

