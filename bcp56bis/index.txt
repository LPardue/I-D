



Network Working Group                                      M. Nottingham
Internet-Draft                                            April 18, 2017
Obsoletes: 3205 (if approved)
Intended status: Best Current Practice
Expires: October 20, 2017


                   On the use of HTTP as a Substrate
                      draft-nottingham-bcp56bis-00

Abstract

   HTTP is often used as a substrate for other application protocols.
   This document specifies best practices for these protocols' use of
   HTTP.

Note to Readers

   The issues list for this draft can be found at
   https://github.com/mnot/I-D/labels/bcp56bis .

   The most recent (often, unpublished) draft is at
   https://mnot.github.io/I-D/bcp56bis/ .

   Recent changes are listed at https://github.com/mnot/I-D/commits/gh-
   pages/bcp56bis .

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on October 20, 2017.








Nottingham              Expires October 20, 2017                [Page 1]

Internet-Draft      On the use of HTTP as a Substrate         April 2017


Copyright Notice

   Copyright (c) 2017 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

1.  Introduction

   HTTP [1] is often used as a substrate for other application
   protocols.  This is done for a variety of reasons:

   o  familiarity by implementers, specifiers, administrators,
      developers and users;

   o  availability of a variety of client, server and proxy
      implementations;

   o  ease of use;

   o  ubiquity of Web browsers;

   o  reuse of existing mechanisms like authentication and encryption;

   o  presence of HTTP servers and clients in target deployments, and

   o  its ability to traverse firewalls.

   The Internet community has a long tradition of protocol reuse, dating
   back to the use of Telnet [16] as a substrate for FTP [17] and SMTP
   [18].  However, layering new protocols over HTTP brings its own set
   of issues:

   o  Should an application using HTTP define a new URL scheme?  Use new
      ports?

   o  Should it use standard HTTP methods and status codes, or define
      new ones?

   o  How can the maximum value be extracted from the use of HTTP?



Nottingham              Expires October 20, 2017                [Page 2]

Internet-Draft      On the use of HTTP as a Substrate         April 2017


   o  How can interoperability problems and "protocol dead ends" be
      avoided?

   This document contains best current practices regarding these issues
   in the use of HTTP by applications other than Web browsing.
   Section 2 defines what applications it applies to; Section 3 surveys
   the properties of HTTP that are important to preserve, and Section 4
   conveys best practices for those applications that do use HTTP.

   It is written primarily to guide IETF efforts, but might be
   applicable in other situations.

1.1.  Notational Conventions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [2].

2.  Is HTTP Being Used?

   Different applications have different goals when using HTTP.  In this
   document, we say an application is _using HTTP_ when any of the
   following conditions are true:

   o  The transport port (or default port) is 80 or 443,

   o  The URL scheme is "http" or "https",

   o  The ALPN protocol ID [3] is "http/1.1", "h2" or "h2c", or

   o  The message formats described in [4] and/or [10] are used in
      conjunction with the IANA registries defined for HTTP.

   When an application is using HTTP, all of the requirements of the
   HTTP protocol suite (including but not limited to [4], [5], [6], [7],
   [8], [9] and [10]) are in force.

   An application might not be _using HTTP_ according to this
   definition, but still relying upon the HTTP specifications in some
   manner.  For example, an application might wish to avoid re-
   specifying parts of the message format, but change others; or, it
   might want to use a different set of methods.

   Such applications are referred to as _protocols based upon HTTP_ in
   this document.  These have more freedom to modify protocol operation,
   but are also likely to lose at least a portion of the benefits
   outlined above, as most HTTP implementations won't be easily




Nottingham              Expires October 20, 2017                [Page 3]

Internet-Draft      On the use of HTTP as a Substrate         April 2017


   adaptable to these changes, and as the protocol diverges from HTTP,
   the benefit of mindshare will be lost.

   Protocols that are based upon HTTP MUST NOT reuse HTTP's URL schemes,
   transport ports, ALPN protocol IDs or IANA registries; rather, they
   are encouraged to establish their own.

3.  What's Important About HTTP

   There are many ways that HTTP applications are defined and deployed,
   and sometimes they are brought to the IETF for standardisation.  In
   that process, what might be workable for deployment in a limited
   fashion isn't appropriate for standardisation and the corresponding
   broader deployment.  This section examines the facets of the protocol
   that are important to preserve in these situations.

3.1.  Generic Semantics

   When writing an application's specification, it's often tempting to
   specify exactly how HTTP is to be implemented, supported and used.

   However, this can easily lead to an unintended profile of HTTP's
   behaviour.  For example, it's common to see specifications with
   language like this:

A `200 OK` response means that the widget has successfully been updated.

   This sort of specification is bad practice, because it is adding new
   semantics to HTTP's status codes and methods, respectively; a
   recipient - whether it's an origin server, client library,
   intermediary or cache - now has to know these extra semantics to
   understand the message.

   Some applications even require specific behaviours, such as:

   A `POST` request MUST result in a `201 Created` response.

   This forms an expectation in the client that the response will always
   be "201 Created", when in fact there are a number of reasons why the
   status code might differ in a real deployment.  If the client does
   not anticipate this, the application's deployment is brittle.

   Much of the value of HTTP is in its _generic semantics_ - that is,
   the protocol elements defined by HTTP are potentially applicable to
   every resource, not specific to a particular context.  Application-
   specific semantics are expressed in the payload; mostly, in the body,
   but also in header fields.




Nottingham              Expires October 20, 2017                [Page 4]

Internet-Draft      On the use of HTTP as a Substrate         April 2017


   This allows a HTTP message to be examined by generic HTTP software,
   and its handling to be correctly determined.  It also allows people
   to leverage their knowledge of HTTP semantics without special-casing
   them for a particular application.

   Therefore, applications that use HTTP MUST NOT re-define, refine or
   overlay the semantics of defined protocol elements.  Instead, they
   SHOULD focus their specifications on protocol elements that are
   specific to them; namely their HTTP resources.

   See Section 4.2 for details.

3.2.  Links

   Another common practice is assuming that the HTTP server's name space
   (or a portion thereof) is exclusively for the use of a single
   application.  This effectively overlays special, application-specific
   semantics onto that space, precludes other applications from using
   it.

   As explained in [4], such "squatting" on a part of the URL space by a
   standard usurps the server's authority over its own resources, can
   cause deployment issues, and is therefore bad practice in standards.

   Instead of statically defining URL paths, applications are encouraged
   to define links in payloads, to allow flexibility in deployment.  For
   example, navigating with a link allows a request to be routed to a
   different server without the overhead of a redirection, thereby
   supporting deployment across machines well.

3.3.  HTTP Capabilities

   The simplest possible use of HTTP is to POST data to a single URL,
   thereby effectively tunnelling through the protocol.

   This "RPC" style of communication does get some benefit from using
   HTTP - namely, message framing and the availability of
   implementations - but fails to realise many others:

   o  Caching for server scalability, latency and bandwidth reduction,
      and reliability;

   o  Authentication and access control;

   o  Automatic redirection;

   o  Partial content to selectively request part of a response;




Nottingham              Expires October 20, 2017                [Page 5]

Internet-Draft      On the use of HTTP as a Substrate         April 2017


   o  Natural support for extensions and versioning through protocol
      extension; and

   o  The ability to interact with the application easily using a Web
      browser.

   Using such a high-level protocol to tunnel simple semantics has
   downsides too; because of its more advanced capabilities, breadth of
   deployment and age, HTTP's complexity can cause interoperability
   problems that could be avoided by using a simpler substrate (e.g.,
   WebSockets [19], if browser support is necessary, or TCP [20] if
   not), or making the application be _based upon HTTP_, instead of
   using it (as defined in Section 2).

   Applications that use HTTP are encouraged to accommodate the various
   features that the protocol offers, so that their users receive the
   maximum benefit from it.  This document does not require specific
   features to be used, since the appropriate design tradeoffs are
   highly specific to a given situation.  However, following the
   practices in Section 4 will help make them available.

4.  Best Practices for Using HTTP

   This section contains best practices regarding the use of HTTP by
   applications, including practices for specific HTTP protocol
   elements.

4.1.  Specifying the Use of HTTP

   When specifying the use of HTTP, an application SHOULD use [1] as the
   primary reference, MAY specify a minimum version to be supported
   (HTTP/1.1 is suggested), and SHOULD NOT specify a maximum version.

   Likewise, applications need not specify what HTTP mechanisms - such
   as redirection, caching, authentication, proxy authentication, and so
   on - are to be supported.  Full featured support for HTTP SHOULD be
   taken for granted in servers and clients, and the application's
   function SHOULD degrade gracefully if they are not (although this
   might be achieved by informing the user that their task cannot be
   completed).

   For example, an application can specify that it uses HTTP like this:

   Foo Application uses HTTP {{RFC7230}}. Implementations MUST support
   HTTP/1.1, and MAY support later versions. Support for common HTTP
   mechanisms such as redirection and caching are assumed.





Nottingham              Expires October 20, 2017                [Page 6]

Internet-Draft      On the use of HTTP as a Substrate         April 2017


4.2.  Defining HTTP Resources

   HTTP Applications SHOULD focus on defining the following application-
   specific protocol elements:

   o  Media types [11], often based upon a format convention such as
      JSON [21],

   o  HTTP header fields, as per Section 4.8, and

   o  The behaviour of resources, as identified by link relations [12].

   By composing these protocol elements, an application can define a set
   of resources, identified by link relations, that implement specified
   behaviours, including:

   o  Retrieval of their state using GET, in one or more formats
      identified by media type;

   o  Resource creation or update using POST or PUT, with an
      appropriately identified request body format;

   o  Data processing using POST and identified request and response
      body format(s); and

   o  Resource deletion using DELETE.

   For example, an application could specify:

   Resources linked to with the "example-widget" link relation type are
   Widgets. The state of a Widget can be fetched in the
   "application/example-widget+json" format, and can be updated by PUT
   to the same link. Widget resources can be deleted.

   The "Example-Count" response header field on Widget representations
   indicates how many Widgets are held by the sender.

   The "application/example-widget+json" format is a JSON {{RFC7159}}
   format representing the state of a Widget. It contains links to
   related information in the link indicated by the Link header field
   value with the "example-other-info" link relation type.

4.3.  URL Schemes

   Applications that use HTTP MUST use the "http" and/or "https" URL
   schemes.





Nottingham              Expires October 20, 2017                [Page 7]

Internet-Draft      On the use of HTTP as a Substrate         April 2017


   Using other schemes to denote an application using HTTP makes it more
   difficult to use with existing implementations (e.g., Web browsers),
   and is likely to fail to meet the requirements of [13].

   If it is necessary to advertise the application in use, this SHOULD
   be done in message payloads, not the URL scheme.

4.4.  Transport Ports

   Applications that use HTTP SHOULD use the default port for the URL
   scheme in use.  If it is felt that networks might need to distinguish
   the application's traffic for operational reasons, it MAY register a
   separate port, but be aware that this has privacy implications for
   that protocol's users.

4.5.  HTTP URLs

   In HTTP, URLs are opaque identifiers under the control of the server.
   As outlined in [4], standards cannot usurp this space, since it might
   conflict with existing resources, and constrain implementation and
   deployment.

   In other words, applications that use HTTP MUST NOT associate
   application semantics with specific URL paths.  For example,
   specifying that a "GET to the URL /foo retrieves a bar document" is
   bad practice.  Likewise, specifying "The widget API is at the path
   /bar" violates [4].

   Instead, applications that use HTTP are encouraged to use typed links
   [12] to convey the URIs that are in use, as well as the semantics of
   the resources that they identify.

4.5.1.  Initial URL Discovery

   Generally, a client with begin interacting with a given application
   server by requesting an initial document that contains information
   about that particular deployment, potentially including links to
   other relevant resources.

   Applications that use HTTP SHOULD allow an arbitrary URL as that
   entry point.  For example, rather than specifying "the initial
   document is at "/foo/v1", they should allow a deployment to give an
   arbitrary URL as the entry point for the application.

   In cases where doing so is impractical (e.g., it is not possible to
   convey a whole URL, but only a hostname) applications that use HTTP
   MAY define a well-known URL [22] as an entry point to their
   operation.



Nottingham              Expires October 20, 2017                [Page 8]

Internet-Draft      On the use of HTTP as a Substrate         April 2017


4.6.  HTTP Methods

   Applications that use HTTP are encouraged to use existing HTTP
   methods.

   New HTTP methods are rare; they are required to be registered with
   IETF Review (see [14]), and are also required to be _generic_. That
   means that they need to be potentially applicable to all resources,
   not just those of one application.

   While historically some applications (e.g., [23] and [24]) have
   defined non-generic methods, [15] now forbids this.

   This means that, typically, applications will use GET, POST, PUT,
   DELETE, PATCH, and other registered methods.

   When it is believed that a new method is required, authors are
   encouraged to engage with the HTTP community early, and document
   their proposal as a separate HTTP extension, rather than as part of
   an application's specification.

4.7.  HTTP Status Codes

   Applications that use HTTP are encouraged to use existing HTTP status
   codes.

   As with methods, new HTTP status codes are rare, and required (by
   [15]) to be registered with IETF review.  Similarly, HTTP status
   codes are generic; they are required (by [15]) to be potentially
   applicable to all resources, not just to those of one application.

   When it is believed that a new status code is required, authors are
   encouraged to engage with the HTTP community early, and document
   their proposal as a separate HTTP extension, rather than as part of
   an application's specification.

   Status codes' primary function is to convey HTTP semantics for the
   benefit of generic HTTP software, not application-specific semantics.
   Therefore, applications SHOULD NOT specify additional semantics or
   refine existing semantics for status codes.

   In particular, specifying that a particular status code has a
   specific meaning in the context of an application is harmful, as
   these are not generic semantics, since the consumer needs to be in
   the context of the application to understand them.

   Furthermore, applications using HTTP SHOULD NOT re-specify the
   semantics of HTTP status codes, even if it is only by copying their



Nottingham              Expires October 20, 2017                [Page 9]

Internet-Draft      On the use of HTTP as a Substrate         April 2017


   definition.  They MUST NOT require specific status phrases to be
   used; the status phrase has no function in HTTP, and is not
   guaranteed to be preserved by implementations.

   Typically, applications using HTTP will convey application-specific
   information in the message body and/or HTTP header fields, not the
   status code.

   Specifications sometimes also create a "laundry list" of potential
   status codes, in an effort to be helpful.  The problem with doing so
   is that such a list is never complete; for example, if a network
   proxy is interposed, the client might encounter a "407 Proxy
   Authentication Required" response; or, if the server is rate limiting
   the client, it might receive a "429 Too Many Requests" response.

   Since the list of HTTP status codes can be added to, it's safer to
   refer to it directly, and point out that clients SHOULD be able to
   handle all applicable protocol elements gracefully (i.e., falling
   back to the generic "n00" semantics of a given status code; e.g.,
   "499" can be safely handled as "400" by clients that don't recognise
   it).

4.8.  HTTP Header Fields

   Applications that use HTTP MAY define new HTTP header fields,
   following the advice in [5], Section 8.3.1.

5.  IANA Considerations

   This document has no requirements for IANA.

6.  Security Considerations

   TBD

7.  References

7.1.  Normative References

   [1]        Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer
              Protocol (HTTP/1.1): Message Syntax and Routing",
              RFC 7230, DOI 10.17487/RFC7230, June 2014,
              <http://www.rfc-editor.org/info/rfc7230>.

   [2]        Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <http://www.rfc-editor.org/info/rfc2119>.



Nottingham              Expires October 20, 2017               [Page 10]

Internet-Draft      On the use of HTTP as a Substrate         April 2017


   [3]        Friedl, S., Popov, A., Langley, A., and E. Stephan,
              "Transport Layer Security (TLS) Application-Layer Protocol
              Negotiation Extension", RFC 7301, DOI 10.17487/RFC7301,
              July 2014, <http://www.rfc-editor.org/info/rfc7301>.

   [4]        Nottingham, M., "URI Design and Ownership", BCP 190,
              RFC 7320, DOI 10.17487/RFC7320, July 2014,
              <http://www.rfc-editor.org/info/rfc7320>.

   [5]        McGrew, D. and P. Hoffman, "Cryptographic Algorithm
              Implementation Requirements and Usage Guidance for
              Encapsulating Security Payload (ESP) and Authentication
              Header (AH)", RFC 7321, DOI 10.17487/RFC7321, August 2014,
              <http://www.rfc-editor.org/info/rfc7321>.

   [6]        Flanagan, H. and S. Ginoza, "RFC Style Guide", RFC 7322,
              DOI 10.17487/RFC7322, September 2014,
              <http://www.rfc-editor.org/info/rfc7322>.

   [7]        Fielding, R., Ed., Lafon, Y., Ed., and J. Reschke, Ed.,
              "Hypertext Transfer Protocol (HTTP/1.1): Range Requests",
              RFC 7233, DOI 10.17487/RFC7233, June 2014,
              <http://www.rfc-editor.org/info/rfc7233>.

   [8]        Fielding, R., Ed., Nottingham, M., Ed., and J. Reschke,
              Ed., "Hypertext Transfer Protocol (HTTP/1.1): Caching",
              RFC 7234, DOI 10.17487/RFC7234, June 2014,
              <http://www.rfc-editor.org/info/rfc7234>.

   [9]        Villamizar, C., Ed., Kompella, K., Amante, S., Malis, A.,
              and C. Pignataro, "MPLS Forwarding Compliance and
              Performance Requirements", RFC 7325, DOI 10.17487/RFC7325,
              August 2014, <http://www.rfc-editor.org/info/rfc7325>.

   [10]       Belshe, M., Peon, R., and M. Thomson, Ed., "Hypertext
              Transfer Protocol Version 2 (HTTP/2)", RFC 7540,
              DOI 10.17487/RFC7540, May 2015,
              <http://www.rfc-editor.org/info/rfc7540>.

   [11]       Freed, N., Klensin, J., and T. Hansen, "Media Type
              Specifications and Registration Procedures", BCP 13,
              RFC 6838, DOI 10.17487/RFC6838, January 2013,
              <http://www.rfc-editor.org/info/rfc6838>.

   [12]       Nottingham, M., "Web Linking", RFC 5988,
              DOI 10.17487/RFC5988, October 2010,
              <http://www.rfc-editor.org/info/rfc5988>.




Nottingham              Expires October 20, 2017               [Page 11]

Internet-Draft      On the use of HTTP as a Substrate         April 2017


   [13]       Thaler, D., Ed., Hansen, T., and T. Hardie, "Guidelines
              and Registration Procedures for URI Schemes", BCP 35,
              RFC 7595, DOI 10.17487/RFC7595, June 2015,
              <http://www.rfc-editor.org/info/rfc7595>.

   [14]       Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer
              Protocol (HTTP/1.1): Conditional Requests", RFC 7232,
              DOI 10.17487/RFC7232, June 2014,
              <http://www.rfc-editor.org/info/rfc7232>.

   [15]       Fielding, R., Ed. and J. Reschke, Ed., "Hypertext Transfer
              Protocol (HTTP/1.1): Semantics and Content", RFC 7231,
              DOI 10.17487/RFC7231, June 2014,
              <http://www.rfc-editor.org/info/rfc7231>.

7.2.  Informative References

   [16]       Postel, J. and J. Reynolds, "Telnet Protocol
              Specification", STD 8, RFC 854, DOI 10.17487/RFC0854, May
              1983, <http://www.rfc-editor.org/info/rfc854>.

   [17]       Postel, J. and J. Reynolds, "File Transfer Protocol",
              STD 9, RFC 959, DOI 10.17487/RFC0959, October 1985,
              <http://www.rfc-editor.org/info/rfc959>.

   [18]       Klensin, J., Ed., "Simple Mail Transfer Protocol",
              RFC 2821, DOI 10.17487/RFC2821, April 2001,
              <http://www.rfc-editor.org/info/rfc2821>.

   [19]       Fette, I. and A. Melnikov, "The WebSocket Protocol",
              RFC 6455, DOI 10.17487/RFC6455, December 2011,
              <http://www.rfc-editor.org/info/rfc6455>.

   [20]       Postel, J., "Transmission Control Protocol", STD 7,
              RFC 793, DOI 10.17487/RFC0793, September 1981,
              <http://www.rfc-editor.org/info/rfc793>.

   [21]       Bray, T., Ed., "The JavaScript Object Notation (JSON) Data
              Interchange Format", RFC 7159, DOI 10.17487/RFC7159, March
              2014, <http://www.rfc-editor.org/info/rfc7159>.

   [22]       Nottingham, M. and E. Hammer-Lahav, "Defining Well-Known
              Uniform Resource Identifiers (URIs)", RFC 5785,
              DOI 10.17487/RFC5785, April 2010,
              <http://www.rfc-editor.org/info/rfc5785>.






Nottingham              Expires October 20, 2017               [Page 12]

Internet-Draft      On the use of HTTP as a Substrate         April 2017


   [23]       Daboo, C., "CardDAV: vCard Extensions to Web Distributed
              Authoring and Versioning (WebDAV)", RFC 6352,
              DOI 10.17487/RFC6352, August 2011,
              <http://www.rfc-editor.org/info/rfc6352>.

   [24]       Daboo, C., Desruisseaux, B., and L. Dusseault,
              "Calendaring Extensions to WebDAV (CalDAV)", RFC 4791,
              DOI 10.17487/RFC4791, March 2007,
              <http://www.rfc-editor.org/info/rfc4791>.

Author's Address

   Mark Nottingham

   Email: mnot@mnot.net
   URI:   https://www.mnot.net/



































Nottingham              Expires October 20, 2017               [Page 13]
