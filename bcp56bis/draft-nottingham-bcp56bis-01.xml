<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.1.2 -->

<!DOCTYPE rfc SYSTEM "../Tools/rfc2629xslt/rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc compact="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>

<rfc ipr="trust200902" docName="draft-nottingham-bcp56bis-01" category="bcp" obsoletes="3205">

  <front>
    <title>On the use of HTTP as a Substrate</title>

    <author initials="M." surname="Nottingham" fullname="Mark Nottingham">
      <organization></organization>
      <address>
        <email>mnot@mnot.net</email>
        <uri>https://www.mnot.net/</uri>
      </address>
    </author>

    <date year="2017"/>

    <area>General</area>
    
    <keyword>substrate</keyword>

    <abstract>


<t>HTTP is often used as a substrate for other application protocols. This document specifies best
practices for these protocols’ use of HTTP.</t>



    </abstract>


    <note title="Note to Readers ">


<t>The issues list for this draft can be found at <eref target="https://github.com/mnot/I-D/labels/bcp56bis">https://github.com/mnot/I-D/labels/bcp56bis</eref>.</t>

<t>The most recent (often, unpublished) draft is at <eref target="https://mnot.github.io/I-D/bcp56bis/">https://mnot.github.io/I-D/bcp56bis/</eref>.</t>

<t>Recent changes are listed at <eref target="https://github.com/mnot/I-D/commits/gh-pages/bcp56bis">https://github.com/mnot/I-D/commits/gh-pages/bcp56bis</eref>.</t>


    </note>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>HTTP <xref target="RFC7230"/> is often used as a substrate for other application protocols. This is done for a
variety of reasons, including:</t>

<t><list style="symbols">
  <t>familiarity by implementers, specifiers, administrators, developers and users,</t>
  <t>availability of a variety of client, server and proxy implementations,</t>
  <t>ease of use,</t>
  <t>ubiquity of Web browsers,</t>
  <t>reuse of existing mechanisms like authentication and encryption,</t>
  <t>presence of HTTP servers and clients in target deployments, and</t>
  <t>its ability to traverse firewalls.</t>
</list></t>

<t>The Internet community has a long tradition of protocol reuse, dating back to the use of Telnet
<xref target="RFC0854"/> as a substrate for FTP <xref target="RFC0959"/> and SMTP <xref target="RFC2821"/>. However, layering new
protocols over HTTP brings its own set of issues:</t>

<t><list style="symbols">
  <t>Should an application using HTTP define a new URL scheme? Use new ports?</t>
  <t>Should it use standard HTTP methods and status codes, or define new ones?</t>
  <t>How can the maximum value be extracted from the use of HTTP?</t>
  <t>How does it coexist with other uses of HTTP – especially Web browsing?</t>
  <t>How can interoperability problems and “protocol dead ends” be avoided?</t>
</list></t>

<t>This document contains best current practices regarding the use of HTTP by applications other than
Web browsing. <xref target="used"/> defines what applications it applies to; <xref target="overview"/> surveys the properties
of HTTP that are important to preserve, and <xref target="bp"/> conveys best practices for those applications
that do use HTTP.</t>

<t>It is written primarily to guide IETF efforts, but might be applicable in other situations. Note
that the requirements herein do not necessarily apply to the development of generic HTTP extensions.</t>

<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”,
“RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in
<xref target="RFC2119"/>.</t>

</section>
</section>
<section anchor="used" title="Is HTTP Being Used?">

<t>Different applications have different goals when using HTTP. In this document, we say an
application is <spanx style="emph">using HTTP</spanx> when any of the following conditions are true:</t>

<t><list style="symbols">
  <t>The transport port in use is 80 or 443,</t>
  <t>The URL scheme “http” or “https” is used,</t>
  <t>The ALPN protocol ID <xref target="RFC7301"/> “http/1.1”, “h2” or “h2c” is used, or</t>
  <t>The message formats described in <xref target="RFC7230"/> and/or <xref target="RFC7540"/> are used in conjunction with the IANA registries defined for HTTP.</t>
</list></t>

<t>When an application is using HTTP, all of the requirements of the HTTP protocol suite (including
but not limited to <xref target="RFC7230"/>, <xref target="RFC7231"/>, <xref target="RFC7232"/>, <xref target="RFC7233"/>, <xref target="RFC7234"/>,
<xref target="RFC7235"/> and <xref target="RFC7540"/>) are in force.</t>

<t>An application might not be <spanx style="emph">using HTTP</spanx> according to this definition, but still relying upon the
HTTP specifications in some manner. For example, an application might wish to avoid re-specifying
parts of the message format, but change others; or, it might want to use a different set of methods.</t>

<t>Such applications are referred to as <spanx style="emph">protocols based upon HTTP</spanx> in this document. These have more
freedom to modify protocol operation, but are also likely to lose at least a portion of the
benefits outlined above, as most HTTP implementations won’t be easily adaptable to these changes,
and as the protocol diverges from HTTP, the benefit of mindshare will be lost.</t>

<t>Protocols that are based upon HTTP MUST NOT reuse HTTP’s URL schemes, transport ports, ALPN
protocol IDs or IANA registries; rather, they are encouraged to establish their own.</t>

</section>
<section anchor="overview" title="What’s Important About HTTP">

<t>There are many ways that HTTP applications are defined and deployed, and sometimes they are brought
to the IETF for standardisation. In that process, what might be workable for deployment in a
limited fashion isn’t appropriate for standardisation and the corresponding broader deployment.</t>

<t>This section examines the facets of the protocol that are important to preserve in these situations.</t>

<section anchor="generic-semantics" title="Generic Semantics">

<t>When writing an application’s specification, it’s often tempting to specify exactly how HTTP is to
be implemented, supported and used.</t>

<t>However, this can easily lead to an unintended profile of HTTP’s behaviour. For example, it’s
common to see specifications with language like this:</t>

<figure><artwork><![CDATA[
A `200 OK` response means that the widget has successfully been updated.
]]></artwork></figure>

<t>This sort of specification is bad practice, because it is adding new semantics to HTTP’s status
codes and methods, respectively; a recipient – whether it’s an origin server, client library,
intermediary or cache – now has to know these extra semantics to understand the message.</t>

<t>Some applications even require specific behaviours, such as:</t>

<figure><artwork><![CDATA[
A `POST` request MUST result in a `201 Created` response.
]]></artwork></figure>

<t>This forms an expectation in the client that the response will always be <spanx style="verb">201 Created</spanx>, when in
fact there are a number of reasons why the status code might differ in a real deployment. If the
client does not anticipate this, the application’s deployment is brittle.</t>

<t>Much of the value of HTTP is in its <spanx style="emph">generic semantics</spanx> – that is, the protocol elements defined
by HTTP are potentially applicable to every resource, not specific to a particular context.
Application-specific semantics are expressed in the payload; mostly, in the body, but also in
header fields.</t>

<t>This allows a HTTP message to be examined by generic HTTP software (e.g., HTTP servers,
intermediaries, client implementatiions), and its handling to be correctly determined. It also
allows people to leverage their knowledge of HTTP semantics without special-casing them for a
particular application.</t>

<t>Therefore, applications that use HTTP MUST NOT re-define, refine or overlay the semantics of
defined protocol elements. Instead, they SHOULD focus their specifications on protocol elements
that are specific to them; namely their HTTP resources.</t>

<t>See <xref target="resource"/> for details.</t>

</section>
<section anchor="links" title="Links">

<t>Another common practice is assuming that the HTTP server’s name space (or a portion thereof) is
exclusively for the use of a single application. This effectively overlays special,
application-specific semantics onto that space, precludes other applications from using it.</t>

<t>As explained in <xref target="RFC7320"/>, such “squatting” on a part of the URL space by a standard usurps the
server’s authority over its own resources, can cause deployment issues, and is therefore bad
practice in standards.</t>

<t>Instead of statically defining URL paths, it is RECOMMENDED that applications using HTTP define
links in payloads, to allow flexibility in deployment.</t>

<t>Using runtime links in this fashion has a number of other benefits. For example, navigating with a
link allows a request to be routed to a different server without the overhead of a redirection,
thereby supporting deployment across machines well. It becomes possible to “mix” different
applications on the same server, and offers a natural path for extensibility, versioning and
capability management.</t>

</section>
<section anchor="getting-value-from-http" title="Getting Value from HTTP">

<t>The simplest possible use of HTTP is to POST data to a single URL, thereby effectively tunnelling
through the protocol.</t>

<t>This “RPC” style of communication does get some benefit from using HTTP – namely, message framing and the availability of implementations – but fails to realise many others:</t>

<t><list style="symbols">
  <t>Caching for server scalability, latency and bandwidth reduction, and reliability;</t>
  <t>Authentication and access control;</t>
  <t>Automatic redirection;</t>
  <t>Partial content to selectively request part of a response;</t>
  <t>Natural support for extensions and versioning through protocol extension; and</t>
  <t>The ability to interact with the application easily using a Web browser.</t>
</list></t>

<t>Using such a high-level protocol to tunnel simple semantics has downsides too; because of its more
advanced capabilities, breadth of deployment and age, HTTP’s complexity can cause interoperability
problems that could be avoided by using a simpler substrate (e.g., WebSockets <xref target="RFC6455"/>, if
browser support is necessary, or TCP <xref target="RFC0793"/> if not), or making the application be <spanx style="emph">based upon
HTTP</spanx>, instead of using it (as defined in <xref target="used"/>).</t>

<t>Applications that use HTTP are encouraged to accommodate the various features that the protocol
offers, so that their users receive the maximum benefit from it. This document does not require
specific features to be used, since the appropriate design tradeoffs are highly specific to a given
situation. However, following the practices in <xref target="bp"/> will help make them available.</t>

</section>
</section>
<section anchor="bp" title="Best Practices for Using HTTP">

<t>This section contains best practices regarding the use of HTTP by applications, including practices
for specific HTTP protocol elements.</t>

<section anchor="specifying-the-use-of-http" title="Specifying the Use of HTTP">

<t>When specifying the use of HTTP, an application SHOULD use <xref target="RFC7230"/> as the primary reference;
it is not necessary to reference all of the specifications in the HTTP suite unless there are
specific reasons to do so (e.g., a particular feature is called out).</t>

<t>Applications using HTTP MAY specify a minimum version to be supported (HTTP/1.1 is suggested), and
MUST NOT specify a maximum version.</t>

<t>Likewise, applications need not specify what HTTP mechanisms – such as redirection, caching,
authentication, proxy authentication, and so on – are to be supported. Full featured support for
HTTP SHOULD be taken for granted in servers and clients, and the application’s function SHOULD
degrade gracefully if they are not (although this might be achieved by informing the user that
their task cannot be completed).</t>

<t>For example, an application can specify that it uses HTTP like this:</t>

<figure><artwork><![CDATA[
Foo Application uses HTTP {{RFC7230}}. Implementations MUST support 
HTTP/1.1, and MAY support later versions. Support for common HTTP 
mechanisms such as redirection and caching are assumed.
]]></artwork></figure>

</section>
<section anchor="resource" title="Defining HTTP Resources">

<t>HTTP Applications SHOULD focus on defining the following application-specific protocol elements:</t>

<t><list style="symbols">
  <t>Media types <xref target="RFC6838"/>, often based upon a format convention such as JSON <xref target="RFC7159"/>,</t>
  <t>HTTP header fields, as per <xref target="headers"/>, and</t>
  <t>The behaviour of resources, as identified by link relations <xref target="RFC5988"/>.</t>
</list></t>

<t>By composing these protocol elements, an application can define a set of resources, identified by
link relations, that implement specified behaviours, including:</t>

<t><list style="symbols">
  <t>Retrieval of their state using GET, in one or more formats identified by media type;</t>
  <t>Resource creation or update using POST or PUT, with an appropriately identified request body format;</t>
  <t>Data processing using POST and identified request and response body format(s); and</t>
  <t>Resource deletion using DELETE.</t>
</list></t>

<t>For example, an application might specify:</t>

<figure><artwork><![CDATA[
Resources linked to with the "example-widget" link relation type are
Widgets. The state of a Widget can be fetched in the
"application/example-widget+json" format, and can be updated by PUT
to the same link. Widget resources can be deleted.

The "Example-Count" response header field on Widget representations
indicates how many Widgets are held by the sender.

The "application/example-widget+json" format is a JSON {{RFC7159}}
format representing the state of a Widget. It contains links to
related information in the link indicated by the Link header field
value with the "example-other-info" link relation type.
]]></artwork></figure>

</section>
<section anchor="http-urls" title="HTTP URLs">

<t>In HTTP, URLs are opaque identifiers under the control of the server. As outlined in <xref target="RFC7320"/>,
standards cannot usurp this space, since it might conflict with existing resources, and constrain
implementation and deployment.</t>

<t>In other words, applications that use HTTP MUST NOT associate application semantics with specific
URL paths. For example, specifying that a “GET to the URL /foo retrieves a bar document” is bad
practice. Likewise, specifying “The widget API is at the path /bar” violates <xref target="RFC7320"/>.</t>

<t>Instead, applications that use HTTP are encouraged to use typed links <xref target="RFC5988"/> to convey the
URIs that are in use, as well as the semantics of the resources that they identify. See
<xref target="resource"/> for details.</t>

<section anchor="initial-url-discovery" title="Initial URL Discovery">

<t>Generally, a client with begin interacting with a given application server by requesting an initial
document that contains information about that particular deployment, potentially including links to
other relevant resources.</t>

<t>Applications that use HTTP SHOULD allow an arbitrary URL to be used as that entry point. For
example, rather than specifying “the initial document is at “/foo/v1”, they should allow a
deployment to use any URL as the entry point for the application.</t>

<t>In cases where doing so is impractical (e.g., it is not possible to convey a whole URL, but only a
hostname) applications that use HTTP MAY define a well-known URL <xref target="RFC5785"/> as an entry point.</t>

</section>
<section anchor="scheme" title="URL Schemes">

<t>Applications that use HTTP MUST allow use of the “https” URL scheme, and SHOULD NOT allow use of
the “http” URL scheme, unless interoperability considerations with existing deployments require it.
They MUST NOT use other URL schemes.</t>

<t>“https” is preferred to mitigate pervasive monitoring attacks <xref target="RFC7258"/>.</t>

<t>Using other schemes to denote an application using HTTP makes it more difficult to use with
existing implementations (e.g., Web browsers), and is likely to fail to meet the requirements of
<xref target="RFC7595"/>.</t>

<t>If it is necessary to advertise the application in use, this SHOULD be done in message payloads,
not the URL scheme.</t>

</section>
<section anchor="transport-ports" title="Transport Ports">

<t>Applications that use HTTP SHOULD use the default port for the URL scheme in use. If it is felt
that networks might need to distinguish the application’s traffic for operational reasons, it MAY
register a separate port, but be aware that this has privacy implications for that protocol’s
users. The impact of doing so MUST be documented in Security Considerations.</t>

</section>
</section>
<section anchor="state" title="Authentication and Application State">

<t>Applications that use HTTP MAY use stateful cookies <xref target="RFC6265"/> to identify a client and/or store
client-specific data to contextualise requests.</t>

<t>If it is only necessary to identify clients, applications that use HTTP MAY use HTTP authentication
<xref target="RFC7235"/>; if the Basic authentication scheme <xref target="RFC7617"/> is used, it MUST NOT be used with the
‘http’ URL scheme.</t>

<t>In either case, it is important to carefully specify the scoping and use of these mechanisms; if
they expose sensitive data or capabilities (e.g., by acting as an ambiant authority), exploits are
possible. Mitigations include using a request-specific token to assure the intent of the client.</t>

</section>
<section anchor="http-methods" title="HTTP Methods">

<t>Applications that use HTTP MUST confine themselves to using registered HTTP methods such as GET,
POST, PUT, DELETE, and PATCH.</t>

<t>New HTTP methods are rare; they are required to be registered with IETF Review (see <xref target="RFC7232"/>),
and are also required to be <spanx style="emph">generic</spanx>. That means that they need to be potentially applicable to
all resources, not just those of one application.</t>

<t>While historically some applications (e.g., <xref target="RFC4791"/>) has defined non-generic methods,
<xref target="RFC7231"/> now forbids this.</t>

<t>When it is believed that a new method is required, authors are encouraged to engage with the HTTP
community early, and document their proposal as a separate HTTP extension, rather than as part of
an application’s specification.</t>

</section>
<section anchor="http-status-codes" title="HTTP Status Codes">

<t>Applications that use HTTP MUST only use registered HTTP status codes.</t>

<t>As with methods, new HTTP status codes are rare, and required (by <xref target="RFC7231"/>) to be registered
with IETF review. Similarly, HTTP status codes are generic; they are required (by <xref target="RFC7231"/>) to
be potentially applicable to all resources, not just to those of one application.</t>

<t>When it is believed that a new status code is required, authors are encouraged to engage with the
HTTP community early, and document their proposal as a separate HTTP extension, rather than as part
of an application’s specification.</t>

<t>Status codes’ primary function is to convey HTTP semantics for the benefit of generic HTTP
software, not application-specific semantics. Therefore, applications MUST NOT specify additional
semantics or refine existing semantics for status codes.</t>

<t>In particular, specifying that a particular status code has a specific meaning in the context of an
application is harmful, as these are not generic semantics, since the consumer needs to be in the
context of the application to understand them.</t>

<t>Furthermore, applications using HTTP MUST NOT re-specify the semantics of HTTP status codes, even
if it is only by copying their definition. They MUST NOT require specific status phrases to be
used; the status phrase has no function in HTTP, and is not guaranteed to be preserved by
implementations.</t>

<t>Typically, applications using HTTP will convey application-specific information in the message body
and/or HTTP header fields, not the status code.</t>

<t>Specifications sometimes also create a “laundry list” of potential status codes, in an effort to be
helpful. The problem with doing so is that such a list is never complete; for example, if a network
proxy is interposed, the client might encounter a <spanx style="verb">407 Proxy Authentication Required</spanx> response; or,
if the server is rate limiting the client, it might receive a <spanx style="verb">429 Too Many Requests</spanx> response.</t>

<t>Since the list of HTTP status codes can be added to, it’s safer to refer to it directly, and point
out that clients SHOULD be able to handle all applicable protocol elements gracefully (i.e.,
falling back to the generic <spanx style="verb">n00</spanx> semantics of a given status code; e.g., <spanx style="verb">499</spanx> can be safely
handled as <spanx style="verb">400</spanx> by clients that don’t recognise it).</t>

</section>
<section anchor="headers" title="HTTP Header Fields">

<t>Applications that use HTTP MAY define new HTTP header fields, following the advice in <xref target="RFC7231"/>,
Section 8.3.1.</t>

<t>Typically, using HTTP header fields is appropriate in a few different situations:</t>

<t><list style="symbols">
  <t>Their content is useful to intermediaries (who often wish to avoid parsing the body), and/or</t>
  <t>Their content is useful to generic HTTP software (e.g., clients, servers), and/or</t>
  <t>It is not possible to include their content in the message body (usually because a format does not allow it).</t>
</list></t>

<t>If none of these motivations apply, using a header field is NOT RECOMMENDED.</t>

<t>New header fields MUST be registered, as per <xref target="RFC7231"/> and <xref target="RFC3864"/>.</t>

<t>It is RECOMMENDED that header field names be short (even when HTTP/2 header compression is in
effect, there is an overhead) but appropriately specific. In particular, if a header field is
specific to an application, an identifier for that application SHOULD form a prefix to the header
field name, separated by a “-“.</t>

<t>The semantics of existing HTTP header fields MUST NOT be re-defined without updating their
registration or defining an extension to them (if allowed). For example, an application using HTTP
cannot specify that the <spanx style="verb">Location</spanx> header has a special meaning in a certain context.</t>

<t>See <xref target="state"/> for requirements regarding header fields that carry application state (e.g,. Cookie).</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document has no requirements for IANA.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t><xref target="state"/> discusses the impact of using stateful mechanisms in the protocol as ambiant authority,
and suggests a mitigation.</t>

<t><xref target="scheme"/> requires support for ‘https’ URLs, and discourages the use of ‘http’ URLs, to mitigate
pervasive monitoring attacks.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC7230" target='http://www.rfc-editor.org/info/rfc7230'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7230'/>
<seriesInfo name='DOI' value='10.17487/RFC7230'/>
</reference>



<reference  anchor="RFC2119" target='http://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor="RFC7301" target='http://www.rfc-editor.org/info/rfc7301'>
<front>
<title>Transport Layer Security (TLS) Application-Layer Protocol Negotiation Extension</title>
<author initials='S.' surname='Friedl' fullname='S. Friedl'><organization /></author>
<author initials='A.' surname='Popov' fullname='A. Popov'><organization /></author>
<author initials='A.' surname='Langley' fullname='A. Langley'><organization /></author>
<author initials='E.' surname='Stephan' fullname='E. Stephan'><organization /></author>
<date year='2014' month='July' />
<abstract><t>This document describes a Transport Layer Security (TLS) extension for application-layer protocol negotiation within the TLS handshake. For instances in which multiple application protocols are supported on the same TCP or UDP port, this extension allows the application layer to negotiate which protocol will be used within the TLS connection.</t></abstract>
</front>
<seriesInfo name='RFC' value='7301'/>
<seriesInfo name='DOI' value='10.17487/RFC7301'/>
</reference>



<reference  anchor="RFC7231" target='http://www.rfc-editor.org/info/rfc7231'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines the semantics of HTTP/1.1 messages, as expressed by request methods, request header fields, response status codes, and response header fields, along with the payload of messages (metadata and body content) and mechanisms for content negotiation.</t></abstract>
</front>
<seriesInfo name='RFC' value='7231'/>
<seriesInfo name='DOI' value='10.17487/RFC7231'/>
</reference>



<reference  anchor="RFC7232" target='http://www.rfc-editor.org/info/rfc7232'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Conditional Requests</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application- level protocol for distributed, collaborative, hypertext information systems.  This document defines HTTP/1.1 conditional requests, including metadata header fields for indicating state changes, request header fields for making preconditions on such state, and rules for constructing the responses to a conditional request when one or more preconditions evaluate to false.</t></abstract>
</front>
<seriesInfo name='RFC' value='7232'/>
<seriesInfo name='DOI' value='10.17487/RFC7232'/>
</reference>



<reference  anchor="RFC7233" target='http://www.rfc-editor.org/info/rfc7233'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Range Requests</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='Y.' surname='Lafon' fullname='Y. Lafon' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application- level protocol for distributed, collaborative, hypertext information systems.  This document defines range requests and the rules for constructing and combining responses to those requests.</t></abstract>
</front>
<seriesInfo name='RFC' value='7233'/>
<seriesInfo name='DOI' value='10.17487/RFC7233'/>
</reference>



<reference  anchor="RFC7234" target='http://www.rfc-editor.org/info/rfc7234'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Caching</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines HTTP caches and the associated header fields that control cache behavior or indicate cacheable response messages.</t></abstract>
</front>
<seriesInfo name='RFC' value='7234'/>
<seriesInfo name='DOI' value='10.17487/RFC7234'/>
</reference>



<reference  anchor="RFC7235" target='http://www.rfc-editor.org/info/rfc7235'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Authentication</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application- level protocol for distributed, collaborative, hypermedia information systems.  This document defines the HTTP Authentication framework.</t></abstract>
</front>
<seriesInfo name='RFC' value='7235'/>
<seriesInfo name='DOI' value='10.17487/RFC7235'/>
</reference>



<reference  anchor="RFC7540" target='http://www.rfc-editor.org/info/rfc7540'>
<front>
<title>Hypertext Transfer Protocol Version 2 (HTTP/2)</title>
<author initials='M.' surname='Belshe' fullname='M. Belshe'><organization /></author>
<author initials='R.' surname='Peon' fullname='R. Peon'><organization /></author>
<author initials='M.' surname='Thomson' fullname='M. Thomson' role='editor'><organization /></author>
<date year='2015' month='May' />
<abstract><t>This specification describes an optimized expression of the semantics of the Hypertext Transfer Protocol (HTTP), referred to as HTTP version 2 (HTTP/2).  HTTP/2 enables a more efficient use of network resources and a reduced perception of latency by introducing header field compression and allowing multiple concurrent exchanges on the same connection.  It also introduces unsolicited push of representations from servers to clients.</t><t>This specification is an alternative to, but does not obsolete, the HTTP/1.1 message syntax.  HTTP's existing semantics remain unchanged.</t></abstract>
</front>
<seriesInfo name='RFC' value='7540'/>
<seriesInfo name='DOI' value='10.17487/RFC7540'/>
</reference>



<reference  anchor="RFC7320" target='http://www.rfc-editor.org/info/rfc7320'>
<front>
<title>URI Design and Ownership</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<date year='2014' month='July' />
<abstract><t>Section 1.1.1 of RFC 3986 defines URI syntax as &quot;a federated and extensible naming system wherein each scheme's specification may further restrict the syntax and semantics of identifiers using that scheme.&quot;  In other words, the structure of a URI is defined by its scheme.  While it is common for schemes to further delegate their substructure to the URI's owner, publishing independent standards that mandate particular forms of URI substructure is inappropriate, because that essentially usurps ownership.  This document further describes this problematic practice and provides some acceptable alternatives for use in standards.</t></abstract>
</front>
<seriesInfo name='BCP' value='190'/>
<seriesInfo name='RFC' value='7320'/>
<seriesInfo name='DOI' value='10.17487/RFC7320'/>
</reference>



<reference  anchor="RFC6838" target='http://www.rfc-editor.org/info/rfc6838'>
<front>
<title>Media Type Specifications and Registration Procedures</title>
<author initials='N.' surname='Freed' fullname='N. Freed'><organization /></author>
<author initials='J.' surname='Klensin' fullname='J. Klensin'><organization /></author>
<author initials='T.' surname='Hansen' fullname='T. Hansen'><organization /></author>
<date year='2013' month='January' />
<abstract><t>This document defines procedures for the specification and registration of media types for use in HTTP, MIME, and other Internet protocols.  This memo documents an Internet Best Current Practice.</t></abstract>
</front>
<seriesInfo name='BCP' value='13'/>
<seriesInfo name='RFC' value='6838'/>
<seriesInfo name='DOI' value='10.17487/RFC6838'/>
</reference>



<reference  anchor="RFC5988" target='http://www.rfc-editor.org/info/rfc5988'>
<front>
<title>Web Linking</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<date year='2010' month='October' />
<abstract><t>This document specifies relation types for Web links, and defines a registry for them.  It also defines the use of such links in HTTP headers with the Link header field.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5988'/>
<seriesInfo name='DOI' value='10.17487/RFC5988'/>
</reference>



<reference  anchor="RFC7595" target='http://www.rfc-editor.org/info/rfc7595'>
<front>
<title>Guidelines and Registration Procedures for URI Schemes</title>
<author initials='D.' surname='Thaler' fullname='D. Thaler' role='editor'><organization /></author>
<author initials='T.' surname='Hansen' fullname='T. Hansen'><organization /></author>
<author initials='T.' surname='Hardie' fullname='T. Hardie'><organization /></author>
<date year='2015' month='June' />
<abstract><t>This document updates the guidelines and recommendations, as well as the IANA registration processes, for the definition of Uniform Resource Identifier (URI) schemes.  It obsoletes RFC 4395.</t></abstract>
</front>
<seriesInfo name='BCP' value='35'/>
<seriesInfo name='RFC' value='7595'/>
<seriesInfo name='DOI' value='10.17487/RFC7595'/>
</reference>



<reference  anchor="RFC3864" target='http://www.rfc-editor.org/info/rfc3864'>
<front>
<title>Registration Procedures for Message Header Fields</title>
<author initials='G.' surname='Klyne' fullname='G. Klyne'><organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<author initials='J.' surname='Mogul' fullname='J. Mogul'><organization /></author>
<date year='2004' month='September' />
<abstract><t>This specification defines registration procedures for the message header fields used by Internet mail, HTTP, Netnews and other applications.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='90'/>
<seriesInfo name='RFC' value='3864'/>
<seriesInfo name='DOI' value='10.17487/RFC3864'/>
</reference>




    </references>

    <references title='Informative References'>





<reference  anchor="RFC0854" target='http://www.rfc-editor.org/info/rfc854'>
<front>
<title>Telnet Protocol Specification</title>
<author initials='J.' surname='Postel' fullname='J. Postel'><organization /></author>
<author initials='J.K.' surname='Reynolds' fullname='J.K. Reynolds'><organization /></author>
<date year='1983' month='May' />
<abstract><t>This is the specification of the Telnet protocol used for remote    terminal access in the ARPA Internet.  The purpose of the TELNET    Protocol is to provide a fairly general, bi-directional, eight-bit    byte oriented communications facility.  Its primary goal is to allow    a standard method of interfacing terminal devices and    terminal-oriented processes to each other.  It is envisioned that the    protocol may also be used for terminal-terminal communication    (&quot;linking&quot;) and process-process communication (distributed    computation).   This RFC specifies a standard for the ARPA Internet    community.  Hosts on the ARPA Internet are expected to adopt and    implement this standard.  Obsoletes NIC 18639.</t></abstract>
</front>
<seriesInfo name='STD' value='8'/>
<seriesInfo name='RFC' value='854'/>
<seriesInfo name='DOI' value='10.17487/RFC0854'/>
</reference>



<reference  anchor="RFC0959" target='http://www.rfc-editor.org/info/rfc959'>
<front>
<title>File Transfer Protocol</title>
<author initials='J.' surname='Postel' fullname='J. Postel'><organization /></author>
<author initials='J.' surname='Reynolds' fullname='J. Reynolds'><organization /></author>
<date year='1985' month='October' />
<abstract><t>This memo is the official specification of the File Transfer Protocol    (FTP) for the DARPA Internet community.  The primary intent is to    clarify and correct the documentation of the FTP specification, not to    change the protocol.  The following new optional commands are included    in this edition of the specification:  Change to Parent Directory    (CDUP), Structure Mount (SMNT), Store Unique (STOU), Remove Directory    (RMD), Make Directory (MKD), Print Directory (PWD), and System (SYST).    Note that this specification is compatible with the previous edition.</t></abstract>
</front>
<seriesInfo name='STD' value='9'/>
<seriesInfo name='RFC' value='959'/>
<seriesInfo name='DOI' value='10.17487/RFC0959'/>
</reference>



<reference  anchor="RFC2821" target='http://www.rfc-editor.org/info/rfc2821'>
<front>
<title>Simple Mail Transfer Protocol</title>
<author initials='J.' surname='Klensin' fullname='J. Klensin' role='editor'><organization /></author>
<date year='2001' month='April' />
<abstract><t>This document is a self-contained specification of the basic protocol for the Internet electronic mail transport.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='2821'/>
<seriesInfo name='DOI' value='10.17487/RFC2821'/>
</reference>



<reference  anchor="RFC6455" target='http://www.rfc-editor.org/info/rfc6455'>
<front>
<title>The WebSocket Protocol</title>
<author initials='I.' surname='Fette' fullname='I. Fette'><organization /></author>
<author initials='A.' surname='Melnikov' fullname='A. Melnikov'><organization /></author>
<date year='2011' month='December' />
<abstract><t>The WebSocket Protocol enables two-way communication between a client running untrusted code in a controlled environment to a remote host that has opted-in to communications from that code.  The security model used for this is the origin-based security model commonly used by web browsers.  The protocol consists of an opening handshake followed by basic message framing, layered over TCP.  The goal of this technology is to provide a mechanism for browser-based applications that need two-way communication with servers that does not rely on opening multiple HTTP connections (e.g., using XMLHttpRequest or &lt;iframe&gt;s and long polling).  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6455'/>
<seriesInfo name='DOI' value='10.17487/RFC6455'/>
</reference>



<reference  anchor="RFC0793" target='http://www.rfc-editor.org/info/rfc793'>
<front>
<title>Transmission Control Protocol</title>
<author initials='J.' surname='Postel' fullname='J. Postel'><organization /></author>
<date year='1981' month='September' />
</front>
<seriesInfo name='STD' value='7'/>
<seriesInfo name='RFC' value='793'/>
<seriesInfo name='DOI' value='10.17487/RFC0793'/>
</reference>



<reference  anchor="RFC7159" target='http://www.rfc-editor.org/info/rfc7159'>
<front>
<title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
<author initials='T.' surname='Bray' fullname='T. Bray' role='editor'><organization /></author>
<date year='2014' month='March' />
<abstract><t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t><t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t></abstract>
</front>
<seriesInfo name='RFC' value='7159'/>
<seriesInfo name='DOI' value='10.17487/RFC7159'/>
</reference>



<reference  anchor="RFC5785" target='http://www.rfc-editor.org/info/rfc5785'>
<front>
<title>Defining Well-Known Uniform Resource Identifiers (URIs)</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<author initials='E.' surname='Hammer-Lahav' fullname='E. Hammer-Lahav'><organization /></author>
<date year='2010' month='April' />
<abstract><t>This memo defines a path prefix for &quot;well-known locations&quot;, &quot;/.well-known/&quot;, in selected Uniform Resource Identifier (URI) schemes.   [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5785'/>
<seriesInfo name='DOI' value='10.17487/RFC5785'/>
</reference>



<reference  anchor="RFC7258" target='http://www.rfc-editor.org/info/rfc7258'>
<front>
<title>Pervasive Monitoring Is an Attack</title>
<author initials='S.' surname='Farrell' fullname='S. Farrell'><organization /></author>
<author initials='H.' surname='Tschofenig' fullname='H. Tschofenig'><organization /></author>
<date year='2014' month='May' />
<abstract><t>Pervasive monitoring is a technical attack that should be mitigated in the design of IETF protocols, where possible.</t></abstract>
</front>
<seriesInfo name='BCP' value='188'/>
<seriesInfo name='RFC' value='7258'/>
<seriesInfo name='DOI' value='10.17487/RFC7258'/>
</reference>



<reference  anchor="RFC6265" target='http://www.rfc-editor.org/info/rfc6265'>
<front>
<title>HTTP State Management Mechanism</title>
<author initials='A.' surname='Barth' fullname='A. Barth'><organization /></author>
<date year='2011' month='April' />
<abstract><t>This document defines the HTTP Cookie and Set-Cookie header fields. These header fields can be used by HTTP servers to store state (called cookies) at HTTP user agents, letting the servers maintain a stateful session over the mostly stateless HTTP protocol.  Although cookies have many historical infelicities that degrade their security and privacy, the Cookie and Set-Cookie header fields are widely used on the Internet.  This document obsoletes RFC 2965.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6265'/>
<seriesInfo name='DOI' value='10.17487/RFC6265'/>
</reference>



<reference  anchor="RFC7617" target='http://www.rfc-editor.org/info/rfc7617'>
<front>
<title>The 'Basic' HTTP Authentication Scheme</title>
<author initials='J.' surname='Reschke' fullname='J. Reschke'><organization /></author>
<date year='2015' month='September' />
<abstract><t>This document defines the &quot;Basic&quot; Hypertext Transfer Protocol (HTTP) authentication scheme, which transmits credentials as user-id/ password pairs, encoded using Base64.</t></abstract>
</front>
<seriesInfo name='RFC' value='7617'/>
<seriesInfo name='DOI' value='10.17487/RFC7617'/>
</reference>



<reference  anchor="RFC4791" target='http://www.rfc-editor.org/info/rfc4791'>
<front>
<title>Calendaring Extensions to WebDAV (CalDAV)</title>
<author initials='C.' surname='Daboo' fullname='C. Daboo'><organization /></author>
<author initials='B.' surname='Desruisseaux' fullname='B. Desruisseaux'><organization /></author>
<author initials='L.' surname='Dusseault' fullname='L. Dusseault'><organization /></author>
<date year='2007' month='March' />
<abstract><t>This document defines extensions to the Web Distributed Authoring and Versioning (WebDAV) protocol to specify a standard way of accessing, managing, and sharing calendaring and scheduling information based on the iCalendar format.  This document defines the &quot;calendar-access&quot; feature of CalDAV.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4791'/>
<seriesInfo name='DOI' value='10.17487/RFC4791'/>
</reference>




    </references>


<section anchor="changes-from-rfc3205" title="Changes from RFC3205">

<t>RFC3205 captured the Best Current Practice in the early 2000’s, based on the concerns facing
protocol designers at the time. Use of HTTP has changed considerably since then, and as a result
this document is substantially different. As a result, the changes are too numerous to list
individually.</t>

</section>


  </back>

<!-- ##markdown-source:
H4sIAMFRGlkAA7Vca3PbyHL9Pr8C4X6wdENRsmyvbSmVjdb23lXihyLJ2Uql
UvYQGJK4BgFeDCCZce1/T5/unsGA0sq3biX7wSuS4Dy6e06ffgwPDg5MV3aV
O8k+1Fm3clnvXdYssl+vry8y6zObXfVz37W2c6Zo8tqu6dGitYvuoG66rqyX
K7s+mOebZz/OS39w9NgU9OhJdnz0+LnJ6c9l025PMnrANHPfVK5z/iR7cnz0
zJhy055kXdv77vjo6OXRsbGtsyfZn13tWluZ26b9smybfnNivrgtvSpOsvO6
c23tuoPXWMLwPpY7vPrNzYcXPq7f+M7WxSdbNTWtcOu82ZQn2X91TT7N6J+y
LlzdTTPftF3rFp7+2q71j64tc/oob9Ybq3+s6WH6qKyrsnb/bYztu1XTnpjs
wGT0X1nTPt/NsvdRSvy2CPCdbb/sftK0S1uX/2O7sqlP+B23tmV1kq1J0P+C
f2a0cf6gb2ndq67b+JPDw9vb21n49NAYc3BwkFnect4Zw3osPam0czWUW4hW
o1SyRdNmDWm+zexmU5U5LyDbtA2JpKn8LLte0fdJ9z12nPmNy8tF6Xw2d74z
G0xT5vQS49AwZD7xu49Sa5rp2mip7tN7/NM1ny6dLVzrPxlzTbZXet/TSFXp
Ox0OM0PTWW5rmpDe7WvaQZf9U9j+suxW/XxGCjmEFA7PD14fVnbuKn8YrPKf
ZzL8uqFxW5djG3sskGnW15t+ThOuXLGvU9Gc6QQsW52lbHj8MPAhRr6UAfOV
rZe0eLJh3oD7/jJhRGXnD5erg42l744WzLJal0VRkeH+AMNvm6LPoRzV6rdv
/3D5y6vnx0+Ofv/9/0LFrOVanrbmxral67bQHp1K39Rs63nVF2SzJ8b8KVvY
dVmV9Bg9Nd9m5XpTOZgI6XMazQR/22Jd1iWvpcHrwt24qtnQZxmdR6yY3qUB
7Q3Zu53ToDKvzZJF5FUpp9O1N9gIfZE28DWZl3fFA9F62exoZLzs5+Vfex2T
oCGbt81tmLN1aqLuK62QtpatHVRZ+jUM8YvLcK5p9CA1TOzqvN1u8BJDbFoy
+jofYFOWKJuTZZNwCV1tu3Qd7X5TNVtFD3qERiAjyMK+u4Yg0eL7pImydbe2
Ig2JAQf0Y/jpazy+YlUToi3xtaLkNdJCgnJlgyRzy5ub2/wLTzEg/bWrgCvf
vv1E1nT04tlTsqZ77OcXtjh+5uWzl3iGdnf1Lr57/OL48e+/z7Jfm1tSbzvN
Krt1Leas3a2JtpY10B6LaY5PPW++ua1Jah2WIxjABna1avqKjLkemW3vMSiP
ULgFYS8tlabIPl6+zXy+IlP4KftIW8N7G4Jy/9MwVNnxrtkP2LaQUdaOgLsQ
ddEnXe9JvoUj7dC2dQoMRmeDx6IdMhxBhmv7tVz3azLUqncAKPeVgZfO4KJt
1rseNXy9aBw2TvOw2WW3hA56QulpHy2JIMDxSSIj2A62SwJIF1LCLHCegg2R
tOd0JmRLk2gKBYEt2W7hJ1ipvWnKwhU/wbRSgM8bOkrkvRjfs7xvW7w74Hzr
liQ66GCXLhAIJIryuqGOTpNJlz4jiwFKkQ2JdH12uyKsHH231Nf0Ydec0jdg
Nzelu6Vv+Z7O19bz/BveeEfPmbCMjgcjGCZkIP1bWj1ZPJ9S+h6fORpvvqGR
aK88Em9115U1tLV0TYYHLhres3q0c3YXt4SBwN5NW64JsSo+xcuexJudv7n+
JXOLBQxxms37jjB9uepYATI2aQroIMLyZdfLbMwcnMyJjbaOMKxloPMZPero
O7QW8iVknLRoLxNj0G044Qq0rFaSzhLEqsxFSmSorvY8E/mXHzAbT2yr7BWk
UsueGXeIS2UgUz6bvPt4dT2Zyv+z9x/478s3//7x/PLNa/x99evZ27fxj/DE
1a8fPr59Pfwl7xv65qsP7969ef9avvzu7D8nop/Jh4vr8w/vz95OGDlHBgrV
0gbnTgyfFNuJy6Mzm7flnF6UtRHvePz4MWEV3Cm5UC87/9nBeAkiip+ybz+w
JRrzulwsHFv6yAxXhMRZET9bNraCtboUhmaEy+MlTrNbAhlL2qhNCl30yKfh
e59kIFuzY4K+Fk1VNbf4nAxTsFwIBZFkx5AIbRDA1B6WzfAG+cAgaewXR0Cs
p0+fTPXJARKzCYjIBJ/zXwQB9AXsPTx79vbi/eA1zl8HevHkiGBdvnT4ePYY
alod60DH+TAMvaMjrWGMS/Yaa9uN1UKjDpyFFH1I48hbz57yW60TBkOPkgz+
0tfMeAQgIaLzs/dngCDQCYCDIEjBR1bP5G8i1WxH8oPgycSqKsh8dK70PTaT
KAtP3MFle5H8GJxinLuqJPpGc5MxplxsOrx6PHp1PHr1ZPSKvO7UxFfP1L/q
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
5dR4W+ltw+ACxreTxmQXDkDKx+bhxt7U0K+kBfEVekm/b+0MjL13d0w7vRoo
zTy85diYWgczTh+Mthzq7Wp6e4QMqZb27xi2GQy7ZcOm0Ktcl5WI8/6J1BDu
Ozf3TWgeMunsD026ediqHzSttB3077MvyYv//9oXrhJ+176uEuk/iqW8WIOR
ThUNaHaaDgMJS65SpN2UJnRTitQf7kljinNvH+LdElohd8ooTE6C/ja0I0Yy
PV7ojt2f10nUfF+eJYmpU21Ln1VcP1CWiXsd01ukE07l3bkzt7Ltmrz2VGNR
72L56k7fbloRR4BE9tAygoeyuSZnk/l2Ofudru41Us99CytZ35VyWv5MWj1H
/CLNsNw5uVPuDDfliJnNEd9tQo25bJMbW6zwbTrZTku5Dr5ZtRyO875Bh4vT
mDONH7Na6iYx25CW1FiJpdxbrkcOflDvZXAxZCf0QjfVdiMO7Y9Fxb0DIdq/
z77vydKGaAnVA6M8+L4iU4ihEiHjuI6L5cPVG+YEXC5BwmBSWdJ+u+XfcJjw
TfqAkDtaK/mSoVztVSGjGYIMVaIO7bgR4EqzIdI/Kv1E/FMXHE/eSKcsF09P
tf0p3PdYMHpyKGb0Rw80IQAuKp3AIUCQSI0htJbg6vPTo+fZBX9tJ4S5VPgd
Lg/wDTtTpklmxmkIh28Nhcx7+DmGmDoOvS6Y7/hldt1QkIUc0qVGH6MLClfx
kLIA7jsWoaBBoMV2p1d1vMXlgdARwXELrhRId7hYLedyTMzxhV9gGMLv4OG4
yVw6KhLXd7fRP6mf75UzN5uaheV2wtHPKQQs+lwfHX0en/mQyEz2d5oJs/v8
9OXLz2Gv2Fy1NbIuTgSS7miweQzKMr2DjvtatOdmWZd8pWY/JTy/ynn4hc8D
RaSh2PrdmDT5sYP7Dta4JcgWN9oLPLruaq60BP5i9mT2eIwGCQCMhuYcZdK/
xHdDFrSKpGs2XvwK96DLNnYaSsyIQDq0+sXLBtne7arRavb4Iir5qVAhZkiR
/NBhuMb8R8M/eO0hhs7atZGOeX5vxjOEdt14xruIl+31vrdyB0t6/GJFfrgm
w+lEsYZz9NfVaTDbULgariXiVwKmMZ4cVQJpkXArSZO2xmhjlYUMysBYk/J+
En4M15ifvPjxKXo0wq8m3GkDHy0DeV6+g+RXANg9vj7FF5C4g+M4PA3MxP0X
5QplbaT1V1uB2bTq2GG9L/dfRuXu4HP4TmXKbRh3d2RjRv1zI47INemhejdk
pe7pCIPmwJVAvb4GBJGpzLD/aWSthbT8Tw4m+lMwI3yJzO2eo5XmUOIVlCK2
n3OxOdIMzcm1sXUgtpjwPTLlzOGqCKHhQmwO7T4P3gQfTr7RWuSo9we7//y2
kYc/hx0klJG8b8IYbZa7FoWd4aKU3kuR5JsUpUa53KF9cCwecRG2bbfjMlMX
Gl+nM4ockZ3b11+RwHXjcX5w9xdUlFON5l/oTWWkc/8oz2jMsIGi9Hnvvd6a
HTKYIsiYOEzakMLtr+C+ILzddJNkQrTXznOPXsgyzXh2KXb8HtbuR/3YnHTz
nHXTSjBWKaGaT3shh+ycXNUIdQPzUN1gJj95BZcKGb3S39PiPlmgB/9knP6B
ZJu003FuEQ0mr/SHai6SSypcuEJ8mB0fHR09Qks1NzQ1MeggO0L+2Ob8YwTD
D+Wgf5a77sQ2wRRnaSso61iuzxdDJWYONAnURnsDrdwLwa1NM/4dE+56nCPM
0Pg7ejuu64dvKbtLfl6sI25VI7JBazKuu9GRNWhfuCkLdhHcfPu/ay408NtP
AAA=

-->

</rfc>

