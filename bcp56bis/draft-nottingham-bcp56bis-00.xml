<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.0.40 -->

<!DOCTYPE rfc SYSTEM "../Tools/rfc2629xslt/rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc tocindent="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc strict="yes"?>
<?rfc compact="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>

<rfc ipr="trust200902" docName="draft-nottingham-bcp56bis-00" category="bcp" obsoletes="3205">

  <front>
    <title>On the use of HTTP as a Substrate</title>

    <author initials="M." surname="Nottingham" fullname="Mark Nottingham">
      <organization></organization>
      <address>
        <email>mnot@mnot.net</email>
        <uri>https://www.mnot.net/</uri>
      </address>
    </author>

    <date year="2017"/>

    <area>General</area>
    
    <keyword>substrate</keyword>

    <abstract>


<t>HTTP is often used as a substrate for other application protocols. This document specifies best
practices for these protocols’ use of HTTP.</t>



    </abstract>


    <note title="Note to Readers">


<t>The issues list for this draft can be found at <eref target="https://github.com/mnot/I-D/labels/bcp56bis">https://github.com/mnot/I-D/labels/bcp56bis</eref>.</t>

<t>The most recent (often, unpublished) draft is at <eref target="https://mnot.github.io/I-D/bcp56bis/">https://mnot.github.io/I-D/bcp56bis/</eref>.</t>

<t>Recent changes are listed at <eref target="https://github.com/mnot/I-D/commits/gh-pages/bcp56bis">https://github.com/mnot/I-D/commits/gh-pages/bcp56bis</eref>.</t>


    </note>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>HTTP <xref target="RFC7230"/> is often used as a substrate for other application protocols. This is done for a
variety of reasons:</t>

<t><list style="symbols">
  <t>familiarity by implementers, specifiers, administrators, developers and users;</t>
  <t>availability of a variety of client, server and proxy implementations;</t>
  <t>ease of use;</t>
  <t>ubiquity of Web browsers;</t>
  <t>reuse of existing mechanisms like authentication and encryption;</t>
  <t>presence of HTTP servers and clients in target deployments, and</t>
  <t>its ability to traverse firewalls.</t>
</list></t>

<t>The Internet community has a long tradition of protocol reuse, dating back to the use of Telnet
<xref target="RFC0854"/> as a substrate for FTP <xref target="RFC0959"/> and SMTP <xref target="RFC2821"/>. However, layering new
protocols over HTTP brings its own set of issues:</t>

<t><list style="symbols">
  <t>Should an application using HTTP define a new URL scheme? Use new ports?</t>
  <t>Should it use standard HTTP methods and status codes, or define new ones?</t>
  <t>How can the maximum value be extracted from the use of HTTP?</t>
  <t>How can interoperability problems and “protocol dead ends” be avoided?</t>
</list></t>

<t>This document contains best current practices regarding these issues in the use of HTTP by
applications other than Web browsing. <xref target="used"/> defines what applications it applies to;
<xref target="overview"/> surveys the properties of HTTP that are important to preserve, and <xref target="bp"/> conveys best
practices for those applications that do use HTTP.</t>

<t>It is written primarily to guide IETF efforts, but might be applicable in other situations.</t>

<section anchor="notational-conventions" title="Notational Conventions">

<t>The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”,
“RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in
<xref target="RFC2119"/>.</t>

</section>
</section>
<section anchor="used" title="Is HTTP Being Used?">

<t>Different applications have different goals when using HTTP. In this document, we say an
application is <spanx style="emph">using HTTP</spanx> when any of the following conditions are true:</t>

<t><list style="symbols">
  <t>The transport port (or default port) is 80 or 443,</t>
  <t>The URL scheme is “http” or “https”,</t>
  <t>The ALPN protocol ID <xref target="RFC7301"/> is “http/1.1”, “h2” or “h2c”, or</t>
  <t>The message formats described in <xref target="RFC7320"/> and/or <xref target="RFC7540"/> are used in conjunction with the IANA registries defined for HTTP.</t>
</list></t>

<t>When an application is using HTTP, all of the requirements of the HTTP protocol suite (including
but not limited to <xref target="RFC7320"/>, <xref target="RFC7321"/>, <xref target="RFC7322"/>, <xref target="RFC7233"/>, <xref target="RFC7234"/>,
<xref target="RFC7325"/> and <xref target="RFC7540"/>) are in force.</t>

<t>An application might not be <spanx style="emph">using HTTP</spanx> according to this definition, but still relying upon the
HTTP specifications in some manner. For example, an application might wish to avoid re-specifying
parts of the message format, but change others; or, it might want to use a different set of methods.</t>

<t>Such applications are referred to as <spanx style="emph">protocols based upon HTTP</spanx> in this document. These have more
freedom to modify protocol operation, but are also likely to lose at least a portion of the
benefits outlined above, as most HTTP implementations won’t be easily adaptable to these changes,
and as the protocol diverges from HTTP, the benefit of mindshare will be lost.</t>

<t>Protocols that are based upon HTTP MUST NOT reuse HTTP’s URL schemes, transport ports, ALPN
protocol IDs or IANA registries; rather, they are encouraged to establish their own.</t>

</section>
<section anchor="overview" title="What’s Important About HTTP">

<t>There are many ways that HTTP applications are defined and deployed, and sometimes they are brought
to the IETF for standardisation. In that process, what might be workable for deployment in a
limited fashion isn’t appropriate for standardisation and the corresponding broader deployment.
This section examines the facets of the protocol that are important to preserve in these situations.</t>

<section anchor="generic-semantics" title="Generic Semantics">

<t>When writing an application’s specification, it’s often tempting to specify exactly how HTTP is to
be implemented, supported and used.</t>

<t>However, this can easily lead to an unintended profile of HTTP’s behaviour. For example, it’s
common to see specifications with language like this:</t>

<figure><artwork><![CDATA[
A `200 OK` response means that the widget has successfully been updated.
]]></artwork></figure>

<t>This sort of specification is bad practice, because it is adding new semantics to HTTP’s status
codes and methods, respectively; a recipient – whether it’s an origin server, client library,
intermediary or cache – now has to know these extra semantics to understand the message.</t>

<t>Some applications even require specific behaviours, such as:</t>

<figure><artwork><![CDATA[
A `POST` request MUST result in a `201 Created` response.
]]></artwork></figure>

<t>This forms an expectation in the client that the response will always be <spanx style="verb">201 Created</spanx>, when in
fact there are a number of reasons why the status code might differ in a real deployment. If the
client does not anticipate this, the application’s deployment is brittle.</t>

<t>Much of the value of HTTP is in its <spanx style="emph">generic semantics</spanx> – that is, the protocol elements defined
by HTTP are potentially applicable to every resource, not specific to a particular context.
Application-specific semantics are expressed in the payload; mostly, in the body, but also in
header fields.</t>

<t>This allows a HTTP message to be examined by generic HTTP software, and its handling to be
correctly determined. It also allows people to leverage their knowledge of HTTP semantics without
special-casing them for a particular application.</t>

<t>Therefore, applications that use HTTP MUST NOT re-define, refine or overlay the semantics of
defined protocol elements. Instead, they SHOULD focus their specifications on protocol elements
that are specific to them; namely their HTTP resources.</t>

<t>See <xref target="resource"/> for details.</t>

</section>
<section anchor="links" title="Links">

<t>Another common practice is assuming that the HTTP server’s name space (or a portion thereof) is
exclusively for the use of a single application. This effectively overlays special,
application-specific semantics onto that space, precludes other applications from using it.</t>

<t>As explained in <xref target="RFC7320"/>, such “squatting” on a part of the URL space by a standard usurps the
server’s authority over its own resources, can cause deployment issues, and is therefore bad
practice in standards.</t>

<t>Instead of statically defining URL paths, applications are encouraged to define links in payloads,
to allow flexibility in deployment. For example, navigating with a link allows a request to be
routed to a different server without the overhead of a redirection, thereby supporting deployment
across machines well.</t>

</section>
<section anchor="http-capabilities" title="HTTP Capabilities">

<t>The simplest possible use of HTTP is to POST data to a single URL, thereby effectively tunnelling
through the protocol.</t>

<t>This “RPC” style of communication does get some benefit from using HTTP – namely, message framing and the availability of implementations – but fails to realise many others:</t>

<t><list style="symbols">
  <t>Caching for server scalability, latency and bandwidth reduction, and reliability;</t>
  <t>Authentication and access control;</t>
  <t>Automatic redirection;</t>
  <t>Partial content to selectively request part of a response;</t>
  <t>Natural support for extensions and versioning through protocol extension; and</t>
  <t>The ability to interact with the application easily using a Web browser.</t>
</list></t>

<t>Using such a high-level protocol to tunnel simple semantics has downsides too; because of its more
advanced capabilities, breadth of deployment and age, HTTP’s complexity can cause interoperability
problems that could be avoided by using a simpler substrate (e.g., WebSockets <xref target="RFC6455"/>, if
browser support is necessary, or TCP <xref target="RFC0793"/> if not), or making the application be <spanx style="emph">based upon
HTTP</spanx>, instead of using it (as defined in <xref target="used"/>).</t>

<t>Applications that use HTTP are encouraged to accommodate the various features that the protocol
offers, so that their users receive the maximum benefit from it. This document does not require
specific features to be used, since the appropriate design tradeoffs are highly specific to a given
situation. However, following the practices in <xref target="bp"/> will help make them available.</t>

</section>
</section>
<section anchor="bp" title="Best Practices for Using HTTP">

<t>This section contains best practices regarding the use of HTTP by applications, including practices
for specific HTTP protocol elements.</t>

<section anchor="specifying-the-use-of-http" title="Specifying the Use of HTTP">

<t>When specifying the use of HTTP, an application SHOULD use <xref target="RFC7230"/> as the primary reference,
MAY specify a minimum version to be supported (HTTP/1.1 is suggested), and SHOULD NOT specify a
maximum version.</t>

<t>Likewise, applications need not specify what HTTP mechanisms – such as redirection, caching,
authentication, proxy authentication, and so on – are to be supported. Full featured support for
HTTP SHOULD be taken for granted in servers and clients, and the application’s function SHOULD
degrade gracefully if they are not (although this might be achieved by informing the user that
their task cannot be completed).</t>

<t>For example, an application can specify that it uses HTTP like this:</t>

<figure><artwork><![CDATA[
Foo Application uses HTTP {{RFC7230}}. Implementations MUST support 
HTTP/1.1, and MAY support later versions. Support for common HTTP 
mechanisms such as redirection and caching are assumed.
]]></artwork></figure>

</section>
<section anchor="resource" title="Defining HTTP Resources">

<t>HTTP Applications SHOULD focus on defining the following application-specific protocol elements:</t>

<t><list style="symbols">
  <t>Media types <xref target="RFC6838"/>, often based upon a format convention such as JSON <xref target="RFC7159"/>,</t>
  <t>HTTP header fields, as per <xref target="headers"/>, and</t>
  <t>The behaviour of resources, as identified by link relations <xref target="RFC5988"/>.</t>
</list></t>

<t>By composing these protocol elements, an application can define a set of resources, identified by
link relations, that implement specified behaviours, including:</t>

<t><list style="symbols">
  <t>Retrieval of their state using GET, in one or more formats identified by media type;</t>
  <t>Resource creation or update using POST or PUT, with an appropriately identified request body format;</t>
  <t>Data processing using POST and identified request and response body format(s); and</t>
  <t>Resource deletion using DELETE.</t>
</list></t>

<t>For example, an application could specify:</t>

<figure><artwork><![CDATA[
Resources linked to with the "example-widget" link relation type are
Widgets. The state of a Widget can be fetched in the
"application/example-widget+json" format, and can be updated by PUT
to the same link. Widget resources can be deleted.

The "Example-Count" response header field on Widget representations
indicates how many Widgets are held by the sender.

The "application/example-widget+json" format is a JSON {{RFC7159}}
format representing the state of a Widget. It contains links to
related information in the link indicated by the Link header field
value with the "example-other-info" link relation type.
]]></artwork></figure>

</section>
<section anchor="url-schemes" title="URL Schemes">

<t>Applications that use HTTP MUST use the “http” and/or “https” URL schemes.</t>

<t>Using other schemes to denote an application using HTTP makes it more difficult to use with
existing implementations (e.g., Web browsers), and is likely to fail to meet the requirements of
<xref target="RFC7595"/>.</t>

<t>If it is necessary to advertise the application in use, this SHOULD be done in message payloads,
not the URL scheme.</t>

</section>
<section anchor="transport-ports" title="Transport Ports">

<t>Applications that use HTTP SHOULD use the default port for the URL scheme in use. If it is felt
that networks might need to distinguish the application’s traffic for operational reasons, it MAY
register a separate port, but be aware that this has privacy implications for that protocol’s users.</t>

</section>
<section anchor="http-urls" title="HTTP URLs">

<t>In HTTP, URLs are opaque identifiers under the control of the server. As outlined in <xref target="RFC7320"/>,
standards cannot usurp this space, since it might conflict with existing resources, and constrain
implementation and deployment.</t>

<t>In other words, applications that use HTTP MUST NOT associate application semantics with specific
URL paths. For example, specifying that a “GET to the URL /foo retrieves a bar document” is bad
practice. Likewise, specifying “The widget API is at the path /bar” violates <xref target="RFC7320"/>.</t>

<t>Instead, applications that use HTTP are encouraged to use typed links <xref target="RFC5988"/> to convey the
URIs that are in use, as well as the semantics of the resources that they identify.</t>

<section anchor="initial-url-discovery" title="Initial URL Discovery">

<t>Generally, a client with begin interacting with a given application server by requesting an initial
document that contains information about that particular deployment, potentially including links to
other relevant resources.</t>

<t>Applications that use HTTP SHOULD allow an arbitrary URL as that entry point. For example, rather
than specifying “the initial document is at “/foo/v1”, they should allow a deployment to give an
arbitrary URL as the entry point for the application.</t>

<t>In cases where doing so is impractical (e.g., it is not possible to convey a whole URL, but only a
hostname) applications that use HTTP MAY define a well-known URL <xref target="RFC5785"/> as an entry point to
their operation.</t>

</section>
</section>
<section anchor="http-methods" title="HTTP Methods">

<t>Applications that use HTTP are encouraged to use existing HTTP methods.</t>

<t>New HTTP methods are rare; they are required to be registered with IETF Review (see <xref target="RFC7232"/>),
and are also required to be <spanx style="emph">generic</spanx>. That means that they need to be potentially applicable to
all resources, not just those of one application.</t>

<t>While historically some applications (e.g., <xref target="RFC6352"/> and <xref target="RFC4791"/>) have defined non-generic
methods, <xref target="RFC7231"/> now forbids this.</t>

<t>This means that, typically, applications will use GET, POST, PUT, DELETE, PATCH, and other
registered methods.</t>

<t>When it is believed that a new method is required, authors are encouraged to engage with the HTTP
community early, and document their proposal as a separate HTTP extension, rather than as part of
an application’s specification.</t>

</section>
<section anchor="http-status-codes" title="HTTP Status Codes">

<t>Applications that use HTTP are encouraged to use existing HTTP status codes.</t>

<t>As with methods, new HTTP status codes are rare, and required (by <xref target="RFC7231"/>) to be registered
with IETF review. Similarly, HTTP status codes are generic; they are required (by <xref target="RFC7231"/>) to
be potentially applicable to all resources, not just to those of one application.</t>

<t>When it is believed that a new status code is required, authors are encouraged to engage with the
HTTP community early, and document their proposal as a separate HTTP extension, rather than as part
of an application’s specification.</t>

<t>Status codes’ primary function is to convey HTTP semantics for the benefit of generic HTTP
software, not application-specific semantics. Therefore, applications SHOULD NOT specify additional
semantics or refine existing semantics for status codes.</t>

<t>In particular, specifying that a particular status code has a specific meaning in the context of an
application is harmful, as these are not generic semantics, since the consumer needs to be in the
context of the application to understand them.</t>

<t>Furthermore, applications using HTTP SHOULD NOT re-specify the semantics of HTTP status codes, even
if it is only by copying their definition. They MUST NOT require specific status phrases to be
used; the status phrase has no function in HTTP, and is not guaranteed to be preserved by
implementations.</t>

<t>Typically, applications using HTTP will convey application-specific information in the message body
and/or HTTP header fields, not the status code.</t>

<t>Specifications sometimes also create a “laundry list” of potential status codes, in an effort to be
helpful. The problem with doing so is that such a list is never complete; for example, if a network
proxy is interposed, the client might encounter a <spanx style="verb">407 Proxy Authentication Required</spanx> response; or,
if the server is rate limiting the client, it might receive a <spanx style="verb">429 Too Many Requests</spanx> response.</t>

<t>Since the list of HTTP status codes can be added to, it’s safer to refer to it directly, and point
out that clients SHOULD be able to handle all applicable protocol elements gracefully (i.e.,
falling back to the generic <spanx style="verb">n00</spanx> semantics of a given status code; e.g., <spanx style="verb">499</spanx> can be safely
handled as <spanx style="verb">400</spanx> by clients that don’t recognise it).</t>

</section>
<section anchor="headers" title="HTTP Header Fields">

<t>Applications that use HTTP MAY define new HTTP header fields, following the advice in <xref target="RFC7321"/>,
Section 8.3.1.</t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document has no requirements for IANA.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>TBD</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor='RFC7230' target='http://www.rfc-editor.org/info/rfc7230'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application-level protocol for distributed, collaborative, hypertext information systems.  This document provides an overview of HTTP architecture and its associated terminology, defines the &quot;http&quot; and &quot;https&quot; Uniform Resource Identifier (URI) schemes, defines the HTTP/1.1 message syntax and parsing requirements, and describes related security concerns for implementations.</t></abstract>
</front>
<seriesInfo name='RFC' value='7230'/>
<seriesInfo name='DOI' value='10.17487/RFC7230'/>
</reference>



<reference  anchor='RFC2119' target='http://www.rfc-editor.org/info/rfc2119'>
<front>
<title>Key words for use in RFCs to Indicate Requirement Levels</title>
<author initials='S.' surname='Bradner' fullname='S. Bradner'><organization /></author>
<date year='1997' month='March' />
<abstract><t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized. This document defines these words as they should be interpreted in IETF documents.  This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t></abstract>
</front>
<seriesInfo name='BCP' value='14'/>
<seriesInfo name='RFC' value='2119'/>
<seriesInfo name='DOI' value='10.17487/RFC2119'/>
</reference>



<reference  anchor='RFC7301' target='http://www.rfc-editor.org/info/rfc7301'>
<front>
<title>Transport Layer Security (TLS) Application-Layer Protocol Negotiation Extension</title>
<author initials='S.' surname='Friedl' fullname='S. Friedl'><organization /></author>
<author initials='A.' surname='Popov' fullname='A. Popov'><organization /></author>
<author initials='A.' surname='Langley' fullname='A. Langley'><organization /></author>
<author initials='E.' surname='Stephan' fullname='E. Stephan'><organization /></author>
<date year='2014' month='July' />
<abstract><t>This document describes a Transport Layer Security (TLS) extension for application-layer protocol negotiation within the TLS handshake. For instances in which multiple application protocols are supported on the same TCP or UDP port, this extension allows the application layer to negotiate which protocol will be used within the TLS connection.</t></abstract>
</front>
<seriesInfo name='RFC' value='7301'/>
<seriesInfo name='DOI' value='10.17487/RFC7301'/>
</reference>



<reference  anchor='RFC7320' target='http://www.rfc-editor.org/info/rfc7320'>
<front>
<title>URI Design and Ownership</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<date year='2014' month='July' />
<abstract><t>Section 1.1.1 of RFC 3986 defines URI syntax as &quot;a federated and extensible naming system wherein each scheme's specification may further restrict the syntax and semantics of identifiers using that scheme.&quot;  In other words, the structure of a URI is defined by its scheme.  While it is common for schemes to further delegate their substructure to the URI's owner, publishing independent standards that mandate particular forms of URI substructure is inappropriate, because that essentially usurps ownership.  This document further describes this problematic practice and provides some acceptable alternatives for use in standards.</t></abstract>
</front>
<seriesInfo name='BCP' value='190'/>
<seriesInfo name='RFC' value='7320'/>
<seriesInfo name='DOI' value='10.17487/RFC7320'/>
</reference>



<reference  anchor='RFC7321' target='http://www.rfc-editor.org/info/rfc7321'>
<front>
<title>Cryptographic Algorithm Implementation Requirements and Usage Guidance for Encapsulating Security Payload (ESP) and Authentication Header (AH)</title>
<author initials='D.' surname='McGrew' fullname='D. McGrew'><organization /></author>
<author initials='P.' surname='Hoffman' fullname='P. Hoffman'><organization /></author>
<date year='2014' month='August' />
<abstract><t>This document updates the Cryptographic Algorithm Implementation Requirements for the Encapsulating Security Payload (ESP) and Authentication Header (AH).  It also adds usage guidance to help in the selection of these algorithms.</t><t>ESP and AH protocols make use of various cryptographic algorithms to provide confidentiality and/or data origin authentication to protected data communications in the IP Security (IPsec) architecture.  To ensure interoperability between disparate implementations, the IPsec standard specifies a set of mandatory-to- implement algorithms.  This document specifies the current set of mandatory-to-implement algorithms for ESP and AH, specifies algorithms that should be implemented because they may be promoted to mandatory at some future time, and also recommends against the implementation of some obsolete algorithms.  Usage guidance is also provided to help the user of ESP and AH best achieve their security goals through appropriate choices of cryptographic algorithms.</t></abstract>
</front>
<seriesInfo name='RFC' value='7321'/>
<seriesInfo name='DOI' value='10.17487/RFC7321'/>
</reference>



<reference  anchor='RFC7322' target='http://www.rfc-editor.org/info/rfc7322'>
<front>
<title>RFC Style Guide</title>
<author initials='H.' surname='Flanagan' fullname='H. Flanagan'><organization /></author>
<author initials='S.' surname='Ginoza' fullname='S. Ginoza'><organization /></author>
<date year='2014' month='September' />
<abstract><t>This document describes the fundamental and unique style conventions and editorial policies currently in use for the RFC Series.  It captures the RFC Editor's basic requirements and offers guidance regarding the style and structure of an RFC.  Additional guidance is captured on a website that reflects the experimental nature of that guidance and prepares it for future inclusion in the RFC Style Guide.  This document obsoletes RFC 2223, &quot;Instructions to RFC Authors&quot;.</t></abstract>
</front>
<seriesInfo name='RFC' value='7322'/>
<seriesInfo name='DOI' value='10.17487/RFC7322'/>
</reference>



<reference  anchor='RFC7233' target='http://www.rfc-editor.org/info/rfc7233'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Range Requests</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='Y.' surname='Lafon' fullname='Y. Lafon' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application- level protocol for distributed, collaborative, hypertext information systems.  This document defines range requests and the rules for constructing and combining responses to those requests.</t></abstract>
</front>
<seriesInfo name='RFC' value='7233'/>
<seriesInfo name='DOI' value='10.17487/RFC7233'/>
</reference>



<reference  anchor='RFC7234' target='http://www.rfc-editor.org/info/rfc7234'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Caching</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines HTTP caches and the associated header fields that control cache behavior or indicate cacheable response messages.</t></abstract>
</front>
<seriesInfo name='RFC' value='7234'/>
<seriesInfo name='DOI' value='10.17487/RFC7234'/>
</reference>



<reference  anchor='RFC7325' target='http://www.rfc-editor.org/info/rfc7325'>
<front>
<title>MPLS Forwarding Compliance and Performance Requirements</title>
<author initials='C.' surname='Villamizar' fullname='C. Villamizar' role='editor'><organization /></author>
<author initials='K.' surname='Kompella' fullname='K. Kompella'><organization /></author>
<author initials='S.' surname='Amante' fullname='S. Amante'><organization /></author>
<author initials='A.' surname='Malis' fullname='A. Malis'><organization /></author>
<author initials='C.' surname='Pignataro' fullname='C. Pignataro'><organization /></author>
<date year='2014' month='August' />
<abstract><t>This document provides guidelines for implementers regarding MPLS    forwarding and a basis for evaluations of forwarding implementations.    Guidelines cover many aspects of MPLS forwarding.  Topics are    highlighted where implementers might otherwise overlook practical    requirements which are unstated or under emphasized or are optional    for conformance to RFCs but are often considered mandatory by    providers.</t></abstract>
</front>
<seriesInfo name='RFC' value='7325'/>
<seriesInfo name='DOI' value='10.17487/RFC7325'/>
</reference>



<reference  anchor='RFC7540' target='http://www.rfc-editor.org/info/rfc7540'>
<front>
<title>Hypertext Transfer Protocol Version 2 (HTTP/2)</title>
<author initials='M.' surname='Belshe' fullname='M. Belshe'><organization /></author>
<author initials='R.' surname='Peon' fullname='R. Peon'><organization /></author>
<author initials='M.' surname='Thomson' fullname='M. Thomson' role='editor'><organization /></author>
<date year='2015' month='May' />
<abstract><t>This specification describes an optimized expression of the semantics of the Hypertext Transfer Protocol (HTTP), referred to as HTTP version 2 (HTTP/2).  HTTP/2 enables a more efficient use of network resources and a reduced perception of latency by introducing header field compression and allowing multiple concurrent exchanges on the same connection.  It also introduces unsolicited push of representations from servers to clients.</t><t>This specification is an alternative to, but does not obsolete, the HTTP/1.1 message syntax.  HTTP's existing semantics remain unchanged.</t></abstract>
</front>
<seriesInfo name='RFC' value='7540'/>
<seriesInfo name='DOI' value='10.17487/RFC7540'/>
</reference>



<reference  anchor='RFC6838' target='http://www.rfc-editor.org/info/rfc6838'>
<front>
<title>Media Type Specifications and Registration Procedures</title>
<author initials='N.' surname='Freed' fullname='N. Freed'><organization /></author>
<author initials='J.' surname='Klensin' fullname='J. Klensin'><organization /></author>
<author initials='T.' surname='Hansen' fullname='T. Hansen'><organization /></author>
<date year='2013' month='January' />
<abstract><t>This document defines procedures for the specification and registration of media types for use in HTTP, MIME, and other Internet protocols.  This memo documents an Internet Best Current Practice.</t></abstract>
</front>
<seriesInfo name='BCP' value='13'/>
<seriesInfo name='RFC' value='6838'/>
<seriesInfo name='DOI' value='10.17487/RFC6838'/>
</reference>



<reference  anchor='RFC5988' target='http://www.rfc-editor.org/info/rfc5988'>
<front>
<title>Web Linking</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<date year='2010' month='October' />
<abstract><t>This document specifies relation types for Web links, and defines a registry for them.  It also defines the use of such links in HTTP headers with the Link header field.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5988'/>
<seriesInfo name='DOI' value='10.17487/RFC5988'/>
</reference>



<reference  anchor='RFC7595' target='http://www.rfc-editor.org/info/rfc7595'>
<front>
<title>Guidelines and Registration Procedures for URI Schemes</title>
<author initials='D.' surname='Thaler' fullname='D. Thaler' role='editor'><organization /></author>
<author initials='T.' surname='Hansen' fullname='T. Hansen'><organization /></author>
<author initials='T.' surname='Hardie' fullname='T. Hardie'><organization /></author>
<date year='2015' month='June' />
<abstract><t>This document updates the guidelines and recommendations, as well as the IANA registration processes, for the definition of Uniform Resource Identifier (URI) schemes.  It obsoletes RFC 4395.</t></abstract>
</front>
<seriesInfo name='BCP' value='35'/>
<seriesInfo name='RFC' value='7595'/>
<seriesInfo name='DOI' value='10.17487/RFC7595'/>
</reference>



<reference  anchor='RFC7232' target='http://www.rfc-editor.org/info/rfc7232'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Conditional Requests</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless application- level protocol for distributed, collaborative, hypertext information systems.  This document defines HTTP/1.1 conditional requests, including metadata header fields for indicating state changes, request header fields for making preconditions on such state, and rules for constructing the responses to a conditional request when one or more preconditions evaluate to false.</t></abstract>
</front>
<seriesInfo name='RFC' value='7232'/>
<seriesInfo name='DOI' value='10.17487/RFC7232'/>
</reference>



<reference  anchor='RFC7231' target='http://www.rfc-editor.org/info/rfc7231'>
<front>
<title>Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content</title>
<author initials='R.' surname='Fielding' fullname='R. Fielding' role='editor'><organization /></author>
<author initials='J.' surname='Reschke' fullname='J. Reschke' role='editor'><organization /></author>
<date year='2014' month='June' />
<abstract><t>The Hypertext Transfer Protocol (HTTP) is a stateless \%application- level protocol for distributed, collaborative, hypertext information systems.  This document defines the semantics of HTTP/1.1 messages, as expressed by request methods, request header fields, response status codes, and response header fields, along with the payload of messages (metadata and body content) and mechanisms for content negotiation.</t></abstract>
</front>
<seriesInfo name='RFC' value='7231'/>
<seriesInfo name='DOI' value='10.17487/RFC7231'/>
</reference>




    </references>

    <references title='Informative References'>





<reference  anchor='RFC0854' target='http://www.rfc-editor.org/info/rfc854'>
<front>
<title>Telnet Protocol Specification</title>
<author initials='J.' surname='Postel' fullname='J. Postel'><organization /></author>
<author initials='J.K.' surname='Reynolds' fullname='J.K. Reynolds'><organization /></author>
<date year='1983' month='May' />
<abstract><t>This is the specification of the Telnet protocol used for remote    terminal access in the ARPA Internet.  The purpose of the TELNET    Protocol is to provide a fairly general, bi-directional, eight-bit    byte oriented communications facility.  Its primary goal is to allow    a standard method of interfacing terminal devices and    terminal-oriented processes to each other.  It is envisioned that the    protocol may also be used for terminal-terminal communication    (&quot;linking&quot;) and process-process communication (distributed    computation).   This RFC specifies a standard for the ARPA Internet    community.  Hosts on the ARPA Internet are expected to adopt and    implement this standard.  Obsoletes NIC 18639.</t></abstract>
</front>
<seriesInfo name='STD' value='8'/>
<seriesInfo name='RFC' value='854'/>
<seriesInfo name='DOI' value='10.17487/RFC0854'/>
</reference>



<reference  anchor='RFC0959' target='http://www.rfc-editor.org/info/rfc959'>
<front>
<title>File Transfer Protocol</title>
<author initials='J.' surname='Postel' fullname='J. Postel'><organization /></author>
<author initials='J.' surname='Reynolds' fullname='J. Reynolds'><organization /></author>
<date year='1985' month='October' />
<abstract><t>This memo is the official specification of the File Transfer Protocol    (FTP) for the DARPA Internet community.  The primary intent is to    clarify and correct the documentation of the FTP specification, not to    change the protocol.  The following new optional commands are included    in this edition of the specification:  Change to Parent Directory    (CDUP), Structure Mount (SMNT), Store Unique (STOU), Remove Directory    (RMD), Make Directory (MKD), Print Directory (PWD), and System (SYST).    Note that this specification is compatible with the previous edition.</t></abstract>
</front>
<seriesInfo name='STD' value='9'/>
<seriesInfo name='RFC' value='959'/>
<seriesInfo name='DOI' value='10.17487/RFC0959'/>
</reference>



<reference  anchor='RFC2821' target='http://www.rfc-editor.org/info/rfc2821'>
<front>
<title>Simple Mail Transfer Protocol</title>
<author initials='J.' surname='Klensin' fullname='J. Klensin' role='editor'><organization /></author>
<date year='2001' month='April' />
<abstract><t>This document is a self-contained specification of the basic protocol for the Internet electronic mail transport.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='2821'/>
<seriesInfo name='DOI' value='10.17487/RFC2821'/>
</reference>



<reference  anchor='RFC6455' target='http://www.rfc-editor.org/info/rfc6455'>
<front>
<title>The WebSocket Protocol</title>
<author initials='I.' surname='Fette' fullname='I. Fette'><organization /></author>
<author initials='A.' surname='Melnikov' fullname='A. Melnikov'><organization /></author>
<date year='2011' month='December' />
<abstract><t>The WebSocket Protocol enables two-way communication between a client running untrusted code in a controlled environment to a remote host that has opted-in to communications from that code.  The security model used for this is the origin-based security model commonly used by web browsers.  The protocol consists of an opening handshake followed by basic message framing, layered over TCP.  The goal of this technology is to provide a mechanism for browser-based applications that need two-way communication with servers that does not rely on opening multiple HTTP connections (e.g., using XMLHttpRequest or &lt;iframe&gt;s and long polling).  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6455'/>
<seriesInfo name='DOI' value='10.17487/RFC6455'/>
</reference>



<reference  anchor='RFC0793' target='http://www.rfc-editor.org/info/rfc793'>
<front>
<title>Transmission Control Protocol</title>
<author initials='J.' surname='Postel' fullname='J. Postel'><organization /></author>
<date year='1981' month='September' />
</front>
<seriesInfo name='STD' value='7'/>
<seriesInfo name='RFC' value='793'/>
<seriesInfo name='DOI' value='10.17487/RFC0793'/>
</reference>



<reference  anchor='RFC7159' target='http://www.rfc-editor.org/info/rfc7159'>
<front>
<title>The JavaScript Object Notation (JSON) Data Interchange Format</title>
<author initials='T.' surname='Bray' fullname='T. Bray' role='editor'><organization /></author>
<date year='2014' month='March' />
<abstract><t>JavaScript Object Notation (JSON) is a lightweight, text-based, language-independent data interchange format.  It was derived from the ECMAScript Programming Language Standard.  JSON defines a small set of formatting rules for the portable representation of structured data.</t><t>This document removes inconsistencies with other specifications of JSON, repairs specification errors, and offers experience-based interoperability guidance.</t></abstract>
</front>
<seriesInfo name='RFC' value='7159'/>
<seriesInfo name='DOI' value='10.17487/RFC7159'/>
</reference>



<reference  anchor='RFC5785' target='http://www.rfc-editor.org/info/rfc5785'>
<front>
<title>Defining Well-Known Uniform Resource Identifiers (URIs)</title>
<author initials='M.' surname='Nottingham' fullname='M. Nottingham'><organization /></author>
<author initials='E.' surname='Hammer-Lahav' fullname='E. Hammer-Lahav'><organization /></author>
<date year='2010' month='April' />
<abstract><t>This memo defines a path prefix for &quot;well-known locations&quot;, &quot;/.well-known/&quot;, in selected Uniform Resource Identifier (URI) schemes.   [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5785'/>
<seriesInfo name='DOI' value='10.17487/RFC5785'/>
</reference>



<reference  anchor='RFC6352' target='http://www.rfc-editor.org/info/rfc6352'>
<front>
<title>CardDAV: vCard Extensions to Web Distributed Authoring and Versioning (WebDAV)</title>
<author initials='C.' surname='Daboo' fullname='C. Daboo'><organization /></author>
<date year='2011' month='August' />
<abstract><t>This document defines extensions to the Web Distributed Authoring and Versioning (WebDAV) protocol to specify a standard way of accessing, managing, and sharing contact information based on the vCard format.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6352'/>
<seriesInfo name='DOI' value='10.17487/RFC6352'/>
</reference>



<reference  anchor='RFC4791' target='http://www.rfc-editor.org/info/rfc4791'>
<front>
<title>Calendaring Extensions to WebDAV (CalDAV)</title>
<author initials='C.' surname='Daboo' fullname='C. Daboo'><organization /></author>
<author initials='B.' surname='Desruisseaux' fullname='B. Desruisseaux'><organization /></author>
<author initials='L.' surname='Dusseault' fullname='L. Dusseault'><organization /></author>
<date year='2007' month='March' />
<abstract><t>This document defines extensions to the Web Distributed Authoring and Versioning (WebDAV) protocol to specify a standard way of accessing, managing, and sharing calendaring and scheduling information based on the iCalendar format.  This document defines the &quot;calendar-access&quot; feature of CalDAV.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4791'/>
<seriesInfo name='DOI' value='10.17487/RFC4791'/>
</reference>




    </references>




  </back>

<!-- ##markdown-source:
H4sIAMcI91gAA7Vb23LbSJJ9x1dg6QfbsxQly9bYlja2V227pzXr20pydExs
bNhFoEhWGwQ4KEAy19H/vnkyswoFUq2ZvfWDW8SlLplZJ09ecHBwkHWuq+xp
/qHOu5XNe2/zZpH/fH39MTc+N/lVP/ddazqblU1RmzU9WrZm0R3UTde5erky
64N5sTn549z5g6OjrKRHT/PjoyfPs4L+XDbt9jSnB7Jm7pvKdtaf5k+Pj06y
zG3a07xre98dHx29PDrOTGvNaf4nW9vWVNlt035dtk2/Oc2+2i39Kk/zi7qz
bW27g9dYwnAdyx1+/WLnww8f15/5ztTlZ1M1Na1wa322caf5v3dNMc3pH1eX
tu6muW/arrULT39t1/pH17qCbhXNemP0jzU9TLdcXbna/keWmb5bNe1plh9k
Of3natrnu1n+PkqJL4sA35n26+6dpl2a2v2n6VxTn/IVuzauOs3XJOh/wT8z
2jjf6Fta96rrNv708PD29nYW7h5mWXZwcJAb3nLRZRnr0XlSaWdrKLcUrUap
5IumzRvSfJubzaZyBS8g37QNiaSp/Cy/XtH7pPseO879xhZu4azP59Z32QbT
uIJ+YhwahswnvvswtaaZro2Waj+/xz9d8/nSmtK2PsuuyfSc9z0NVDnf6WiY
GIrOC1PTfHS1r2kDXf5PYfdL1636+Yz0cQghHF4cvD6szNxW/jAY5T/PZPh1
Q+O2tsAuHrE8pnlfb/o5Tbiy5WOdiuZMJ2DR6iyu4fHDwIcY+VIGLFamXtLi
yYR5A/ZvLxM25Dp/uFwdbAy9O1owi2rtyrIiu30Au2+bsi+gG1Xq9+//cPnT
q+fHT49+++3/QsOs5FqeNtmNaZ3ttlAeHUrfkDVn2R/yhVm7ytE9ujXf5m69
qSzMgnQ4jaaBv025drXjBTT4XdobWzUbupfTGcQyW39GA5obsnEzp0FlMpMn
MxeVkxNp2xusnl6kVX9L5uWt8EC0SDY1Ghk/+7n7a69jEhzk87a5DXO2Vs3S
fqMV0hHM1xb6c34N6/tqc5xlGj2IChPbumi3G/zEEJuWDL0uBqiUJcrmZNkk
UUJU0y5tR7vfVM1WEYMeoRFI83nYd9cQDBq8T+J3rb01FalFrDYgHkNOX+Px
FeuXUGyJ10rHa6SFBI3KBknmhjc3N8VXnmJA92tbAUu+f/+BTOjoxckzMqE7
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
HXZ74/z4Wj9phzroz/8C89hHe3hCAAA=

-->

</rfc>

